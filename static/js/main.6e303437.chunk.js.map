{"version":3,"sources":["components/DiagramConfiguration.tsx","ChordDiagram/StringToChord.ts","ChordDiagram/ChordDiagram.ts","components/layout/Color.ts","components/ChordConfigurationPanel.tsx","components/ChordsSequence.tsx","components/layout/BasicTabs.tsx","components/ConfigurationPanel.tsx","components/MainChord.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Wraper","styled","div","Row","DiagramConfiguration","diagramConfiguration","setDiagramConfiguration","handleNumberChange","value","param","handleBooleanChange","handleStringChange","TextField","label","variant","defaultValue","width","onBlur","e","parseInt","target","height","numOfStrings","numOfFrets","stringWidth","fretsWidth","forcePosition","animationDuration","FormControlLabel","control","Switch","checked","showFretsLabels","onChange","showBridgeLabel","showFingerLabels","showOpenStringsLabels","playChord","showTuning","tuning","split","defaultColor","stringColor","fretColor","textColor","labelColor","backgroundColor","bridgeColor","fontFamily","fontSize","fontStyle","fontWeight","sortFingers","fingerA","fingerB","fingerAString","Array","isArray","string","fingerBString","fret","getEmptyChordObject","title","fingers","startFret","mutedStrings","openStrings","getEmptyChordConfiguration","availablePositions","isLastPositionCustom","selectedPosition","chords","constructChordStringFromConfigurableChord","chord","chordString","chordStringParams","length","selectedChord","forEach","finger","fingerStringParams","index","join","stringToConfigurableChord","indexOf","chordTitle","config","position","otherParams","stringStart","splice","push","char","mutedString","parseChordString","chordFingerings","findGuitarChord","allAvailablePositions","fingerings","map","_","initialSelectedPosition","fingering","positions","barre","currentBarre","currentBarreFret","reverse","stringIndex","stringIndices","includes","filter","sort","getChordFromFingering","arrayToConfigurableChords","defaultParams","fingersLabelColor","timeBetweenChords","ChordDiagram","selector","params","draw","elements","calcedParams","currentTitle","chordSequence","currentChord","playTimeouts","isPlaying","this","SVG","addTo","size","stringSpacing","fretSpacing","origin","x","y","bridgeStrokeWidth","Math","ceil","maxFontSize","max","animate","drawChord","setTimeout","strings","node","stroke","currentChordFunction","postPlayFunction","moveToChordInSequence","timeout","clearTimeout","layer","msg","color","attrs","textAttrs","family","style","weight","opacity","text","fill","font","move","fromX","fromY","toX","toY","line","linecap","circle","console","log","table","frets","layers","points","point","drawPointAt","baseDiagram","group","attr","id","background","fretsCover","bridge","bridgeCover","fretLabels","fretLabelsCover","stringsLabels","barres","stringMarkings","chordTitle1","chordTitle2","coverTopGradient","gradient","add","stop","rotate","coverBottomGradient","diagramWidth","topDiagramCoverXPosition","labelCoverWidth","topLabelCoverHeight","rect","bridgeFromX","bridgeFromY","bridgeHeight","fretLabelXPosition","drawText","bridgeCoverHeight","i","drawLine","toString","fretsCoverTopHeight","fretsCoverTop","fretsCoverBottomHeight","fretsCoverBottomYPosition","fretsCoverBottom","fretsLabelCoverTop","fretsLabelCoverBottom","fretsLabelCoverSide","getFingerBasePosition","fingerBasePositionX","fingerBasePositionY","barreLayerName","fingersColor","fingerLayerName","drawCircle","fingersTopCoer","openStringMarkins","mutedStringMarkings","openStringMarkingLayerName","getOpenStringMarkingBaseYPosition","mutedStringMarkingLayerName","getMutedStringMarkingBaseYPosition","stringMarkingCover","moveDiagramToFret","debugMode","printParams","fingerIndex","chordPosition","barreLength","actualString","isForcePositionExists","undefined","isNaN","chordPositionAdd","forcePositionAdd","finalAdd","moveToX","moveToY","fretNumber","maxStartFret","topFretLine","error","bridgeTopY","labelsTopY","ease","find","getFingerChordPosition","x1","x2","moveOldTitle","drawChordTitle","chordTitleNumber","clear","Color","ChordConfigurationWrapper","selected","hasErrors","isEmptyChord","alignCenter","Column","ErrorText","type","BaseBorderLabel","ChordLabel","ShowChordButton","StyledTextField","StyledAutoComplete","Autocomplete","StyledCheckbox","Checkbox","StyledTable","getFingerByString","getIsFingerAppearsTwice","count","getIsBarreInvalid","stringEnd","getIsStartFretValid","some","errorTexts","emptyCustomChord","fingerAppearsTwice","barreInvalid","startFretIsAfterLowestFinger","ChordConfigurationPanel","props","useState","chordConfiguration","setConfig","wrapper","useRef","errors","getErrors","useEffect","current","isCurrentChord","scrollIntoView","behavior","block","handleBlur","newString","handleFingerValueChange","attribute","newConfig","findIndex","actualValue","ref","onClick","setAsCurrentChord","helperText","disableClearable","options","getOptionLabel","option","renderInput","onFocus","select","handleChordStartFretChange","NaN","fullWidth","inputProps","textAlign","disabled","newMutedStrings","newOpenStrings","Object","keys","errorInfo","StyledButton","Button","ButtonWrapper","InputWrapper","ChordsSequence","stringValue","setStringValue","textInputField","chordsConfigurations","handleChange","newChords","setChordsConfigurations","removeChord","chordArray","replace","multiline","setCurrentChord","StyledPanel","hidden","StylePanelContentWrapper","Box","TabPanel","children","role","StyleTabsWrapper","BasicTabs","tabs","React","setValue","sx","borderBottom","borderColor","Tabs","event","newValue","tab","Tab","content","Wrapper","ConfigurationPanel","setChords","MainChordWrapper","BottomContainer","ButtonContainer","ChordIndex","ChordDiagramWrapper","MainChord","diagramWrapper","chordDiagram","playButtonText","setPlayButtonText","innerHTML","drawBaseDiagram","getCurrentChord","handleMoveChord","direction","moveToNextChord","moveToPreviousChord","stopSequence","playSequence","Main","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e303437.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Switch from \"@mui/material/Switch\";\nimport TextField from \"@mui/material/TextField\";\nimport React from \"react\";\nimport {ChordDiagramParams} from \"../ChordDiagram\";\n\nconst Wraper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n  padding: 30px;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  gap: 15px;\n`;\n\ntype ConfigurationPanelProps = {\n    diagramConfiguration: ChordDiagramParams;\n    setDiagramConfiguration: (configuration: ChordDiagramParams) => void;\n};\n\nfunction DiagramConfiguration({\n                                  diagramConfiguration,\n                                  setDiagramConfiguration,\n                              }: ConfigurationPanelProps) {\n    const handleNumberChange = (\n        value: number,\n        param: keyof ChordDiagramParams\n    ) => {\n        setDiagramConfiguration({\n            ...diagramConfiguration,\n            [param]: value,\n        });\n    };\n\n    const handleBooleanChange = (\n        value: boolean,\n        param: keyof ChordDiagramParams\n    ) => {\n        setDiagramConfiguration({\n            ...diagramConfiguration,\n            [param]: value,\n        });\n    };\n\n    const handleArrayChange = (\n        value: string,\n        param: keyof ChordDiagramParams\n    ) => {\n        setDiagramConfiguration({\n            ...diagramConfiguration,\n            [param]: value.split(\",\"),\n        });\n    };\n\n    const handleStringChange = (\n        value: string,\n        param: keyof ChordDiagramParams\n    ) => {\n        setDiagramConfiguration({\n            ...diagramConfiguration,\n            [param]: value,\n        });\n    };\n\n    return (\n        <Wraper>\n            <Row>\n                <TextField\n                    label=\"Width\"\n                    variant=\"standard\"\n                    defaultValue={diagramConfiguration.width}\n                    onBlur={(e) => handleNumberChange(parseInt(e.target.value), \"width\")}\n                />\n                <TextField\n                    label=\"Height\"\n                    variant=\"standard\"\n                    defaultValue={diagramConfiguration.height}\n                    onBlur={(e) => handleNumberChange(parseInt(e.target.value), \"height\")}\n                />\n                <TextField\n                    label=\"# of Strings\"\n                    variant=\"standard\"\n                    defaultValue={diagramConfiguration.numOfStrings}\n                    onBlur={(e) =>\n                        handleNumberChange(parseInt(e.target.value), \"numOfStrings\")\n                    }\n                />\n                <TextField\n                    label=\"# of Frets\"\n                    variant=\"standard\"\n                    defaultValue={diagramConfiguration.numOfFrets}\n                    onBlur={(e) =>\n                        handleNumberChange(parseInt(e.target.value), \"numOfFrets\")\n                    }\n                />\n            </Row>\n            <Row>\n                <TextField\n                    label=\"String Width\"\n                    variant=\"standard\"\n                    defaultValue={diagramConfiguration.stringWidth}\n                    onBlur={(e) =>\n                        handleNumberChange(parseInt(e.target.value), \"stringWidth\")\n                    }\n                />\n                <TextField\n                    label=\"Frets Width\"\n                    variant=\"standard\"\n                    defaultValue={diagramConfiguration.fretsWidth}\n                    onBlur={(e) =>\n                        handleNumberChange(parseInt(e.target.value), \"fretsWidth\")\n                    }\n                />\n                <TextField\n                    label=\"Start Position\"\n                    variant=\"standard\"\n                    defaultValue={!diagramConfiguration.forcePosition && diagramConfiguration.forcePosition !== 0 ? \"\" : diagramConfiguration.forcePosition}\n                    onBlur={(e) =>\n                        handleNumberChange(parseInt(e.target.value), \"forcePosition\")\n                    }\n                />\n                <TextField\n                    label=\"Anim. Duration\"\n                    variant=\"standard\"\n                    defaultValue={diagramConfiguration.animationDuration}\n                    onBlur={(e) =>\n                        handleNumberChange(parseInt(e.target.value), \"animationDuration\")\n                    }\n                />\n            </Row>\n            <Row>\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={diagramConfiguration.showFretsLabels}\n                            onChange={(e) =>\n                                handleBooleanChange(e.target.checked, \"showFretsLabels\")\n                            }\n                        />\n                    }\n                    label=\"Show Fret Labels\"\n                />\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={diagramConfiguration.showBridgeLabel}\n                            onChange={(e) =>\n                                handleBooleanChange(e.target.checked, \"showBridgeLabel\")\n                            }\n                        />\n                    }\n                    label=\"Show Bridge Labels\"\n                />\n            </Row>\n            <Row>\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={diagramConfiguration.showFingerLabels}\n                            onChange={(e) =>\n                                handleBooleanChange(e.target.checked, \"showFingerLabels\")\n                            }\n                        />\n                    }\n                    label=\"Show Finger Label\"\n                />\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={diagramConfiguration.showOpenStringsLabels}\n                            onChange={(e) =>\n                                handleBooleanChange(e.target.checked, \"showOpenStringsLabels\")\n                            }\n                        />\n                    }\n                    label=\"Show Open Strings Labels\"\n                />\n            </Row>\n            <Row>\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={diagramConfiguration.playChord}\n                            onChange={(e) =>\n                                handleBooleanChange(e.target.checked, \"playChord\")\n                            }\n                        />\n                    }\n                    label=\"Play Chord\"\n                />\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={diagramConfiguration.showTuning}\n                            onChange={(e) =>\n                                handleBooleanChange(e.target.checked, \"showTuning\")\n                            }\n                        />\n                    }\n                    label=\"Show Tuning\"\n                />\n            </Row>\n            <Row>\n                <TextField\n                    label=\"Tuning\"\n                    variant=\"standard\"\n                    defaultValue={diagramConfiguration.tuning}\n                    onBlur={(e) => handleArrayChange(e.target.value, \"tuning\")}\n                />\n                <TextField\n                    label=\"Default Color\"\n                    variant=\"standard\"\n                    defaultValue={diagramConfiguration.defaultColor}\n                    onBlur={(e) => handleStringChange(e.target.value, \"defaultColor\")}\n                />\n            </Row>\n            <Row>\n                <TextField\n                    label=\"String Color\"\n                    variant=\"standard\"\n                    defaultValue={diagramConfiguration.stringColor}\n                    onBlur={(e) => handleStringChange(e.target.value, \"stringColor\")}\n                />\n                <TextField\n                    label=\"Fret Color\"\n                    variant=\"standard\"\n                    defaultValue={diagramConfiguration.fretColor}\n                    onBlur={(e) => handleStringChange(e.target.value, \"fretColor\")}\n                />\n            </Row>\n            <Row>\n                <TextField\n                    label=\"Text Color\"\n                    variant=\"standard\"\n                    defaultValue={diagramConfiguration.textColor}\n                    onBlur={(e) => handleStringChange(e.target.value, \"textColor\")}\n                />\n                <TextField\n                    label=\"Label Color\"\n                    variant=\"standard\"\n                    defaultValue={diagramConfiguration.labelColor}\n                    onBlur={(e) => handleStringChange(e.target.value, \"labelColor\")}\n                />\n            </Row>\n            <Row>\n                <TextField\n                    label=\"Background Color\"\n                    variant=\"standard\"\n                    defaultValue={diagramConfiguration.backgroundColor}\n                    onBlur={(e) => handleStringChange(e.target.value, \"backgroundColor\")}\n                />\n                <TextField\n                    label=\"Bridge Color\"\n                    variant=\"standard\"\n                    defaultValue={diagramConfiguration.bridgeColor}\n                    onBlur={(e) => handleStringChange(e.target.value, \"bridgeColor\")}\n                />\n            </Row>\n            <Row>\n                <TextField\n                    label=\"Font Family\"\n                    variant=\"standard\"\n                    defaultValue={diagramConfiguration.fontFamily}\n                    onBlur={(e) => handleStringChange(e.target.value, \"fontFamily\")}\n                />\n                <TextField\n                    label=\"Font Size\"\n                    variant=\"standard\"\n                    defaultValue={diagramConfiguration.fontSize}\n                    onBlur={(e) =>\n                        handleNumberChange(parseInt(e.target.value), \"fontSize\")\n                    }\n                />\n            </Row>\n            <Row>\n                <TextField\n                    label=\"Font Style\"\n                    variant=\"standard\"\n                    defaultValue={diagramConfiguration.fontStyle}\n                    onBlur={(e) => handleStringChange(e.target.value, \"fontStyle\")}\n                />\n                <TextField\n                    label=\"Font Weight\"\n                    variant=\"standard\"\n                    defaultValue={diagramConfiguration.fontWeight}\n                    onBlur={(e) =>\n                        handleNumberChange(parseInt(e.target.value), \"fontWeight\")\n                    }\n                />\n            </Row>\n        </Wraper>\n    );\n}\n\nexport default DiagramConfiguration;\n","//@ts-ignore;\nimport {findGuitarChord} from \"chord-fingering\";\nimport {Finger, Chord} from \"./types\";\n\ntype Position = {\n    fret: number;\n    note: string;\n    stringIndex: number;\n    stringNote: string;\n};\n\ntype Barre = {\n    fret: number,\n    stringIndices: [number, number]\n}\n\ntype Fingering = {\n    positions: Position[],\n    barre: Barre\n}\n\nconst sortFingers = (fingerA: Finger, fingerB: Finger): number => {\n    const fingerAString = Array.isArray(fingerA.string) ? fingerA.string[0] : fingerA.string;\n    const fingerBString = Array.isArray(fingerB.string) ? fingerB.string[0] : fingerB.string;\n    return fingerA.fret === fingerB.fret ? fingerBString - fingerAString : fingerA.fret - fingerB.fret;\n};\n\nexport const getEmptyChordObject = (title: string = \"\"): Chord => ({\n    title,\n    fingers: [],\n    startFret: 0,\n    mutedStrings: [],\n    openStrings: [],\n});\n\nexport function chordToString(chord: Chord): string {\n    let string = \"\";\n\n    string += chord.title;\n\n    return string;\n}\n\n\nfunction getChordFromFingering(chordTitle: string, fingering: Fingering): Chord {\n    if (!fingering) return getEmptyChordObject(chordTitle);\n    // console.log(fingering);\n    const {positions, barre}: Fingering = fingering;\n    const openStrings: number[] = [];\n    const mutedStrings: number[] = [1, 2, 3, 4, 5, 6];\n    const fingers: Finger[] = [];\n    let currentBarre: [number, number] | null = null\n    let currentBarreFret: number | null = null;\n    let startFret: number = 0;\n\n    positions.reverse().forEach((position: Position) => {\n        const {fret, stringIndex} = position;\n        if (startFret === 0 || (fret !== 0 && startFret > fret)) {\n            startFret = fret;\n        }\n\n        let string: Finger[\"string\"] = 6 - stringIndex;\n        if (barre && barre.fret === fret && !currentBarre) {\n            currentBarreFret = barre.fret;\n            currentBarre = [6 - barre.stringIndices[0], 6 - barre.stringIndices[barre.stringIndices.length - 1]];\n            string = currentBarre;\n        }\n\n        if (fret === 0) {\n            openStrings.push(6 - stringIndex);\n        } else {\n            fingers.push({\n                index: 0,\n                string: string,\n                fret,\n            });\n        }\n\n        if (mutedStrings.includes(6 - stringIndex)) {\n            mutedStrings.splice(mutedStrings.indexOf(6 - stringIndex), 1);\n        }\n    });\n\n    const filteredFingers: Finger[] = fingers.filter(finger => {\n        return !currentBarre || currentBarreFret !== finger.fret ||\n            (Array.isArray(finger.string) && currentBarreFret === finger.fret && currentBarre[0] === finger.string[0]);\n    })\n        .sort(sortFingers)\n        .map((finger, index) => ({...finger, index: index + 1}))\n\n    return {\n        title: chordTitle,\n        fingers: filteredFingers,\n        startFret: startFret === 1000 ? 1 : startFret,\n        mutedStrings,\n        openStrings,\n    };\n}\n\nexport const getEmptyChordConfiguration = (title: string = \"\"): ConfigurableChord => ({\n    string: title,\n    title: title,\n    availablePositions: [1],\n    isLastPositionCustom: true,\n    selectedPosition: 1,\n    chords: [getEmptyChordObject(title)]\n});\n\nexport type ConfigurableChord = {\n    string: string,\n    title: string,\n    availablePositions: number[],\n    isLastPositionCustom: boolean,\n    selectedPosition: number,\n    chords: Chord[]\n}\n\nexport function parseChordString(chordString: string) {\n    const hasParams = chordString.indexOf(\":\") !== -1;\n    if (hasParams) {\n        const [chordTitle, rawParams] = chordString.split(\":\");\n\n        const config: { selectedPosition: number, chord: Chord | null } = {\n            selectedPosition: 0,\n            chord: null\n        };\n\n        const [position, ...otherParams] = rawParams.split(\",\");\n        config.selectedPosition = parseInt(position[1])\n        if (otherParams.length > 0) {\n            const fingers: Finger[] = [];\n            const openStrings = [6, 5, 4, 3, 2, 1];\n            const mutedStrings: number[] = [];\n            let startFret = 0;\n            otherParams.forEach(param => {\n                if (param[0] === \"f\") {\n                    const fret = parseInt(param[2]);\n                    if (startFret === 0 || (fret !== 0 && startFret > fret)) {\n                        startFret = fret;\n                    }\n                    const stringStart = parseInt(param[3]);\n                    openStrings.splice(openStrings.indexOf(stringStart), 1);\n\n                    fingers.push({\n                        index: parseInt(param[1]),\n                        fret,\n                        string: param.length === 5 ? [stringStart, parseInt(param[4])] : stringStart\n                    });\n                } else {\n                    param.split(\"\").forEach(char => {\n                        const mutedString = parseInt(char);\n                        openStrings.splice(openStrings.indexOf(mutedString), 1);\n                        if (char !== \"m\") {\n                            mutedStrings.push(mutedString);\n                        }\n                    })\n                }\n            })\n            config.chord = {\n                title: chordTitle,\n                fingers,\n                openStrings,\n                mutedStrings,\n                startFret\n            }\n        }\n        return {\n            chordTitle: chordTitle,\n            ...config\n        }\n\n    }\n    return {\n        chordTitle: chordString,\n        selectedPosition: 0,\n        chord: null\n    }\n}\n\nexport const constructChordStringFromConfigurableChord = (chord: ConfigurableChord): string => {\n    let chordString = chord.title;\n    let chordStringParams = \"\";\n    if (chord.selectedPosition !== 1 || (chord.isLastPositionCustom && chord.availablePositions.length === 1 && chord.chords[0].fingers.length > 0)) {\n        chordStringParams += \"p\" + chord.selectedPosition;\n    }\n    if (chord.isLastPositionCustom && chord.selectedPosition === chord.availablePositions.length) {\n        const selectedChord = chord.chords[chord.selectedPosition - 1];\n        selectedChord.fingers.forEach(finger => {\n            let fingerStringParams = `${chordStringParams !== \"\" ? \",\" : \"\"}f${finger.index}`;\n            fingerStringParams += finger.fret;\n            fingerStringParams += Array.isArray(finger.string) ? \"\" + finger.string[0] + finger.string[1] : finger.string;\n            chordStringParams += fingerStringParams;\n        })\n\n        if (selectedChord.mutedStrings.length > 0) {\n            chordStringParams += `${chordStringParams !== \"\" ? \",\" : \"\"}m${selectedChord.mutedStrings.join(\"\")}`;\n        }\n    }\n    return chordStringParams === \"\" ? chordString : `${chordString}:${chordStringParams}`\n}\n\n\nexport function stringToConfigurableChord(chordString: string): ConfigurableChord {\n    const {chordTitle, selectedPosition, chord} = parseChordString(chordString);\n    const chordFingerings = findGuitarChord(chordTitle);\n\n    if (!chordFingerings) return getEmptyChordConfiguration(chordTitle);\n    const allAvailablePositions = chordFingerings.fingerings.map((_: any, index: number) => index + 1);\n    const initialSelectedPosition =  selectedPosition || 1;\n\n    const chords: Chord[] = chordFingerings.fingerings.map((fingering: Fingering) => getChordFromFingering(chordTitle, fingering));\n\n    return {\n        string: chordString,\n        title: chordTitle,\n        availablePositions: !!chord ? [...allAvailablePositions, allAvailablePositions.length + 1] : allAvailablePositions,\n        isLastPositionCustom: !!chord,\n        selectedPosition: !!chord ? allAvailablePositions.length + 1 : initialSelectedPosition,\n        chords: !!chord ? [...chords, chord] : chords\n    }\n}\n\nexport function arrayToConfigurableChords(chords: string[]): ConfigurableChord[] {\n    return chords.map(chord => {\n        return stringToConfigurableChord(chord);\n    })\n}\n","import {SVG, Svg, G, Gradient} from \"@svgdotjs/svg.js\";\nimport {getEmptyChordObject} from \"./StringToChord\";\nimport {Chord, Finger} from \"./types\";\n\nexport type ChordDiagramParams = {\n    width: number;\n    height: number;\n    numOfStrings: number;\n    numOfFrets: number;\n    stringWidth: number;\n    fretsWidth: number;\n    showFretsLabels: boolean;\n    showBridgeLabel: boolean;\n    showFingerLabels: boolean;\n    showOpenStringsLabels: boolean;\n    showTuning: boolean;\n    tuning: string[];\n    defaultColor: string;\n    bridgeColor?: string;\n    stringColor?: string;\n    fretColor?: string;\n    textColor?: string;\n    labelColor?: string;\n    fingersColor?: string;\n    fingersLabelColor?: string;\n    backgroundColor: string;\n    fontFamily?: string;\n    fontSize?: number;\n    fontStyle?: string;\n    fontWeight?: string;\n    debugMode?: boolean;\n    animationDuration?: number;\n    timeBetweenChords?: number\n    forcePosition?: number\n    playChord?: boolean;\n};\n\nexport const defaultParams: ChordDiagramParams = {\n    width: 500,\n    height: 600,\n    numOfStrings: 6,\n    numOfFrets: 5,\n    stringWidth: 1,\n    fretsWidth: 1,\n    showTuning: true,\n    showFretsLabels: false,\n    showBridgeLabel: false,\n    showFingerLabels: true,\n    showOpenStringsLabels: false,\n    tuning: [\"E\", \"A\", \"D\", \"G\", \"B\", \"E\"],\n    defaultColor: \"#666666\",\n    fingersLabelColor: \"#ffffff\",\n    backgroundColor: \"#ffffff\",\n    animationDuration: 1000,\n    timeBetweenChords: 2000,\n    playChord: true\n};\n\ntype TextAttributes = {\n    family: ChordDiagramParams[\"fontFamily\"];\n    size: ChordDiagramParams[\"fontSize\"];\n    style: ChordDiagramParams[\"fontStyle\"];\n    weight: ChordDiagramParams[\"fontWeight\"];\n    \"text-anchor\": string;\n    opacity: number;\n};\n\nexport class ChordDiagram {\n    private draw: Svg;\n    private params: ChordDiagramParams = defaultParams;\n    private elements: any = {};\n    private calcedParams: any = {};\n    private currentTitle: number = 1;\n    private chordSequence: Chord[] = [];\n    private currentChord: number | null = null;\n    private playTimeouts: ReturnType<typeof setTimeout>[] = [];\n    isPlaying: boolean = false;\n\n    constructor(selector: string, params: Partial<ChordDiagramParams> = {}) {\n        this.params = {\n            ...this.params,\n            ...params,\n        };\n        this.draw = SVG()\n            .addTo(selector)\n            .size(this.params.width, this.params.height);\n\n        this.calcedParams.width = this.params.width * 0.75;\n        this.calcedParams.height = this.params.height * 0.75;\n        this.calcedParams.stringSpacing =\n            this.calcedParams.width / this.params.numOfStrings;\n        this.calcedParams.fretSpacing =\n            this.calcedParams.height / (this.params.numOfFrets + 2);\n        this.calcedParams.origin = {\n            x: this.params.width * 0.15 + this.calcedParams.stringSpacing / 2,\n            y: this.params.height * 0.15 + this.calcedParams.fretSpacing,\n        };\n        this.calcedParams.bridgeStrokeWidth = Math.ceil(\n            this.calcedParams.height / 36\n        );\n        this.calcedParams.animationDuration = this.params.animationDuration || 1000;\n        this.calcedParams.timeBetweenChords = this.params.timeBetweenChords || 2000;\n\n        const fontSize =\n            this.params.fontSize || Math.ceil(this.calcedParams.width / 20);\n        const maxFontSize = Math.max(\n            this.calcedParams.stringSpacing / 2,\n            this.calcedParams.fretSpacing / 2\n        );\n        this.calcedParams.fontSize =\n            fontSize > maxFontSize ? maxFontSize : fontSize;\n    }\n\n    getChords(): Chord[] {\n        return this.chordSequence;\n    }\n\n    setChords(chords: Chord[]) {\n        this.chordSequence = chords;\n    }\n\n    getCurrentChord() {\n        return this.currentChord;\n    }\n\n    moveToChordInSequence(index: number | null, animate?: boolean) {\n        this.currentChord = index;\n        const chord = (index || index === 0) ? this.chordSequence[index] : null;\n        this.drawChord(chord ?? getEmptyChordObject(), animate);\n        if (chord && this.params.playChord) {\n            this.playTimeouts.push(setTimeout(() => {\n                [0, 1, 2, 3, 4, 5].forEach((stringIndex) => {\n                    this.playTimeouts.push(setTimeout(() => {\n                        if (!chord.mutedStrings.includes(6 - stringIndex)) {\n                            this.elements.strings[stringIndex].node.animate(this.calcedParams.animationDuration / 4).stroke({width: this.params.stringWidth * 4})\n                        }\n                    }, 50 * stringIndex));\n\n                    this.playTimeouts.push(setTimeout(() => {\n                        this.elements.strings[stringIndex].node.animate(this.calcedParams.animationDuration / 4).stroke({width: this.params.stringWidth})\n                    }, 50 * stringIndex + this.calcedParams.animationDuration / 4));\n                })\n            }, this.calcedParams.animationDuration));\n        }\n        return this.currentChord;\n    }\n\n    playSequence(startIndex: number | null = null, animate?: boolean, currentChordFunction?: (currentChord: number | null) => void, postPlayFunction?: () => void) {\n        this.isPlaying = true;\n        this.moveToChordInSequence(null, animate);\n        currentChordFunction && currentChordFunction(null);\n        this.chordSequence.forEach((chord, index) => {\n            this.playTimeouts.push(setTimeout(() => {\n                const currentChord = this.moveToChordInSequence(index, animate);\n                currentChordFunction && currentChordFunction(currentChord);\n            }, this.calcedParams.timeBetweenChords * index + this.calcedParams.animationDuration));\n        })\n        this.playTimeouts.push(setTimeout(() => {\n            this.moveToChordInSequence(null, animate);\n            currentChordFunction && currentChordFunction(null);\n            this.playTimeouts.push(setTimeout(() => {\n                this.isPlaying = false;\n                postPlayFunction && postPlayFunction();\n            }, this.calcedParams.animationDuration));\n        }, this.calcedParams.timeBetweenChords * this.chordSequence.length + this.calcedParams.animationDuration))\n    }\n\n    stopSequence(animate?: boolean, currentChordFunction?: (currentChord: number | null) => void) {\n        this.isPlaying = false;\n        this.playTimeouts.forEach(timeout => clearTimeout(timeout))\n        this.moveToChordInSequence(null, animate);\n        currentChordFunction && currentChordFunction(null);\n    }\n\n    moveToNextChord(animate?: boolean) {\n        if (!this.currentChord && this.currentChord !== 0) {\n            this.currentChord = 0;\n        } else if ((this.currentChord || this.currentChord === 0) && this.currentChord + 1 === this.chordSequence.length) {\n            this.currentChord = null;\n        } else {\n            this.currentChord = this.currentChord! + 1;\n        }\n        this.moveToChordInSequence(this.currentChord, animate);\n        return this.currentChord;\n    }\n\n    moveToPreviousChord(animate?: boolean) {\n        if (!this.currentChord && this.currentChord !== 0) {\n            this.currentChord = this.chordSequence.length - 1;\n        } else if ((this.currentChord || this.currentChord === 0) && this.currentChord - 1 < 0) {\n            this.currentChord = null;\n        } else {\n            this.currentChord = this.currentChord! - 1;\n        }\n        this.moveToChordInSequence(this.currentChord, animate);\n        return this.currentChord;\n    }\n\n    drawText(\n        layer: Svg | G,\n        x: number,\n        y: number,\n        msg: string,\n        color: string | undefined,\n        attrs: Partial<TextAttributes> = {}\n    ) {\n        const textAttrs: any = {\n            family:\n                this.params.fontFamily ||\n                '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n            size: this.calcedParams.fontSize,\n            style: this.params.fontStyle,\n            weight: this.params.fontWeight || \"100\",\n            opacity: 1,\n            ...attrs,\n        };\n\n        const text = layer\n            .text(msg)\n            .stroke(color || this.params.defaultColor)\n            .fill(color || this.params.defaultColor)\n            .font(textAttrs);\n\n        return text.move(x - text.length() / 2, y);\n    }\n\n    drawLine(\n        layer: Svg | G,\n        fromX: number,\n        fromY: number,\n        toX: number,\n        toY: number\n    ) {\n        return layer.line(0, 0, toX - fromX, toY - fromY).move(fromX, fromY).stroke({linecap: 'round'});\n    }\n\n    drawCircle(layer: Svg | G, size: number, x: number, y: number) {\n        return layer.circle(size).move(x, y);\n    }\n\n    drawPointAt(x: number, y: number) {\n        this.draw\n            .circle(4, 4)\n            .fill(\"red\")\n            .move(x - 2, y - 2);\n    }\n\n    private printParams() {\n        console.log(\"Calced Params:\");\n        console.table(this.calcedParams);\n        const {strings, frets, layers, ...elements} = this.elements;\n        console.log(\"Strings:\");\n        console.table(strings);\n        console.log(\"Frets:\");\n        console.table(frets);\n        console.log(\"Layers:\");\n        console.table(layers);\n        console.log(\"Other Elements:\");\n        console.table(elements);\n    }\n\n    private debug(points: number[][]) {\n        points.forEach((point, index) => {\n            console.log(`debug point ${index + 1}: ${point[0]}, ${point[1]}`);\n            this.drawPointAt(point[0], point[1]);\n        });\n    }\n\n    drawBaseDiagram() {\n        const baseDiagram = this.draw.group().attr({id: \"baseDiagram\"});\n\n        //order is important!!\n        this.elements.layers = {\n            baseDiagram: baseDiagram,\n            background: baseDiagram.group().attr({id: \"background\"}),\n            strings: baseDiagram.group().attr({id: \"strings\"}),\n            frets: baseDiagram.group().attr({id: \"frets\"}),\n            fretsCover: baseDiagram.group().attr({id: \"fretsCover\"}),\n            bridge: baseDiagram.group().attr({id: \"bridge\"}),\n            bridgeCover: baseDiagram.group().attr({id: \"bridgeCover\"}),\n            fretLabels: baseDiagram.group().attr({id: \"fretLabels\"}),\n            fretLabelsCover: baseDiagram.group().attr({id: \"fretLabelsCover\"}),\n            stringsLabels: baseDiagram.group().attr({id: \"stringsLabels\"}),\n            barres: baseDiagram.group().attr({id: \"barres\"}),\n            fingers: baseDiagram.group().attr({id: \"fingers\"}),\n            stringMarkings: baseDiagram.group().attr({id: \"stringMarkings\"}),\n            chordTitle1: baseDiagram.group().attr({id: \"chordTitle1\"}),\n            chordTitle2: baseDiagram.group().attr({id: \"chordTitle2\"}),\n        };\n\n        const coverTopGradient = this.draw\n            .gradient(\"linear\", (add: Gradient) => {\n                add.stop(0, this.params.backgroundColor);\n                add.stop(0.9, this.params.backgroundColor);\n                add.stop(1, this.params.backgroundColor, 0);\n            })\n            .rotate(90);\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const coverTopGradientDebug = this.draw\n            .gradient(\"linear\", (add: Gradient) => {\n                add.stop(0, \"rgba(255,0,0)\", 0.5);\n                add.stop(0.9, \"rgba(255,0,0)\", 0.5);\n                add.stop(1, \"rgba(0,255,0)\", 0.5);\n            })\n            .rotate(90);\n\n        const coverBottomGradient = this.draw\n            .gradient(\"linear\", (add: Gradient) => {\n                add.stop(0, this.params.backgroundColor, 0);\n                add.stop(0.1, this.params.backgroundColor);\n                add.stop(1, this.params.backgroundColor);\n            })\n            .rotate(90);\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const coverBottomGradientDebug = this.draw\n            .gradient(\"linear\", (add: Gradient) => {\n                add.stop(0, \"rgba(0,255,0)\", 0.5);\n                add.stop(0.1, \"rgba(255,0,0)\", 0.5);\n                add.stop(1, \"rgba(255,0,0)\", 0.5);\n            })\n            .rotate(90);\n\n        const diagramWidth =\n            this.calcedParams.stringSpacing * (this.params.numOfStrings - 1) +\n            this.params.stringWidth;\n        const topDiagramCoverXPosition =\n            this.calcedParams.origin.x - this.params.fretsWidth / 2;\n        const labelCoverWidth =\n            this.calcedParams.origin.x - this.params.fretsWidth * 2;\n        const topLabelCoverHeight =\n            this.calcedParams.origin.y -\n            this.calcedParams.bridgeStrokeWidth / 2 -\n            this.calcedParams.fontSize / 2;\n\n        /****** BACKGROUND ******/\n        this.elements.background = {\n            node: this.elements.layers.background\n                .rect(this.params.width, this.params.height)\n                .stroke({width: 0})\n                .fill(this.params.backgroundColor),\n        };\n\n        /****** BRIDGE *****/\n\n            // bridge\n        const bridgeFromX =\n                this.calcedParams.origin.x - this.params.stringWidth / 2;\n        const bridgeFromY =\n            this.calcedParams.origin.y - this.calcedParams.bridgeStrokeWidth;\n        const bridgeHeight = this.calcedParams.origin.y - bridgeFromY;\n        const fretLabelXPosition =\n            this.calcedParams.origin.x -\n            this.calcedParams.fontSize / 1.7 -\n            this.calcedParams.stringSpacing / 4;\n\n        this.elements.bridge = {\n            node: this.elements.layers.bridge\n                .rect(diagramWidth, bridgeHeight)\n                .move(bridgeFromX, bridgeFromY)\n                .stroke({width: 0})\n                .fill(this.params.bridgeColor || this.params.defaultColor),\n            label: this.drawText(\n                this.elements.layers.fretLabels,\n                fretLabelXPosition,\n                this.calcedParams.origin.y -\n                this.calcedParams.bridgeStrokeWidth / 2 -\n                this.calcedParams.fontSize * 0.7,\n                \"B\",\n                this.params.textColor,\n                {\n                    opacity: this.params.showBridgeLabel ? 1 : 0,\n                }\n            ),\n        };\n\n        // bridge cover\n        const bridgeCoverHeight =\n            this.calcedParams.origin.y - this.calcedParams.bridgeStrokeWidth;\n        this.elements.bridgeCover = {\n            node: this.elements.layers.bridgeCover\n                .rect(diagramWidth, bridgeCoverHeight)\n                .move(topDiagramCoverXPosition, 0)\n                .stroke({width: 0})\n                .fill(this.params.backgroundColor),\n        };\n\n        /****** FRETS *****/\n\n        // frets with labels\n        this.elements.frets = [];\n        for (let i = 0; i < 25; i += 1) {\n            const fromY =\n                this.calcedParams.origin.y + this.calcedParams.fretSpacing * i;\n\n            this.elements.frets[i] = {\n                node: this.drawLine(\n                    this.elements.layers.frets,\n                    this.calcedParams.origin.x,\n                    fromY,\n                    this.calcedParams.origin.x +\n                    this.calcedParams.stringSpacing * (this.params.numOfStrings - 1),\n                    fromY\n                ).stroke({\n                    width: this.params.fretsWidth,\n                    color: this.params.fretColor || this.params.defaultColor,\n                }),\n                label:\n                    i === 0\n                        ? null\n                        : this.drawText(\n                            this.elements.layers.fretLabels,\n                            fretLabelXPosition,\n                            fromY - this.calcedParams.fretSpacing / 2 - this.calcedParams.fontSize * 0.75,\n                            i.toString(),\n                            this.params.textColor,\n                            {\n                                opacity: i === 1 && !this.params.showFretsLabels ? 0 : 1\n                            }\n                        ),\n            };\n        }\n\n        // frets top cover\n        const fretsCoverTopHeight =\n            this.calcedParams.origin.y - this.params.fretsWidth / 2;\n        this.elements.fretsCoverTop = {\n            node: this.elements.layers.fretsCover\n                .rect(diagramWidth, fretsCoverTopHeight)\n                .move(topDiagramCoverXPosition, 0)\n                .stroke({width: 0})\n                .fill(this.params.backgroundColor),\n        };\n\n        // frets bottom cover\n        const fretsCoverBottomHeight =\n            this.params.height - this.calcedParams.height + this.params.fretsWidth;\n        const fretsCoverBottomYPosition =\n            this.calcedParams.origin.y +\n            this.calcedParams.fretSpacing * this.params.numOfFrets +\n            this.params.fretsWidth / 2;\n        this.elements.fretsCoverBottom = {\n            node: this.elements.layers.fretsCover\n                .rect(this.params.width, fretsCoverBottomHeight)\n                .move(0, fretsCoverBottomYPosition)\n                .stroke({width: 0})\n                .fill(this.params.backgroundColor),\n        };\n\n        // frets top label cover\n        this.elements.fretsLabelCoverTop = {\n            node: this.elements.layers.fretLabelsCover\n                .rect(labelCoverWidth, topLabelCoverHeight + this.calcedParams.fontSize / 2.5)\n                .stroke({width: 0})\n                .fill(coverTopGradient),\n        };\n\n        // frets bottom label cover\n        this.elements.fretsLabelCoverBottom = {\n            node: this.elements.layers.fretLabelsCover\n                .rect(labelCoverWidth, topLabelCoverHeight + this.calcedParams.fontSize)\n                .move(0, fretsCoverBottomYPosition - this.calcedParams.fontSize * 1.3)\n                .stroke({width: 0})\n                .fill(coverBottomGradient),\n        };\n\n        // frets side label cover\n        if (!this.params.showFretsLabels) {\n            this.elements.fretsLabelCoverSide = {\n                node: this.elements.layers.fretLabelsCover\n                    .rect(labelCoverWidth, topLabelCoverHeight)\n                    .move(0, this.calcedParams.origin.y + this.calcedParams.fontSize * 2)\n                    .stroke({width: 0})\n                    .fill(coverBottomGradient),\n            };\n            this.elements.fretsLabelCoverSide = {\n                node: this.elements.layers.fretLabelsCover\n                    .rect(labelCoverWidth, this.calcedParams.height)\n                    .move(0, this.calcedParams.origin.y + topLabelCoverHeight)\n                    .stroke({width: 0})\n                    .fill(this.params.backgroundColor),\n            };\n        }\n\n        /****** STRINGS *****/\n\n        // strings with labels\n        this.elements.strings = [];\n        for (let i = 0; i < this.params.numOfStrings; i += 1) {\n            this.elements.strings[i] = {\n                node: this.drawLine(\n                    this.elements.layers.strings,\n                    this.calcedParams.origin.x + this.calcedParams.stringSpacing * i,\n                    this.calcedParams.origin.y,\n                    this.calcedParams.origin.x + this.calcedParams.stringSpacing * i,\n                    this.calcedParams.origin.y +\n                    this.calcedParams.fretSpacing * this.params.numOfFrets\n                ).stroke({\n                    width: this.params.stringWidth,\n                    color: this.params.stringColor || this.params.defaultColor,\n                }),\n                label: this.drawText(\n                    this.elements.layers.stringsLabels,\n                    this.calcedParams.origin.x + this.calcedParams.stringSpacing * i,\n                    this.calcedParams.origin.y +\n                    this.calcedParams.fretSpacing * this.params.numOfFrets +\n                    10,\n                    this.params.tuning[i],\n                    this.params.textColor,\n                    {\n                        opacity: this.params.showTuning ? 1 : 0,\n                    }\n                ),\n            };\n        }\n\n        /****** FINGERS *****/\n\n        // fingers with labels\n        this.elements.fingers = [];\n        this.elements.barres = []\n        for (let i = 1; i < 5; i += 1) {\n            const [fingerBasePositionX, fingerBasePositionY] =\n                this.getFingerBasePosition(i);\n\n            const barreLayerName = \"barre\" + i;\n            this.elements.layers[barreLayerName] = this.elements.layers.barres\n                .group()\n                .attr({id: barreLayerName})\n                .opacity(0);\n            this.elements.barres[i] = {\n                node: this.drawLine(\n                    this.elements.layers[barreLayerName],\n                    fingerBasePositionX + this.calcedParams.stringSpacing / 4,\n                    fingerBasePositionY + this.calcedParams.fretSpacing / 4,\n                    fingerBasePositionX + this.calcedParams.stringSpacing / 4,\n                    fingerBasePositionY + this.calcedParams.fretSpacing / 4\n                ).stroke({\n                    width: this.calcedParams.fretSpacing / 2,\n                    color: this.params.fingersColor || this.params.defaultColor\n                }),\n                label: null,\n            };\n\n            const fingerLayerName = \"finger\" + i;\n            this.elements.layers[fingerLayerName] = this.elements.layers.fingers\n                .group()\n                .attr({id: fingerLayerName})\n                .opacity(0);\n            this.elements.fingers[i] = {\n                node: this.drawCircle(\n                    this.elements.layers[fingerLayerName],\n                    this.calcedParams.fretSpacing / 2,\n                    fingerBasePositionX,\n                    fingerBasePositionY\n                ).fill(this.params.fingersColor || this.params.defaultColor),\n                label: this.drawText(\n                    this.elements.layers[fingerLayerName],\n                    fingerBasePositionX + this.calcedParams.fretSpacing / 3.9,\n                    this.calcedParams.origin.y +\n                    this.calcedParams.fretSpacing * (i - 1) +\n                    this.calcedParams.fretSpacing / 3.2,\n                    i.toString(),\n                    this.params.fingersLabelColor,\n                    {\n                        size: this.calcedParams.fretSpacing / 3.4,\n                        opacity: this.params.showFingerLabels ? 1 : 0,\n                    }\n                ),\n            };\n        }\n\n\n        // string markings with labels\n        if (this.params.forcePosition && this.params.forcePosition > 1) {\n            this.elements.fingersTopCoer = {\n                node: this.elements.layers.stringMarkings\n                    .rect(this.params.width, fretsCoverTopHeight)\n                    .move(0, 0)\n                    .stroke({width: 0})\n                    .fill(coverTopGradient),\n            };\n        }\n\n        this.elements.openStringMarkins = [];\n        this.elements.mutedStringMarkings = [];\n        for (let i = 1; i <= this.params.numOfStrings; i += 1) {\n            const openStringMarkingLayerName = \"openStringMarking\" + i;\n            this.elements.layers[openStringMarkingLayerName] =\n                this.elements.layers.stringMarkings\n                    .group()\n                    .attr({id: openStringMarkingLayerName})\n                    .opacity(0);\n            this.elements.openStringMarkins[i] = {\n                node: this.drawCircle(\n                    this.elements.layers[openStringMarkingLayerName],\n                    this.calcedParams.fretSpacing / 3,\n                    this.calcedParams.origin.x +\n                    this.calcedParams.stringSpacing * (i - 1) -\n                    this.calcedParams.fretSpacing / 6,\n                    this.getOpenStringMarkingBaseYPosition()\n                )\n                    .stroke(this.params.defaultColor)\n                    .fill(this.params.backgroundColor),\n                label: this.drawText(\n                    this.elements.layers[openStringMarkingLayerName],\n                    this.calcedParams.origin.x +\n                    this.calcedParams.stringSpacing * (i - 1),\n                    this.calcedParams.origin.y -\n                    this.calcedParams.bridgeStrokeWidth -\n                    this.calcedParams.fretSpacing * 0.95,\n                    this.params.tuning[i - 1],\n                    this.params.defaultColor,\n                    {\n                        size: this.calcedParams.fretSpacing / 5,\n                        opacity: this.params.showOpenStringsLabels ? 1 : 0,\n                    }\n                ),\n            };\n            const mutedStringMarkingLayerName = \"mutedStringMarking\" + i;\n            this.elements.layers[mutedStringMarkingLayerName] =\n                this.elements.layers.stringMarkings\n                    .group()\n                    .attr({id: mutedStringMarkingLayerName})\n                    .opacity(0);\n            this.elements.mutedStringMarkings[i] = {\n                node: null,\n                label: this.drawText(\n                    this.elements.layers[mutedStringMarkingLayerName],\n                    this.calcedParams.origin.x +\n                    this.calcedParams.stringSpacing * (i - 1),\n                    this.getMutedStringMarkingBaseYPosition(),\n                    \"X\",\n                    this.params.defaultColor,\n                    {\n                        size: this.calcedParams.fretSpacing / 3,\n                    }\n                ),\n            };\n        }\n\n        //string markings cover\n        this.elements.stringMarkingCover = {\n            node: this.elements.layers.stringMarkings\n                .rect(this.params.width, this.calcedParams.origin.y - this.calcedParams.stringSpacing * 0.75)\n                .stroke({width: 0})\n                .fill(this.params.backgroundColor)\n        };\n\n        this.moveDiagramToFret(this.params.forcePosition || 1);\n\n        this.params.debugMode && this.printParams();\n    }\n\n    getOpenStringMarkingBaseYPosition() {\n        return (\n            this.calcedParams.origin.y -\n            this.calcedParams.bridgeStrokeWidth -\n            this.calcedParams.fretSpacing\n        );\n    }\n\n    getMutedStringMarkingBaseYPosition() {\n        return (\n            this.calcedParams.origin.y -\n            this.calcedParams.bridgeStrokeWidth -\n            this.calcedParams.fretSpacing * 1.05\n        );\n    }\n\n    getFingerBasePosition(fingerIndex: number) {\n        const x =\n            this.calcedParams.origin.x +\n            this.calcedParams.stringSpacing * (this.params.numOfStrings - 0.5);\n        const y =\n            this.calcedParams.origin.y +\n            this.calcedParams.fretSpacing * (fingerIndex - 1) +\n            this.calcedParams.fretSpacing / 4;\n        return [x, y];\n    }\n\n    getFingerChordPosition(chordPosition: number, finger: Finger) {\n        const {string, fret} = finger;\n        const actualString = Array.isArray(string) ? string[0] : string;\n        const isForcePositionExists = this.params.forcePosition !== undefined && !isNaN(this.params.forcePosition);\n        const chordPositionAdd = chordPosition <= 1 ? 0 : -chordPosition + 1;\n        const forcePositionAdd = this.params.forcePosition! <= 1 ? 0 : -this.params.forcePosition! + 1;\n        const finalAdd = isForcePositionExists ? forcePositionAdd : chordPositionAdd;\n        const moveToX =\n            this.calcedParams.origin.x +\n            ((this.params.numOfStrings - actualString - (1.25 / this.params.numOfFrets)) *\n                this.calcedParams.stringSpacing);\n        const moveToY =\n            this.calcedParams.origin.y +\n            ((fret + finalAdd - 0.75) *\n                this.calcedParams.fretSpacing);\n        let barreLength;\n        if (Array.isArray(string) && string[1]) {\n            barreLength = this.calcedParams.stringSpacing * (string[0] - string[1]) + this.calcedParams.stringSpacing / 4\n        }\n        return [moveToX, moveToY, barreLength];\n    }\n\n    moveDiagramToFret(fretNumber: number, animate?: boolean) {\n        const maxStartFret = 25 - this.params.numOfFrets;\n        const topFretLine = fretNumber - 1;\n        if (topFretLine > maxStartFret || topFretLine < 0) {\n            console.error(`Fret number should be between 1 to ${maxStartFret}`);\n            return;\n        }\n\n        const bridgeTopY =\n            this.calcedParams.origin.y - this.calcedParams.bridgeStrokeWidth;\n        const labelsTopY =\n            this.calcedParams.origin.y - this.calcedParams.fontSize * 0.9;\n        if (animate) {\n            this.elements.layers.bridge\n                .animate(this.calcedParams.animationDuration)\n                .ease('<>')\n                .y(bridgeTopY - this.calcedParams.fretSpacing * topFretLine);\n            this.elements.layers.frets\n                .animate(this.calcedParams.animationDuration)\n                .ease('<>')\n                .y(\n                    this.calcedParams.origin.y -\n                    this.calcedParams.fretSpacing * topFretLine\n                );\n            this.elements.layers.fretLabels\n                .animate(this.calcedParams.animationDuration)\n                .ease('<>')\n                .y(labelsTopY - this.calcedParams.fretSpacing * topFretLine);\n        } else {\n            this.elements.layers.bridge.y(\n                bridgeTopY - this.calcedParams.fretSpacing * topFretLine\n            );\n            this.elements.layers.frets.y(\n                this.calcedParams.origin.y - this.calcedParams.fretSpacing * topFretLine\n            );\n            this.elements.layers.fretLabels.y(\n                labelsTopY - this.calcedParams.fretSpacing * topFretLine\n            );\n        }\n    }\n\n    drawChord(chord: Chord, animate?: boolean) {\n        if (this.params.forcePosition === undefined || isNaN(this.params.forcePosition)) {\n            this.moveDiagramToFret(chord.startFret || 1, animate);\n        }\n\n        for (let i = 1; i < 5; i++) {\n            const finger = chord.fingers.find((finger: Finger) => finger.index === i);\n            if (finger) {\n                const [x, y, barreLength] = this.getFingerChordPosition(chord.startFret, finger)\n                if (animate) {\n                    this.elements.layers[\"finger\" + i]\n                        .animate(this.calcedParams.animationDuration)\n                        .ease('<>')\n                        .move(x, y)\n                        .opacity(1);\n                    if (barreLength) {\n                        this.elements.layers[\"barre\" + i]\n                            .animate(this.calcedParams.animationDuration)\n                            .ease('<>')\n                            .move(x + this.calcedParams.stringSpacing / 4, y + this.calcedParams.fretSpacing / 4)\n                            .opacity(1);\n                        this.elements.barres[i].node\n                            .animate(this.calcedParams.animationDuration)\n                            .ease('<>')\n                            .attr({x1: x + barreLength})\n                    } else {\n                        this.elements.layers[\"barre\" + i]\n                            .animate(this.calcedParams.animationDuration)\n                            .ease('<>')\n                            .move(x, y + this.calcedParams.fretSpacing / 4)\n                            .opacity(0);\n                        this.elements.barres[i].node\n                            .animate(this.calcedParams.animationDuration)\n                            .ease('<>')\n                            .attr({\n                                x1: x + this.calcedParams.fretSpacing / 4,\n                                x2: x + this.calcedParams.fretSpacing / 4\n                            })\n                    }\n                } else {\n                    this.elements.layers[\"finger\" + i]\n                        .move(x, y)\n                        .opacity(1);\n                    if (barreLength) {\n                        this.elements.layers[\"barre\" + i]\n                            .move(x + this.calcedParams.stringSpacing / 4, y + this.calcedParams.fretSpacing / 4)\n                            .opacity(1);\n                        this.elements.barres[i].node.attr({x1: x + barreLength})\n                    }\n                }\n            } else {\n                const [x, y] = this.getFingerBasePosition(i)\n                if (animate) {\n                    this.elements.layers[\"finger\" + i]\n                        .animate(this.calcedParams.animationDuration)\n                        .ease('<>')\n                        .move(x, y)\n                        .opacity(0);\n                    this.elements.layers[\"barre\" + i]\n                        .animate(this.calcedParams.animationDuration)\n                        .ease('<>')\n                        .move(x + this.calcedParams.stringSpacing / 4, y + this.calcedParams.fretSpacing / 4)\n                        .opacity(0);\n                } else {\n                    this.elements.layers[\"finger\" + i]\n                        .move(x, y)\n                        .opacity(0);\n                    this.elements.layers[\"barre\" + i]\n                        .move(x + this.calcedParams.stringSpacing / 4, y + this.calcedParams.fretSpacing / 4)\n                        .opacity(0);\n                }\n            }\n        }\n\n        for (let i = 1; i <= this.params.numOfStrings; i++) {\n            if (chord.mutedStrings.includes(this.params.numOfStrings - i + 1)) {\n                if (animate) {\n                    this.elements.layers[\"mutedStringMarking\" + i]\n                        .animate(this.calcedParams.animationDuration)\n                        .ease('<>')\n                        .y(\n                            this.calcedParams.origin.y -\n                            this.calcedParams.bridgeStrokeWidth -\n                            this.calcedParams.fretSpacing * 0.53\n                        )\n                        .opacity(1);\n                } else {\n                    this.elements.layers[\"mutedStringMarking\" + i]\n                        .y(\n                            this.calcedParams.origin.y -\n                            this.calcedParams.bridgeStrokeWidth -\n                            this.calcedParams.fretSpacing * 0.53\n                        )\n                        .opacity(1);\n                }\n            } else {\n                if (animate) {\n                    this.elements.layers[\"mutedStringMarking\" + i]\n                        .animate(this.calcedParams.animationDuration)\n                        .ease('<>')\n                        .y(this.getMutedStringMarkingBaseYPosition())\n                        .opacity(0);\n                } else {\n                    this.elements.layers[\"mutedStringMarking\" + i]\n                        .y(this.getMutedStringMarkingBaseYPosition())\n                        .opacity(0);\n                }\n            }\n\n            if (chord.openStrings.includes(this.params.numOfStrings - i + 1)) {\n                if (animate) {\n                    this.elements.layers[\"openStringMarking\" + i]\n                        .animate(this.calcedParams.animationDuration)\n                        .ease('<>')\n                        .y(\n                            this.calcedParams.origin.y -\n                            this.calcedParams.bridgeStrokeWidth -\n                            this.calcedParams.fretSpacing * 0.5\n                        )\n                        .opacity(1);\n                } else {\n                    this.elements.layers[\"openStringMarking\" + i]\n                        .y(\n                            this.calcedParams.origin.y -\n                            this.calcedParams.bridgeStrokeWidth -\n                            this.calcedParams.fretSpacing * 0.5\n                        )\n                        .opacity(1);\n                }\n            } else {\n                if (animate) {\n                    this.elements.layers[\"openStringMarking\" + i]\n                        .animate(this.calcedParams.animationDuration)\n                        .ease('<>')\n                        .y(this.getOpenStringMarkingBaseYPosition())\n                        .opacity(0);\n                } else {\n                    this.elements.layers[\"openStringMarking\" + i]\n                        .y(this.getOpenStringMarkingBaseYPosition())\n                        .opacity(0);\n                }\n            }\n        }\n\n\n        this.moveOldTitle(this.currentTitle, animate);\n        this.currentTitle = this.currentTitle % 2 + 1;\n        this.drawChordTitle(chord.title, this.currentTitle, animate);\n    }\n\n    moveOldTitle(chordTitleNumber: number, animate?: boolean) {\n        if (animate) {\n            this.elements.layers[\"chordTitle\" + chordTitleNumber].animate(this.calcedParams.animationDuration).ease('<>').x(-this.calcedParams.width / 4).opacity(0);\n        } else {\n            this.elements.layers[\"chordTitle\" + chordTitleNumber].x(-this.calcedParams.width / 4).opacity(0);\n        }\n        setTimeout(() => {\n            this.elements.layers[\"chordTitle\" + chordTitleNumber].opacity(1).x(0).clear();\n        }, this.calcedParams.animationDuration)\n    }\n\n    drawChordTitle(title: string, chordTitleNumber: number, animate?: boolean) {\n        this.elements.layers[\"chordTitle\" + chordTitleNumber].opacity(1);\n        console.log(this.elements.layers[\"chordTitle\" + chordTitleNumber]);\n        if (animate) {\n            this.elements[\"chordTitle\" + chordTitleNumber] = this.drawText(\n                this.elements.layers[\"chordTitle\" + chordTitleNumber],\n                this.params.width,\n                this.calcedParams.origin.y / 5,\n                title,\n                this.params.defaultColor,\n                {\n                    size: this.calcedParams.fontSize * 3,\n                }\n            )\n                .attr({opacity: 0})\n\n\n            this.elements[\"chordTitle\" + chordTitleNumber]\n                .animate(this.calcedParams.animationDuration)\n                .ease('<>')\n                .x(this.params.width / 2 - this.elements[\"chordTitle\" + chordTitleNumber].length() / 2)\n                .attr({opacity: 1});\n\n        } else {\n            this.elements[\"chordTitle\" + chordTitleNumber] = this.drawText(\n                this.elements.layers[\"chordTitle\" + chordTitleNumber],\n                this.params.width / 2,\n                this.calcedParams.origin.y / 5,\n                title,\n                this.params.defaultColor,\n                {\n                    size: this.calcedParams.fontSize * 3,\n                }\n            );\n        }\n    }\n}\n","export const Color = {\n    bgGray: \"#eeeeee\",\n    borderGray: \"#616161\",\n    errorRed: \"#e65100\",\n    warningOrange: \"#ff9800\",\n    selectedBlue: \"#1976d2\"\n}","import React, {ChangeEvent, useEffect, useRef, useState} from \"react\";\nimport styled from \"@emotion/styled\";\nimport TextField from \"@mui/material/TextField\";\nimport {\n    Chord,\n    ConfigurableChord,\n    constructChordStringFromConfigurableChord,\n    Finger,\n    stringToConfigurableChord\n} from \"../ChordDiagram\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ErrorIcon from '@mui/icons-material/Error';\nimport { Color } from \"./layout/Color\";\n\nconst ChordConfigurationWrapper = styled.div<{ selected: boolean, hasErrors: boolean, isEmptyChord: boolean }>`\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  border-radius: 20px;\n  border: ${({selected, hasErrors, isEmptyChord}) => {\n    if (hasErrors) {\n      return `4px solid ${Color.errorRed}`\n    }\n    if (isEmptyChord) {\n      return `4px solid ${Color.warningOrange}`\n    }\n    if (selected) {\n      return `4px solid ${Color.selectedBlue}`\n    }\n    return `2px solid ${Color.borderGray}`\n  }};\n  margin: 20px;\n  position: relative;\n`;\n\nconst Row = styled.div<{ alignCenter?: boolean }>`\n  display: flex;\n  justify-content: flex-start;\n  gap: 20px;\n  ${({alignCenter}) => alignCenter ? `align-items: center;` : null}\n`;\n\nconst Column = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nconst ErrorText = styled.div<{ type: string }>`\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  font-size: 14px;\n  color: ${({type}) => type === \"warning\" ? Color.warningOrange : Color.errorRed};;\n`;\n\nconst BaseBorderLabel = styled.div<{ selected: boolean, hasErrors: boolean, isEmptyChord: boolean, size: number, fontSize: string }>`\n  position: absolute;\n  border-radius: 50%;\n  width: ${({size}) => size}px;\n  height: ${({size}) => size}px;\n  background-color: ${({selected, hasErrors, isEmptyChord}) => {\n    if (hasErrors) {\n      return Color.errorRed\n    }\n    if (isEmptyChord) {\n      return Color.warningOrange\n    }\n    if (selected) {\n      return Color.selectedBlue\n    }\n    return Color.borderGray\n  }};\n  color: ${({isEmptyChord}) => isEmptyChord ? \"black\" : \"white\"};;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: ${({fontSize}) => fontSize};\n`;\n\nconst ChordLabel = styled(BaseBorderLabel)`\n  top: -10px;\n  left: 15px;\n`;\n\nconst ShowChordButton = styled(BaseBorderLabel)`\n  top: 35px;\n  right: -15px;\n`;\n\nconst StyledTextField = styled(TextField)<{ width?: string }>`\n  ${({width}) => width ? `width: ${width};` : \"flex-grow: 1;\"}\n`;\n\nconst StyledAutoComplete = styled(Autocomplete)<{ width: string }>`\n  width: ${({width}) => width};\n`;\n\nconst StyledCheckbox = styled(Checkbox)`\n  padding: 0;\n`;\n\nconst StyledTable = styled.table`\n  width: 100%;\n  border-spacing: 0;\n\n  & tr:first-of-type {\n    td {\n      border-top: 1px ${Color.bgGray} solid;\n\n      &:first-of-type {\n        border-top-left-radius: 10px;\n      }\n\n      &:last-of-type {\n        border-top-right-radius: 10px;\n      }\n    }\n  }\n\n  & tr:last-of-type {\n    td {\n      border-bottom: 1px ${Color.bgGray} solid;\n\n      &:first-of-type {\n        border-bottom-left-radius: 10px;\n      }\n\n      &:last-of-type {\n        border-bottom-right-radius: 10px;\n      }\n    }\n  }\n\n  & td {\n    border-right: 1px ${Color.bgGray} solid;\n    border-bottom: 1px ${Color.bgGray} solid;\n    padding: 5px 8px;\n\n    &:first-of-type {\n      border-left: 1px ${Color.bgGray} solid;\n    }\n\n    &:not(:first-of-type) {\n      text-align: center;\n    }\n  }\n`;\n\ntype ChordConfigurationProps = {\n    index: number;\n    chordConfiguration: ConfigurableChord;\n    onChange: (chord: ConfigurableChord, index: number) => void;\n    removeChord: (index: number) => void;\n    isCurrentChord: boolean;\n    setAsCurrentChord: () => void;\n};\n\nconst getFingerByString = (string: number, chord: Chord): Finger | null => {\n    return (chord && chord.fingers.find(finger => {\n        return (Array.isArray(finger.string) && finger.string[0] === string) || finger.string === string;\n    })) || null;\n}\n\nfunction getIsFingerAppearsTwice(fingerIndex: number, fingers: Finger[]) {\n    let count = 0\n    fingers.forEach(finger => finger.index === fingerIndex && count++)\n    return count > 1;\n}\n\nfunction getIsBarreInvalid(stringStart: number, stringEnd: number) {\n    return stringStart < stringEnd;\n}\n\nfunction getIsStartFretValid(startFret: number, fingers: Finger[]) {\n    return fingers.some(finger => finger.fret < startFret);\n}\n\nfunction getErrors(config: ConfigurableChord) {\n    const errors: any = {};\n    if (config.isLastPositionCustom && config.selectedPosition === config.availablePositions.length && config.chords[config.selectedPosition - 1].fingers.length === 0) {\n        errors.emptyCustomChord = true;\n    }\n\n    [1, 2, 3, 4].forEach(fingerIndex => {\n        if (getIsFingerAppearsTwice(fingerIndex, config.chords[config.selectedPosition - 1].fingers)) {\n            errors.hasErrors = true\n            errors.fingerAppearsTwice = true\n        }\n        const finger = config.chords[config.selectedPosition - 1].fingers.find(finger => finger.index === fingerIndex);\n\n        if (finger && Array.isArray(finger.string)) {\n            if (getIsBarreInvalid(finger.string[0], finger.string[1])) {\n                errors.hasErrors = true\n                errors.barreInvalid = true\n            }\n        }\n    })\n\n    if (getIsStartFretValid(config.chords[config.selectedPosition - 1].startFret, config.chords[config.selectedPosition - 1].fingers)) {\n        errors.hasErrors = true\n        errors.startFretIsAfterLowestFinger = true\n    }\n\n    return errors;\n}\n\nconst errorTexts: any = {\n    emptyCustomChord: {\n        type: \"warning\",\n        text: \"Finger positions are empty\"\n    },\n    fingerAppearsTwice: {\n        type: \"error\",\n        text: \"Same finger appears on two strings\"\n    },\n    barreInvalid: {\n        type: \"error\",\n        text: \"Barre end position cannot be bigger than string\"\n    },\n    startFretIsAfterLowestFinger: {\n        type: \"error\",\n        text: \"Start fret has to be lower than lowest finger\"\n    }\n}\n\nfunction ChordConfigurationPanel(props: ChordConfigurationProps) {\n    const [config, setConfig] = useState<ConfigurableChord>(props.chordConfiguration);\n    const wrapper = useRef<HTMLDivElement>(null);\n\n    const errors = getErrors(config);\n\n    useEffect(() => {\n        setConfig(props.chordConfiguration)\n    }, [props.chordConfiguration])\n\n    useEffect(() => {\n        if (wrapper.current && props.isCurrentChord) {\n            wrapper.current.scrollIntoView({behavior: \"smooth\", block: \"center\"});\n        }\n    }, [props.isCurrentChord])\n\n    const chord = config.chords[config.selectedPosition - 1];\n\n    const handleChordTitleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setConfig(stringToConfigurableChord(e.target.value));\n    }\n\n    const handleBlur = () => {\n        const newString = constructChordStringFromConfigurableChord(config);\n        props.onChange({...config, string: newString}, props.index);\n    };\n\n    const handleFingerValueChange = (stringIndex: number, attribute: \"index\" | \"fret\" | \"string\" | \"mutedStrings\", value: any) => {\n        const newConfig = {...config};\n        if (!newConfig.isLastPositionCustom) {\n            newConfig.chords.push(newConfig.chords[newConfig.selectedPosition - 1]);\n            newConfig.selectedPosition = newConfig.chords.length;\n            newConfig.availablePositions.push(newConfig.chords.length);\n            newConfig.isLastPositionCustom = true;\n        } else {\n            newConfig.selectedPosition = newConfig.chords.length;\n        }\n\n        if (attribute === \"mutedStrings\") {\n            newConfig.chords[newConfig.selectedPosition - 1].mutedStrings = value[0];\n            newConfig.chords[newConfig.selectedPosition - 1].openStrings = value[1];\n        } else {\n            const fingerIndex = newConfig.chords[newConfig.selectedPosition - 1].fingers.findIndex(finger => {\n                return (Array.isArray(finger.string) && finger.string[0] === stringIndex) || finger.string === stringIndex;\n            });\n\n            if (fingerIndex > -1) {\n                if (value === \"\" && attribute === \"index\") {\n                    newConfig.chords[newConfig.selectedPosition - 1].fingers.splice(fingerIndex, 1)\n                } else {\n                    let actualValue: number | [number, number] = parseInt(value);\n                    if (attribute === \"string\") {\n                        actualValue = [stringIndex, value]\n                    }\n                    newConfig.chords[newConfig.selectedPosition - 1].fingers[fingerIndex] = {\n                        ...newConfig.chords[newConfig.selectedPosition - 1].fingers[fingerIndex],\n                        [attribute]: actualValue\n                    }\n                }\n            } else {\n                newConfig.chords[newConfig.selectedPosition - 1].fingers.push({\n                    index: parseInt(value),\n                    string: stringIndex,\n                    fret: 0\n                })\n            }\n        }\n        setConfig(newConfig);\n        return newConfig;\n    };\n\n    const handleChordStartFretChange = (startFret: string) => {\n        const newConfig = {...config};\n        const value = startFret !== \"\" ? parseInt(startFret) : newConfig.chords[newConfig.selectedPosition - 1].startFret;\n        newConfig.chords[newConfig.selectedPosition - 1].startFret = value;\n\n        setConfig(newConfig);\n    }\n\n    return (\n        <ChordConfigurationWrapper\n            selected={props.isCurrentChord}\n            ref={wrapper}\n            hasErrors={errors.hasErrors}\n            isEmptyChord={errors.emptyCustomChord}\n        >\n            <ChordLabel\n                selected={props.isCurrentChord}\n                hasErrors={errors.hasErrors}\n                isEmptyChord={errors.emptyCustomChord}\n                size={20}\n                fontSize=\"0.6em\"\n            >\n                {props.index + 1}\n            </ChordLabel>\n            <ShowChordButton\n                selected={props.isCurrentChord}\n                onClick={() => props.setAsCurrentChord()}\n                hasErrors={errors.hasErrors}\n                isEmptyChord={errors.emptyCustomChord}\n                size={30}\n                fontSize=\"14px\"\n            >\n                <ArrowForwardIosIcon style={{fontSize: \"14px\"}}/>\n            </ShowChordButton>\n            <Row>\n                <StyledTextField\n                    label=\"Chord\"\n                    variant=\"standard\"\n                    value={config.title}\n                    onChange={handleChordTitleChange}\n                    onBlur={handleBlur}\n                    helperText=\"Changing this value will reset the other fields\"\n                />\n            </Row>\n            <Row>\n                <StyledAutoComplete\n                    width=\"110px\"\n                    disableClearable\n                    options={config.availablePositions}\n                    value={config.selectedPosition}\n                    onChange={(e, value: any) => {\n                        const newConfig = {...config, selectedPosition: value};\n                        const newString = constructChordStringFromConfigurableChord(newConfig);\n                        setConfig({...newConfig, string: newString})\n                        props.onChange({...newConfig, string: newString}, props.index)\n                    }}\n                    getOptionLabel={(option: any) => {\n                        return config.isLastPositionCustom && option === config.chords.length ? \"Custom\" : option.toString();\n                    }}\n                    renderInput={(params) => (\n                        <TextField {...params} label=\"Position\" variant=\"standard\"/>\n                    )}\n                />\n                <StyledTextField\n                    label=\"Start Fret\"\n                    variant=\"standard\"\n                    width=\"80px\"\n                    value={chord.startFret}\n                    onFocus={(e) => e.target.select()}\n                    onChange={(e) => handleChordStartFretChange(e.target.value)}\n                    onBlur={handleBlur}\n                    error={getIsStartFretValid(chord.startFret, chord.fingers)}\n                />\n            </Row>\n            <Row alignCenter>\n                <StyledTable>\n                    <tbody>\n                    <tr>\n                        <td style={{width: \"30px\"}}>String:</td>\n                        {[6, 5, 4, 3, 2, 1].map(string => (\n                            <td key={string}>{string}</td>\n                        ))}\n                    </tr>\n                    <tr>\n                        <td>Finger:</td>\n                        <>\n                            {[6, 5, 4, 3, 2, 1].map(string => {\n                                const finger = getFingerByString(string, chord);\n                                const fingerIndex = (!isNaN(finger?.index ?? NaN) && finger?.index) || \"\";\n                                return (\n                                    <td key={string}>\n                                        <StyledTextField\n                                            onFocus={(e) => e.target.select()}\n                                            fullWidth\n                                            key={string}\n                                            width=\"80%\"\n                                            variant=\"standard\"\n                                            error={fingerIndex !== \"\" && getIsFingerAppearsTwice(fingerIndex, chord.fingers)}\n                                            inputProps={{style: {textAlign: 'center'}}}\n                                            value={fingerIndex}\n                                            onChange={(e) => handleFingerValueChange(string, \"index\", e.target.value)}\n                                            onBlur={handleBlur}\n                                        />\n                                    </td>\n                                )\n                            })}\n                        </>\n                    </tr>\n                    <tr>\n                        <td>Fret:</td>\n                        <>\n                            {[6, 5, 4, 3, 2, 1].map(string => {\n                                const finger = getFingerByString(string, chord);\n                                const fret = (!isNaN(finger?.fret ?? NaN) && finger?.fret) || \"\"\n                                return (\n                                    <td key={string}>\n                                        <StyledTextField\n                                            onFocus={(e) => e.target.select()}\n                                            fullWidth\n                                            key={string}\n                                            width=\"80%\"\n                                            variant=\"standard\"\n                                            inputProps={{style: {textAlign: 'center'}}}\n                                            disabled={!finger?.index}\n                                            value={fret}\n                                            onChange={(e) => handleFingerValueChange(string, \"fret\", e.target.value)}\n                                            onBlur={handleBlur}\n                                        />\n                                    </td>\n                                )\n                            })}\n                        </>\n                    </tr>\n                    <tr>\n                        <td>Barre:</td>\n                        <>\n                            {[6, 5, 4, 3, 2, 1].map(string => {\n                                const finger = getFingerByString(string, chord);\n                                const barre = (Array.isArray(finger?.string) && !isNaN(finger?.string[1] ?? NaN) && finger?.string[1]) || \"\"\n                                return (\n                                    <td key={string}>\n                                        <StyledTextField\n                                            onFocus={(e) => e.target.select()}\n                                            fullWidth\n                                            key={string}\n                                            width=\"80%\"\n                                            variant=\"standard\"\n                                            error={barre !== \"\" && getIsBarreInvalid(string, barre)}\n                                            inputProps={{style: {textAlign: 'center'}}}\n                                            disabled={!finger?.index}\n                                            value={barre}\n                                            onChange={(e) => handleFingerValueChange(string, \"string\", e.target.value)}\n                                            onBlur={handleBlur}\n                                        />\n                                    </td>\n                                )\n                            })}\n                        </>\n                    </tr>\n                    <tr>\n                        <td>Muted:</td>\n                        <>\n                            {[6, 5, 4, 3, 2, 1].map(string => {\n                                return (\n                                    <td key={string}>\n                                        <StyledCheckbox\n                                            checked={chord?.mutedStrings.includes(string) ?? false}\n                                            onChange={(e) => {\n                                                const newMutedStrings = [...chord.mutedStrings]\n                                                const newOpenStrings = [...chord.openStrings]\n                                                if (e.target.checked) {\n                                                    newMutedStrings.push(string)\n                                                    newOpenStrings.splice(newOpenStrings.indexOf(string), 1)\n                                                } else {\n                                                    newMutedStrings.splice(newMutedStrings.indexOf(string), 1)\n                                                    newOpenStrings.push(string)\n\n                                                }\n                                                const newConfig = handleFingerValueChange(string, \"mutedStrings\", [newMutedStrings, newOpenStrings])\n                                                const newString = constructChordStringFromConfigurableChord(newConfig);\n                                                props.onChange({...newConfig, string: newString}, props.index);\n                                            }}\n                                        />\n                                    </td>\n                                )\n                            })}\n                        </>\n                    </tr>\n                    </tbody>\n                </StyledTable>\n            </Row>\n            <Column>\n                {Object.keys(errors).map(error => {\n                    const errorInfo = errorTexts[error];\n                    return errorInfo ? (\n                        <ErrorText key={error} type={errorInfo.type}>\n                            <ErrorIcon/>\n                            {errorInfo.text}\n                        </ErrorText>\n                    ) : null\n                })}\n            </Column>\n        </ChordConfigurationWrapper>\n    );\n}\n\nexport default ChordConfigurationPanel;","import React, { useEffect, useRef, useState } from \"react\";\nimport styled from \"@emotion/styled\";\nimport ChordConfigurationPanel from \"./ChordConfigurationPanel\";\nimport TextField from \"@mui/material/TextField\";\nimport { arrayToConfigurableChords, ConfigurableChord, getEmptyChordConfiguration } from \"../ChordDiagram\";\nimport Button from \"@mui/material/Button\";\n\nconst StyledButton = styled(Button)`\n  margin: 10px 0 -5px;\n`;\n\nconst ButtonWrapper = styled.div`\n  position: sticky;\n  bottom: 0;\n  background: linear-gradient(to bottom, transparent, #eeeeee 30%);\n  padding: 30px 20px 20px;\n  display: flex;\n  justify-content: flex-end;\n`;\n\nconst InputWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 20px;\n`;\n\nconst StyledTextField = styled(TextField)`\n  background-color: rgba(25, 118, 210, 0.1);\n`;\n\ntype ConfigurationPanelProps = {\n  chordsConfigurations: ConfigurableChord[];\n  setChordsConfigurations: (chords: ConfigurableChord[]) => void;\n  currentChord: number | null;\n  setCurrentChord: (index: number) => void;\n};\n\nfunction ChordsSequence(props: ConfigurationPanelProps) {\n  const [stringValue, setStringValue] = useState<string>(\"\")\n  const textInputField = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    setStringValue(props.chordsConfigurations.map(config => config.string).join(\" \"));\n  }, [props.chordsConfigurations])\n\n  useEffect(() => {\n    if (!props.currentChord && textInputField.current) {\n      textInputField.current.scrollIntoView({behavior: \"smooth\", block: \"start\"});\n    }\n  }, [props.currentChord])\n\n  const handleChange = (chord: ConfigurableChord, index: number) => {\n    const newChords = [...props.chordsConfigurations];\n    newChords[index] = chord;\n    props.setChordsConfigurations(newChords);\n  };\n\n  const addChord = () => {\n    props.setChordsConfigurations([...props.chordsConfigurations, getEmptyChordConfiguration()]);\n  };\n\n  const removeChord = (index: number) => {\n    const newChords = [...props.chordsConfigurations];\n    newChords.splice(index, 1);\n    props.setChordsConfigurations(newChords);\n  };\n\n  const handleTextBlur = () => {\n    const chordArray = stringValue === \"\" ? [] : stringValue.replace(\"\\n\", \" \").split(\" \");\n    props.setChordsConfigurations(arrayToConfigurableChords(chordArray));\n  }\n\n  return (\n    <div>\n      <InputWrapper ref={textInputField}>\n        <StyledTextField\n          label={\"Chord Sequence Text Input\"}\n          value={stringValue}\n          onChange={(e) => setStringValue(e.target.value)}\n          onBlur={handleTextBlur}\n          multiline\n        />\n      </InputWrapper>\n      {props.chordsConfigurations.map((config, index) => (\n        <ChordConfigurationPanel\n          key={index}\n          index={index}\n          isCurrentChord={props.currentChord === index}\n          setAsCurrentChord={() => props.setCurrentChord(index)}\n          chordConfiguration={config}\n          onChange={handleChange}\n          removeChord={removeChord}\n        />\n      ))}\n      <ButtonWrapper>\n        <StyledButton onClick={addChord} variant=\"contained\">+Add Chord</StyledButton>\n      </ButtonWrapper>\n    </div>\n  );\n}\n\nexport default ChordsSequence;\n","import React from \"react\";\nimport Tabs from \"@mui/material/Tabs\";\nimport Tab from \"@mui/material/Tab\";\nimport Box from \"@mui/material/Box\";\nimport styled from \"@emotion/styled\";\nimport { Color } from \"./Color\";\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nconst StyledPanel = styled.div`\n  background-color: ${Color.bgGray};\n  flex-grow: ${({ hidden }) => (hidden ? 0 : 1)};\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  overflow-y: auto;\n`;\n\nconst StylePanelContentWrapper = styled(Box)`\n  padding: 0;\n  width: 100%;\n`;\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index } = props;\n\n  return (\n    <StyledPanel role=\"tabpanel\" hidden={value !== index}>\n      {value === index && (\n        <StylePanelContentWrapper>{children}</StylePanelContentWrapper>\n      )}\n    </StyledPanel>\n  );\n}\n\nconst StyleTabsWrapper = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\ntype BasicTabsProps = {\n  tabs: {\n    title: string;\n    content: any;\n  }[];\n};\n\nfunction BasicTabs({ tabs }: BasicTabsProps) {\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\n    setValue(newValue);\n  };\n\n  return (\n    <StyleTabsWrapper>\n      <Box sx={{ borderBottom: 1, borderColor: \"divider\" }}>\n        <Tabs variant=\"fullWidth\" value={value} onChange={handleChange}>\n          {tabs.map((tab, index) => (\n            <Tab label={tab.title} key={index} />\n          ))}\n        </Tabs>\n      </Box>\n      {tabs.map((tab, index) => (\n        <TabPanel value={value} index={index} key={index}>\n          {tab.content}\n        </TabPanel>\n      ))}\n    </StyleTabsWrapper>\n  );\n}\n\nexport default BasicTabs;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport DiagramConfiguration from \"./DiagramConfiguration\";\nimport ChordsSequence from \"./ChordsSequence\";\nimport BasicTabs from \"./layout/BasicTabs\";\nimport {ChordDiagramParams, ConfigurableChord} from \"../ChordDiagram\";\nimport {Color} from \"./layout/Color\";\n\nconst Wrapper = styled.div`\n  height: 100%;\n  width: 30vw;\n  border-right: 2px solid ${Color.bgGray};\n`;\n\ntype ConfigurationPanelProps = {\n    chords: ConfigurableChord[];\n    setChords: (chords: ConfigurableChord[]) => void;\n    diagramConfiguration: ChordDiagramParams;\n    setDiagramConfiguration: (configuration: ChordDiagramParams) => void;\n    currentChord: number | null;\n    setCurrentChord: (index: number) => void;\n};\n\nfunction ConfigurationPanel(props: ConfigurationPanelProps) {\n    return (\n        <Wrapper>\n            <BasicTabs\n                tabs={[\n                    {\n                        title: \"Chords Sequencer\",\n                        content: (\n                            <ChordsSequence\n                                chordsConfigurations={props.chords}\n                                setChordsConfigurations={props.setChords}\n                                currentChord={props.currentChord}\n                                setCurrentChord={props.setCurrentChord}\n                            />\n                        ),\n                    },\n                    {\n                        title: \"Diagram Configuration\",\n                        content: (\n                            <DiagramConfiguration\n                                diagramConfiguration={props.diagramConfiguration}\n                                setDiagramConfiguration={props.setDiagramConfiguration}\n                            />\n                        ),\n                    }\n                ]}\n            />\n        </Wrapper>\n    );\n}\n\nexport default ConfigurationPanel;\n","import React, {useEffect, useRef, useState} from \"react\";\nimport styled from \"@emotion/styled\";\nimport {Chord, ChordDiagram, ChordDiagramParams} from \"../ChordDiagram\";\nimport Button from \"@mui/material/Button\";\n\nconst MainChordWrapper = styled.div`\n  height: 100%;\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n`;\n\nconst BottomContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  position: absolute;\n  bottom: 0;\n  padding: 20px;\n  gap: 10px;\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n`;\n\nconst ChordIndex = styled.div`\n  text-align: center;\n  color: #1976d2;\n\n  & span {\n    font-weight: 500;\n  }\n`\n\nconst ChordDiagramWrapper = styled.div<{ debugMode: boolean | undefined }>`\n  ${({debugMode}) => (debugMode ? \"border: 1px solid red;\" : null)}\n`;\n\ntype MainChordProps = {\n    diagramConfiguration: ChordDiagramParams;\n    chords: Chord[];\n    setCurrentChord: (index: number | null) => void;\n    currentChord: number | null;\n};\n\nfunction MainChord({diagramConfiguration, chords, setCurrentChord, currentChord}: MainChordProps) {\n    const diagramWrapper = useRef<HTMLDivElement>(null);\n    const chordDiagram = useRef<ChordDiagram | null>(null);\n    const [playButtonText, setPlayButtonText] = useState<string>(\"Play\");\n\n    useEffect(() => {\n        if (diagramWrapper.current) {\n            diagramWrapper.current.innerHTML = \"\";\n            chordDiagram.current = new ChordDiagram(\n                \"#main-chord-diagram-wrapper\",\n                diagramConfiguration\n            );\n        }\n\n        if (chordDiagram.current) {\n            chordDiagram.current.drawBaseDiagram();\n        }\n    }, [diagramConfiguration]);\n\n    useEffect(() => {\n        if (chordDiagram.current !== null && !chordDiagram.current.isPlaying) {\n            if (chordDiagram.current && chordDiagram.current.getCurrentChord() && chordDiagram.current.getCurrentChord()! > chords.length) {\n                chordDiagram.current.moveToChordInSequence(null, true);\n            }\n            chordDiagram.current.setChords(chords);\n        }\n    }, [chords]);\n\n    useEffect(() => {\n        if (chordDiagram.current !== null && !chordDiagram.current.isPlaying) {\n            chordDiagram.current.moveToChordInSequence(currentChord, true);\n        }\n    }, [currentChord])\n\n    const handleMoveChord = (direction: number) => {\n        if (chordDiagram.current !== null && !chordDiagram.current.isPlaying) {\n            direction === 1 ?\n                setCurrentChord(chordDiagram.current.moveToNextChord(true)) :\n                setCurrentChord(chordDiagram.current.moveToPreviousChord(true));\n        }\n    };\n\n    const handlePlay = () => {\n        if (chordDiagram.current !== null) {\n            if (chordDiagram.current?.isPlaying) {\n                chordDiagram.current.stopSequence(true, setCurrentChord);\n                setPlayButtonText(\"Play\")\n            } else {\n                chordDiagram.current.playSequence(null, true, setCurrentChord, () => setPlayButtonText(\"Play\"))\n                setPlayButtonText(\"Stop\")\n\n            }\n        }\n    }\n\n    return (\n        <MainChordWrapper>\n            <ChordDiagramWrapper\n                id={\"main-chord-diagram-wrapper\"}\n                ref={diagramWrapper}\n                debugMode={diagramConfiguration.debugMode}\n            />\n            <BottomContainer>\n                <ButtonContainer>\n                    <Button onClick={() => handleMoveChord(-1)} variant=\"contained\" disabled={chordDiagram.current?.isPlaying}>\n                        &lt;-- Previous Chord\n                    </Button>\n                    <Button onClick={handlePlay} variant=\"contained\">\n                        {playButtonText}\n                    </Button>\n                    <Button onClick={() => handleMoveChord(1)} variant=\"contained\" disabled={chordDiagram.current?.isPlaying}>Next Chord --&gt;</Button>\n                </ButtonContainer>\n                <ChordIndex>\n                    {\"Current chord: \"}\n                    <span>\n                        {chordDiagram.current?.getCurrentChord() || chordDiagram.current?.getCurrentChord() === 0 ?\n                            chordDiagram.current?.getCurrentChord()! + 1 :\n                            \"Empty\"\n                        }\n                    </span>\n                </ChordIndex>\n            </BottomContainer>\n\n        </MainChordWrapper>\n    );\n}\n\nexport default MainChord;\n","import React, {useState} from \"react\";\nimport styled from \"@emotion/styled\";\nimport ConfigurationPanel from \"./components/ConfigurationPanel\";\nimport MainChord from \"./components/MainChord\";\nimport {defaultParams, ChordDiagramParams, arrayToConfigurableChords, ConfigurableChord} from \"./ChordDiagram\";\n// import { parseChords } from \"./parser/parseChords\";\n// import camelCase from \"camelcase\";\n\n\nconst Main = styled.div`\n  display: flex;\n  height: 100vh;\n  width: 100vw;\n  overflow: hidden;\n`;\n\nfunction App() {\n    const [diagramConfiguration, setDiagramConfiguration] =\n        useState<ChordDiagramParams>({...defaultParams, debugMode: false});\n    const [chords, setChords] = useState<ConfigurableChord[]>(arrayToConfigurableChords([\"C\", \"Cmaj7\", \"C7\", \"F\", \"F/E\", \"D\", \"G\", \"Amin\", \"A-maj7\", \"Am7\", \"Am6\", \"F\", \"Eb\", \"G\", \"C\"]));\n    const [currentChord, setCurrentChord] = useState<number | null>(null);\n    // try {\n    //   // TODO - use this\n    //   const chordsFromText = parseChords(\"|\" + chords.join(\" \") + \"|\");\n    //   chordsFromText.map((c: string) => camelCase(c, { pascalCase: true }));\n    // } catch (error: any) {\n    //   console.error(`can't parse chords`);\n    // }\n\n\n    return (\n        <Main>\n            <ConfigurationPanel\n                chords={chords}\n                setChords={setChords}\n                diagramConfiguration={diagramConfiguration}\n                setDiagramConfiguration={setDiagramConfiguration}\n                currentChord={currentChord}\n                setCurrentChord={setCurrentChord}\n            />\n            <MainChord\n                diagramConfiguration={diagramConfiguration}\n                chords={chords.map(chord => chord.chords[chord.selectedPosition - 1])}\n                currentChord={currentChord}\n                setCurrentChord={setCurrentChord}\n            />\n        </Main>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"@fontsource/roboto/300.css\";\nimport \"@fontsource/roboto/400.css\";\nimport \"@fontsource/roboto/500.css\";\nimport \"@fontsource/roboto/700.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}