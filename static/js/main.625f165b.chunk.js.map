{"version":3,"sources":["components/DiagramConfiguration.tsx","ChordDiagram/StringToChord.ts","ChordDiagram/ChordDiagram.ts","components/ChordConfigurationPanel.tsx","components/ChordsSequence.tsx","components/layout/BasicTabs.tsx","components/ConfigurationPanel.tsx","components/MainChord.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Wraper","styled","div","Row","DiagramConfiguration","diagramConfiguration","setDiagramConfiguration","handleNumberChange","value","param","handleBooleanChange","handleStringChange","TextField","label","variant","defaultValue","width","onBlur","e","parseInt","target","height","numOfStrings","numOfFrets","stringWidth","fretsWidth","forcePosition","animationDuration","FormControlLabel","control","Switch","checked","showFretsLabels","onChange","showBridgeLabel","showFingerLabels","showOpenStringsLabels","showTuning","tuning","split","defaultColor","bridgeColor","stringColor","fretColor","textColor","labelColor","backgroundColor","fontFamily","fontSize","fontStyle","fontWeight","sortFingers","fingerA","fingerB","fingerAString","Array","isArray","string","fingerBString","fret","getEmptyChordObject","title","fingers","startFret","mutedStrings","openStrings","getEmptyChordConfiguration","availablePositions","isLastPositionCustom","selectedPosition","chords","constructChordStringFromConfigurableChord","chord","chordString","chordStringParams","length","selectedChord","forEach","finger","fingerStringParams","index","join","stringToConfigurableChord","indexOf","chordTitle","config","position","otherParams","stringStart","splice","push","char","mutedString","parseChordString","chordFingerings","findGuitarChord","allAvailablePositions","fingerings","map","_","initialSelectedPosition","fingering","positions","barre","currentBarre","currentBarreFret","reverse","stringIndex","stringIndices","includes","filter","sort","getChordFromFingering","arrayToConfigurableChords","defaultParams","fingersLabelColor","timeBetweenChords","ChordDiagram","selector","params","draw","elements","calcedParams","currentTitle","chordSequence","currentChord","playTimeouts","isPlaying","this","SVG","addTo","size","stringSpacing","fretSpacing","origin","x","y","bridgeStrokeWidth","Math","ceil","maxFontSize","max","animate","drawChord","currentChordFunction","postPlayFunction","moveToChordInSequence","setTimeout","timeout","clearTimeout","layer","msg","color","attrs","textAttrs","family","style","weight","opacity","text","stroke","fill","font","move","fromX","fromY","toX","toY","line","circle","console","log","table","strings","frets","layers","points","point","drawPointAt","baseDiagram","group","attr","id","background","fretsCover","bridge","bridgeCover","fretLabels","fretLabelsCover","stringsLabels","barres","stringMarkings","chordTitle1","chordTitle2","coverTopGradient","gradient","add","stop","rotate","coverBottomGradient","diagramWidth","topDiagramCoverXPosition","labelCoverWidth","topLabelCoverHeight","node","rect","bridgeFromX","bridgeFromY","bridgeHeight","fretLabelXPosition","drawText","bridgeCoverHeight","i","drawLine","toString","fretsCoverTopHeight","fretsCoverTop","fretsCoverBottomHeight","fretsCoverBottomYPosition","fretsCoverBottom","fretsLabelCoverTop","fretsLabelCoverBottom","fretsLabelCoverSide","getFingerBasePosition","fingerBasePositionX","fingerBasePositionY","barreLayerName","fingersColor","linecap","fingerLayerName","drawCircle","fingersTopCoer","openStringMarkins","mutedStringMarkings","openStringMarkingLayerName","getOpenStringMarkingBaseYPosition","mutedStringMarkingLayerName","getMutedStringMarkingBaseYPosition","stringMarkingCover","moveDiagramToFret","debugMode","printParams","fingerIndex","chordPosition","barreLength","actualString","isForcePositionExists","undefined","isNaN","chordPositionAdd","forcePositionAdd","finalAdd","moveToX","moveToY","fretNumber","maxStartFret","topFretLine","error","bridgeTopY","labelsTopY","ease","find","getFingerChordPosition","x1","x2","moveOldTitle","drawChordTitle","chordTitleNumber","clear","ChordConfigurationWrapper","selected","hasErrors","isEmptyChord","alignCenter","Column","ErrorText","type","BaseBorderLabel","ChordLabel","ShowChordButton","StyledTextField","StyledAutoComplete","Autocomplete","StyledCheckbox","Checkbox","StyledTable","getFingerByString","getIsFingerAppearsTwice","count","getIsBarreInvalid","stringEnd","errorTexts","emptyCustomChord","fingerAppearsTwice","barreInvalid","ChordConfigurationPanel","props","useState","chordConfiguration","setConfig","wrapper","useRef","errors","getErrors","useEffect","current","isCurrentChord","scrollIntoView","behavior","block","handleBlur","newString","handleFingerValueChange","attribute","newConfig","findIndex","actualValue","ref","onClick","setAsCurrentChord","helperText","disableClearable","options","getOptionLabel","option","renderInput","NaN","onFocus","select","fullWidth","inputProps","textAlign","disabled","newMutedStrings","newOpenStrings","Object","keys","errorInfo","StyledButton","Button","ButtonWrapper","InputWrapper","ChordsSequence","stringValue","setStringValue","textInputField","chordsConfigurations","handleChange","newChords","setChordsConfigurations","removeChord","chordArray","replace","multiline","setCurrentChord","StyledPanel","hidden","StylePanelContentWrapper","Box","TabPanel","children","role","StyleTabsWrapper","BasicTabs","tabs","React","setValue","sx","borderBottom","borderColor","Tabs","event","newValue","tab","Tab","content","Wrapper","ConfigurationPanel","setChords","MainChordWrapper","BottomContainer","ButtonContainer","ChordIndex","ChordDiagramWrapper","MainChord","diagramWrapper","chordDiagram","playButtonText","setPlayButtonText","innerHTML","drawBaseDiagram","getCurrentChord","handleMoveChord","direction","moveToNextChord","moveToPreviousChord","stopSequence","playSequence","Main","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.625f165b.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Switch from \"@mui/material/Switch\";\nimport TextField from \"@mui/material/TextField\";\nimport React from \"react\";\nimport { ChordDiagramParams } from \"../ChordDiagram\";\n\nconst Wraper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n  padding: 30px;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  gap: 15px;\n`;\n\ntype ConfigurationPanelProps = {\n  diagramConfiguration: ChordDiagramParams;\n  setDiagramConfiguration: (configuration: ChordDiagramParams) => void;\n};\n\nfunction DiagramConfiguration({\n  diagramConfiguration,\n  setDiagramConfiguration,\n}: ConfigurationPanelProps) {\n  const handleNumberChange = (\n    value: number,\n    param: keyof ChordDiagramParams\n  ) => {\n    setDiagramConfiguration({\n      ...diagramConfiguration,\n      [param]: value,\n    });\n  };\n\n  const handleBooleanChange = (\n    value: boolean,\n    param: keyof ChordDiagramParams\n  ) => {\n    setDiagramConfiguration({\n      ...diagramConfiguration,\n      [param]: value,\n    });\n  };\n\n  const handleArrayChange = (\n    value: string,\n    param: keyof ChordDiagramParams\n  ) => {\n    setDiagramConfiguration({\n      ...diagramConfiguration,\n      [param]: value.split(\",\"),\n    });\n  };\n\n  const handleStringChange = (\n    value: string,\n    param: keyof ChordDiagramParams\n  ) => {\n    setDiagramConfiguration({\n      ...diagramConfiguration,\n      [param]: value,\n    });\n  };\n\n  return (\n    <Wraper>\n      <Row>\n        <TextField\n          label=\"Width\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.width}\n          onBlur={(e) => handleNumberChange(parseInt(e.target.value), \"width\")}\n        />\n        <TextField\n          label=\"Height\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.height}\n          onBlur={(e) => handleNumberChange(parseInt(e.target.value), \"height\")}\n        />\n        <TextField\n          label=\"# of Strings\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.numOfStrings}\n          onBlur={(e) =>\n            handleNumberChange(parseInt(e.target.value), \"numOfStrings\")\n          }\n        />\n        <TextField\n          label=\"# of Frets\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.numOfFrets}\n          onBlur={(e) =>\n            handleNumberChange(parseInt(e.target.value), \"numOfFrets\")\n          }\n        />\n      </Row>\n      <Row>\n        <TextField\n          label=\"String Width\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.stringWidth}\n          onBlur={(e) =>\n            handleNumberChange(parseInt(e.target.value), \"stringWidth\")\n          }\n        />\n        <TextField\n          label=\"Frets Width\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.fretsWidth}\n          onBlur={(e) =>\n            handleNumberChange(parseInt(e.target.value), \"fretsWidth\")\n          }\n        />\n        <TextField\n          label=\"Start Position\"\n          variant=\"standard\"\n          defaultValue={!diagramConfiguration.forcePosition && diagramConfiguration.forcePosition !== 0 ? \"\" : diagramConfiguration.forcePosition}\n          onBlur={(e) =>\n            handleNumberChange(parseInt(e.target.value), \"forcePosition\")\n          }\n        />\n        <TextField\n          label=\"Anim. Duration\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.animationDuration}\n          onBlur={(e) =>\n            handleNumberChange(parseInt(e.target.value), \"animationDuration\")\n          }\n        />\n      </Row>\n      <Row>\n        <FormControlLabel\n          control={\n            <Switch\n              checked={diagramConfiguration.showFretsLabels}\n              onChange={(e) =>\n                handleBooleanChange(e.target.checked, \"showFretsLabels\")\n              }\n            />\n          }\n          label=\"Show Fret Labels\"\n        />\n        <FormControlLabel\n          control={\n            <Switch\n              checked={diagramConfiguration.showBridgeLabel}\n              onChange={(e) =>\n                handleBooleanChange(e.target.checked, \"showBridgeLabel\")\n              }\n            />\n          }\n          label=\"Show Bridge Labels\"\n        />\n      </Row>\n      <Row>\n        <FormControlLabel\n          control={\n            <Switch\n              checked={diagramConfiguration.showFingerLabels}\n              onChange={(e) =>\n                handleBooleanChange(e.target.checked, \"showFingerLabels\")\n              }\n            />\n          }\n          label=\"Show Finger Label\"\n        />\n        <FormControlLabel\n          control={\n            <Switch\n              checked={diagramConfiguration.showOpenStringsLabels}\n              onChange={(e) =>\n                handleBooleanChange(e.target.checked, \"showOpenStringsLabels\")\n              }\n            />\n          }\n          label=\"Show Open Strings Labels\"\n        />\n      </Row>\n      <Row>\n        <FormControlLabel\n          control={\n            <Switch\n              checked={diagramConfiguration.showTuning}\n              onChange={(e) =>\n                handleBooleanChange(e.target.checked, \"showTuning\")\n              }\n            />\n          }\n          label=\"Show Tuning\"\n        />\n        <TextField\n          label=\"Tuning\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.tuning}\n          onBlur={(e) => handleArrayChange(e.target.value, \"tuning\")}\n        />\n      </Row>\n      <Row>\n        <TextField\n          label=\"Default Color\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.defaultColor}\n          onBlur={(e) => handleStringChange(e.target.value, \"defaultColor\")}\n        />\n        <TextField\n          label=\"Bridge Color\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.bridgeColor}\n          onBlur={(e) => handleStringChange(e.target.value, \"bridgeColor\")}\n        />\n      </Row>\n      <Row>\n        <TextField\n          label=\"String Color\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.stringColor}\n          onBlur={(e) => handleStringChange(e.target.value, \"stringColor\")}\n        />\n        <TextField\n          label=\"Fret Color\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.fretColor}\n          onBlur={(e) => handleStringChange(e.target.value, \"fretColor\")}\n        />\n      </Row>\n      <Row>\n        <TextField\n          label=\"Text Color\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.textColor}\n          onBlur={(e) => handleStringChange(e.target.value, \"textColor\")}\n        />\n        <TextField\n          label=\"Label Color\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.labelColor}\n          onBlur={(e) => handleStringChange(e.target.value, \"labelColor\")}\n        />\n      </Row>\n      <Row>\n        <TextField\n          label=\"Background Color\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.backgroundColor}\n          onBlur={(e) => handleStringChange(e.target.value, \"backgroundColor\")}\n        />\n      </Row>\n      <Row>\n        <TextField\n          label=\"Font Family\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.fontFamily}\n          onBlur={(e) => handleStringChange(e.target.value, \"fontFamily\")}\n        />\n        <TextField\n          label=\"Font Size\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.fontSize}\n          onBlur={(e) =>\n            handleNumberChange(parseInt(e.target.value), \"fontSize\")\n          }\n        />\n      </Row>\n      <Row>\n        <TextField\n          label=\"Font Style\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.fontStyle}\n          onBlur={(e) => handleStringChange(e.target.value, \"fontStyle\")}\n        />\n        <TextField\n          label=\"Font Weight\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.fontWeight}\n          onBlur={(e) =>\n            handleNumberChange(parseInt(e.target.value), \"fontWeight\")\n          }\n        />\n      </Row>\n    </Wraper>\n  );\n}\n\nexport default DiagramConfiguration;\n","//@ts-ignore;\nimport {findGuitarChord} from \"chord-fingering\";\nimport {Finger, Chord} from \"./types\";\n\ntype Position = {\n    fret: number;\n    note: string;\n    stringIndex: number;\n    stringNote: string;\n};\n\ntype Barre = {\n    fret: number,\n    stringIndices: [number, number]\n}\n\ntype Fingering = {\n    positions: Position[],\n    barre: Barre\n}\n\nconst sortFingers = (fingerA: Finger, fingerB: Finger): number => {\n    const fingerAString = Array.isArray(fingerA.string) ? fingerA.string[0] : fingerA.string;\n    const fingerBString = Array.isArray(fingerB.string) ? fingerB.string[0] : fingerB.string;\n    return fingerA.fret === fingerB.fret ? fingerBString - fingerAString : fingerA.fret - fingerB.fret;\n};\n\nexport const getEmptyChordObject = (title: string = \"\"): Chord => ({\n    title,\n    fingers: [],\n    startFret: 0,\n    mutedStrings: [],\n    openStrings: [],\n});\n\nexport function chordToString(chord: Chord): string {\n    let string = \"\";\n\n    string += chord.title;\n\n    return string;\n}\n\n\nfunction getChordFromFingering(chordTitle: string, fingering: Fingering): Chord {\n    if (!fingering) return getEmptyChordObject(chordTitle);\n    // console.log(fingering);\n    const {positions, barre}: Fingering = fingering;\n    const openStrings: number[] = [];\n    const mutedStrings: number[] = [1, 2, 3, 4, 5, 6];\n    const fingers: Finger[] = [];\n    let currentBarre: [number, number] | null = null\n    let currentBarreFret: number | null = null;\n    let startFret: number = 0;\n\n    positions.reverse().forEach((position: Position) => {\n        const {fret, stringIndex} = position;\n        if (startFret === 0 || (fret !== 0 && startFret > fret)) {\n            startFret = fret;\n        }\n\n        let string: Finger[\"string\"] = 6 - stringIndex;\n        if (barre && barre.fret === fret && !currentBarre) {\n            currentBarreFret = barre.fret;\n            currentBarre = [6 - barre.stringIndices[0], 6 - barre.stringIndices[barre.stringIndices.length - 1]];\n            string = currentBarre;\n        }\n\n        if (fret === 0) {\n            openStrings.push(6 - stringIndex);\n        } else {\n            fingers.push({\n                index: 0,\n                string: string,\n                fret,\n            });\n        }\n\n        if (mutedStrings.includes(6 - stringIndex)) {\n            mutedStrings.splice(mutedStrings.indexOf(6 - stringIndex), 1);\n        }\n    });\n\n    const filteredFingers: Finger[] = fingers.filter(finger => {\n        return !currentBarre || currentBarreFret !== finger.fret ||\n            (Array.isArray(finger.string) && currentBarreFret === finger.fret && currentBarre[0] === finger.string[0]);\n    })\n        .sort(sortFingers)\n        .map((finger, index) => ({...finger, index: index + 1}))\n\n    return {\n        title: chordTitle,\n        fingers: filteredFingers,\n        startFret: startFret === 1000 ? 1 : startFret,\n        mutedStrings,\n        openStrings,\n    };\n}\n\nexport const getEmptyChordConfiguration = (title: string = \"\"): ConfigurableChord => ({\n    string: title,\n    title: title,\n    availablePositions: [1],\n    isLastPositionCustom: true,\n    selectedPosition: 1,\n    chords: [getEmptyChordObject(title)]\n});\n\nexport type ConfigurableChord = {\n    string: string,\n    title: string,\n    availablePositions: number[],\n    isLastPositionCustom: boolean,\n    selectedPosition: number,\n    chords: Chord[]\n}\n\nexport function parseChordString(chordString: string) {\n    const hasParams = chordString.indexOf(\":\") !== -1;\n    if (hasParams) {\n        const [chordTitle, rawParams] = chordString.split(\":\");\n\n        const config: { selectedPosition: number, chord: Chord | null } = {\n            selectedPosition: 0,\n            chord: null\n        };\n\n        const [position, ...otherParams] = rawParams.split(\",\");\n        config.selectedPosition = parseInt(position[1])\n        if (otherParams.length > 0) {\n            const fingers: Finger[] = [];\n            const openStrings = [6, 5, 4, 3, 2, 1];\n            const mutedStrings: number[] = [];\n            let startFret = 0;\n            otherParams.forEach(param => {\n                if (param[0] === \"f\") {\n                    const fret = parseInt(param[2]);\n                    if (startFret === 0 || (fret !== 0 && startFret > fret)) {\n                        startFret = fret;\n                    }\n                    const stringStart = parseInt(param[3]);\n                    openStrings.splice(openStrings.indexOf(stringStart), 1);\n\n                    fingers.push({\n                        index: parseInt(param[1]),\n                        fret,\n                        string: param.length === 5 ? [stringStart, parseInt(param[4])] : stringStart\n                    });\n                } else {\n                    param.split(\"\").forEach(char => {\n                        const mutedString = parseInt(char);\n                        openStrings.splice(openStrings.indexOf(mutedString), 1);\n                        if (char !== \"m\") {\n                            mutedStrings.push(mutedString);\n                        }\n                    })\n                }\n            })\n            config.chord = {\n                title: chordTitle,\n                fingers,\n                openStrings,\n                mutedStrings,\n                startFret\n            }\n        }\n        return {\n            chordTitle: chordTitle,\n            ...config\n        }\n\n    }\n    return {\n        chordTitle: chordString,\n        selectedPosition: 0,\n        chord: null\n    }\n}\n\nexport const constructChordStringFromConfigurableChord = (chord: ConfigurableChord): string => {\n    let chordString = chord.title;\n    let chordStringParams = \"\";\n    if (chord.selectedPosition !== 1 || (chord.isLastPositionCustom && chord.availablePositions.length === 1 && chord.chords[0].fingers.length > 0)) {\n        chordStringParams += \"p\" + chord.selectedPosition;\n    }\n    if (chord.isLastPositionCustom && chord.selectedPosition === chord.availablePositions.length) {\n        const selectedChord = chord.chords[chord.selectedPosition - 1];\n        selectedChord.fingers.forEach(finger => {\n            let fingerStringParams = `${chordStringParams !== \"\" ? \",\" : \"\"}f${finger.index}`;\n            fingerStringParams += finger.fret;\n            fingerStringParams += Array.isArray(finger.string) ? \"\" + finger.string[0] + finger.string[1] : finger.string;\n            chordStringParams += fingerStringParams;\n        })\n\n        if (selectedChord.mutedStrings.length > 0) {\n            chordStringParams += `${chordStringParams !== \"\" ? \",\" : \"\"}m${selectedChord.mutedStrings.join(\"\")}`;\n        }\n    }\n    return chordStringParams === \"\" ? chordString : `${chordString}:${chordStringParams}`\n}\n\n\nexport function stringToConfigurableChord(chordString: string): ConfigurableChord {\n    const {chordTitle, selectedPosition, chord} = parseChordString(chordString);\n    const chordFingerings = findGuitarChord(chordTitle);\n\n    if (!chordFingerings) return getEmptyChordConfiguration(chordTitle);\n    const allAvailablePositions = chordFingerings.fingerings.map((_: any, index: number) => index + 1);\n    const initialSelectedPosition =  selectedPosition || 1;\n\n    const chords: Chord[] = chordFingerings.fingerings.map((fingering: Fingering) => getChordFromFingering(chordTitle, fingering));\n\n    return {\n        string: chordString,\n        title: chordTitle,\n        availablePositions: !!chord ? [...allAvailablePositions, allAvailablePositions.length + 1] : allAvailablePositions,\n        isLastPositionCustom: !!chord,\n        selectedPosition: !!chord ? allAvailablePositions.length + 1 : initialSelectedPosition,\n        chords: !!chord ? [...chords, chord] : chords\n    }\n}\n\nexport function arrayToConfigurableChords(chords: string[]): ConfigurableChord[] {\n    return chords.map(chord => {\n        return stringToConfigurableChord(chord);\n    })\n}\n","import {SVG, Svg, G, Gradient} from \"@svgdotjs/svg.js\";\nimport {getEmptyChordObject} from \"./StringToChord\";\nimport {Chord, Finger} from \"./types\";\n\nexport type ChordDiagramParams = {\n    width: number;\n    height: number;\n    numOfStrings: number;\n    numOfFrets: number;\n    stringWidth: number;\n    fretsWidth: number;\n    showFretsLabels: boolean;\n    showBridgeLabel: boolean;\n    showFingerLabels: boolean;\n    showOpenStringsLabels: boolean;\n    showTuning: boolean;\n    tuning: string[];\n    defaultColor: string;\n    bridgeColor?: string;\n    stringColor?: string;\n    fretColor?: string;\n    textColor?: string;\n    labelColor?: string;\n    fingersColor?: string;\n    fingersLabelColor?: string;\n    backgroundColor: string;\n    fontFamily?: string;\n    fontSize?: number;\n    fontStyle?: string;\n    fontWeight?: string;\n    debugMode?: boolean;\n    animationDuration?: number;\n    timeBetweenChords?: number\n    forcePosition?: number\n};\n\nexport const defaultParams: ChordDiagramParams = {\n    width: 500,\n    height: 600,\n    numOfStrings: 6,\n    numOfFrets: 5,\n    stringWidth: 1,\n    fretsWidth: 1,\n    showTuning: true,\n    showFretsLabels: false,\n    showBridgeLabel: false,\n    showFingerLabels: true,\n    showOpenStringsLabels: false,\n    tuning: [\"E\", \"A\", \"D\", \"G\", \"B\", \"E\"],\n    defaultColor: \"#666666\",\n    fingersLabelColor: \"#ffffff\",\n    backgroundColor: \"#ffffff\",\n    animationDuration: 1000,\n    timeBetweenChords: 2000,\n    forcePosition: 0\n};\n\ntype TextAttributes = {\n    family: ChordDiagramParams[\"fontFamily\"];\n    size: ChordDiagramParams[\"fontSize\"];\n    style: ChordDiagramParams[\"fontStyle\"];\n    weight: ChordDiagramParams[\"fontWeight\"];\n    \"text-anchor\": string;\n    opacity: number;\n};\n\nexport class ChordDiagram {\n    private draw: Svg;\n    private params: ChordDiagramParams = defaultParams;\n    private elements: any = {};\n    private calcedParams: any = {};\n    private currentTitle: number = 1;\n    private chordSequence: Chord[] = [];\n    private currentChord: number | null = null;\n    private playTimeouts: ReturnType<typeof setTimeout>[] = [];\n    isPlaying: boolean = false;\n\n    constructor(selector: string, params: Partial<ChordDiagramParams> = {}) {\n        this.params = {\n            ...this.params,\n            ...params,\n        };\n        this.draw = SVG()\n            .addTo(selector)\n            .size(this.params.width, this.params.height);\n\n        this.calcedParams.width = this.params.width * 0.75;\n        this.calcedParams.height = this.params.height * 0.75;\n        this.calcedParams.stringSpacing =\n            this.calcedParams.width / this.params.numOfStrings;\n        this.calcedParams.fretSpacing =\n            this.calcedParams.height / (this.params.numOfFrets + 2);\n        this.calcedParams.origin = {\n            x: this.params.width * 0.15 + this.calcedParams.stringSpacing / 2,\n            y: this.params.height * 0.15 + this.calcedParams.fretSpacing,\n        };\n        this.calcedParams.bridgeStrokeWidth = Math.ceil(\n            this.calcedParams.height / 36\n        );\n        this.calcedParams.animationDuration = this.params.animationDuration || 1000;\n        this.calcedParams.timeBetweenChords = this.params.timeBetweenChords || 2000;\n\n        const fontSize =\n            this.params.fontSize || Math.ceil(this.calcedParams.width / 20);\n        const maxFontSize = Math.max(\n            this.calcedParams.stringSpacing / 2,\n            this.calcedParams.fretSpacing / 2\n        );\n        this.calcedParams.fontSize =\n            fontSize > maxFontSize ? maxFontSize : fontSize;\n    }\n\n    getChords(): Chord[] {\n        return this.chordSequence;\n    }\n\n    setChords(chords: Chord[]) {\n        this.chordSequence = chords;\n    }\n\n    getCurrentChord() {\n        return this.currentChord;\n    }\n\n    moveToChordInSequence(index: number | null, animate?: boolean) {\n        this.currentChord = index;\n        const chord = (index || index === 0) ? this.chordSequence[index] : null;\n        this.drawChord(chord ?? getEmptyChordObject(), animate);\n        return this.currentChord;\n    }\n\n    playSequence(startIndex: number | null = null, animate?: boolean, currentChordFunction?: (currentChord: number | null) => void, postPlayFunction?: () => void) {\n        this.isPlaying = true;\n        this.moveToChordInSequence(null, animate);\n        currentChordFunction && currentChordFunction(null);\n        this.chordSequence.forEach((chord, index) => {\n            this.playTimeouts.push(setTimeout(() => {\n                const currentChord = this.moveToChordInSequence(index, animate);\n                currentChordFunction && currentChordFunction(currentChord);\n            }, this.calcedParams.timeBetweenChords * index + this.calcedParams.animationDuration));\n        })\n        this.playTimeouts.push(setTimeout(() => {\n            this.moveToChordInSequence(null, animate);\n            currentChordFunction && currentChordFunction(null);\n            this.playTimeouts.push(setTimeout(() => {\n                this.isPlaying = false;\n                postPlayFunction && postPlayFunction();\n            }, this.calcedParams.animationDuration));\n        }, this.calcedParams.timeBetweenChords * this.chordSequence.length + this.calcedParams.animationDuration))\n    }\n\n    stopSequence(animate?: boolean, currentChordFunction?: (currentChord: number | null) => void) {\n        this.isPlaying = false;\n        this.playTimeouts.forEach(timeout => clearTimeout(timeout))\n        this.moveToChordInSequence(null, animate);\n        currentChordFunction && currentChordFunction(null);\n    }\n\n    moveToNextChord(animate?: boolean) {\n        if (!this.currentChord && this.currentChord !== 0) {\n            this.currentChord = 0;\n        } else if ((this.currentChord || this.currentChord === 0) && this.currentChord + 1 === this.chordSequence.length) {\n            this.currentChord = null;\n        } else {\n            this.currentChord = this.currentChord! + 1;\n        }\n        this.moveToChordInSequence(this.currentChord, animate);\n        return this.currentChord;\n    }\n\n    moveToPreviousChord(animate?: boolean) {\n        if (!this.currentChord && this.currentChord !== 0) {\n            this.currentChord = this.chordSequence.length - 1;\n        } else if ((this.currentChord || this.currentChord === 0) && this.currentChord - 1 < 0) {\n            this.currentChord = null;\n        } else {\n            this.currentChord = this.currentChord! - 1;\n        }\n        this.moveToChordInSequence(this.currentChord, animate);\n        return this.currentChord;\n    }\n\n    drawText(\n        layer: Svg | G,\n        x: number,\n        y: number,\n        msg: string,\n        color: string | undefined,\n        attrs: Partial<TextAttributes> = {}\n    ) {\n        const textAttrs: any = {\n            family:\n                this.params.fontFamily ||\n                '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n            size: this.calcedParams.fontSize,\n            style: this.params.fontStyle,\n            weight: this.params.fontWeight || \"100\",\n            opacity: 1,\n            ...attrs,\n        };\n\n        const text = layer\n            .text(msg)\n            .stroke(color || this.params.defaultColor)\n            .fill(color || this.params.defaultColor)\n            .font(textAttrs);\n\n        return text.move(x - text.length() / 2, y);\n    }\n\n    drawLine(\n        layer: Svg | G,\n        fromX: number,\n        fromY: number,\n        toX: number,\n        toY: number\n    ) {\n        return layer.line(0, 0, toX - fromX, toY - fromY).move(fromX, fromY);\n    }\n\n    drawCircle(layer: Svg | G, size: number, x: number, y: number) {\n        return layer.circle(size).move(x, y);\n    }\n\n    drawPointAt(x: number, y: number) {\n        this.draw\n            .circle(4, 4)\n            .fill(\"red\")\n            .move(x - 2, y - 2);\n    }\n\n    private printParams() {\n        console.log(\"Calced Params:\");\n        console.table(this.calcedParams);\n        const {strings, frets, layers, ...elements} = this.elements;\n        console.log(\"Strings:\");\n        console.table(strings);\n        console.log(\"Frets:\");\n        console.table(frets);\n        console.log(\"Layers:\");\n        console.table(layers);\n        console.log(\"Other Elements:\");\n        console.table(elements);\n    }\n\n    private debug(points: number[][]) {\n        points.forEach((point, index) => {\n            console.log(`debug point ${index + 1}: ${point[0]}, ${point[1]}`);\n            this.drawPointAt(point[0], point[1]);\n        });\n    }\n\n    drawBaseDiagram() {\n        const baseDiagram = this.draw.group().attr({id: \"baseDiagram\"});\n\n        //order is important!!\n        this.elements.layers = {\n            baseDiagram: baseDiagram,\n            background: baseDiagram.group().attr({id: \"background\"}),\n            strings: baseDiagram.group().attr({id: \"strings\"}),\n            frets: baseDiagram.group().attr({id: \"frets\"}),\n            fretsCover: baseDiagram.group().attr({id: \"fretsCover\"}),\n            bridge: baseDiagram.group().attr({id: \"bridge\"}),\n            bridgeCover: baseDiagram.group().attr({id: \"bridgeCover\"}),\n            fretLabels: baseDiagram.group().attr({id: \"fretLabels\"}),\n            fretLabelsCover: baseDiagram.group().attr({id: \"fretLabelsCover\"}),\n            stringsLabels: baseDiagram.group().attr({id: \"stringsLabels\"}),\n            barres: baseDiagram.group().attr({id: \"barres\"}),\n            fingers: baseDiagram.group().attr({id: \"fingers\"}),\n            stringMarkings: baseDiagram.group().attr({id: \"stringMarkings\"}),\n            chordTitle1: baseDiagram.group().attr({id: \"chordTitle1\"}),\n            chordTitle2: baseDiagram.group().attr({id: \"chordTitle2\"}),\n        };\n\n        const coverTopGradient = this.draw\n            .gradient(\"linear\", (add: Gradient) => {\n                add.stop(0, this.params.backgroundColor);\n                add.stop(0.9, this.params.backgroundColor);\n                add.stop(1, this.params.backgroundColor, 0);\n            })\n            .rotate(90);\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const coverTopGradientDebug = this.draw\n            .gradient(\"linear\", (add: Gradient) => {\n                add.stop(0, \"rgba(255,0,0)\", 0.5);\n                add.stop(0.9, \"rgba(255,0,0)\", 0.5);\n                add.stop(1, \"rgba(0,255,0)\", 0.5);\n            })\n            .rotate(90);\n\n        const coverBottomGradient = this.draw\n            .gradient(\"linear\", (add: Gradient) => {\n                add.stop(0, this.params.backgroundColor, 0);\n                add.stop(0.1, this.params.backgroundColor);\n                add.stop(1, this.params.backgroundColor);\n            })\n            .rotate(90);\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const coverBottomGradientDebug = this.draw\n            .gradient(\"linear\", (add: Gradient) => {\n                add.stop(0, \"rgba(0,255,0)\", 0.5);\n                add.stop(0.1, \"rgba(255,0,0)\", 0.5);\n                add.stop(1, \"rgba(255,0,0)\", 0.5);\n            })\n            .rotate(90);\n\n        const diagramWidth =\n            this.calcedParams.stringSpacing * (this.params.numOfStrings - 1) +\n            this.params.stringWidth;\n        const topDiagramCoverXPosition =\n            this.calcedParams.origin.x - this.params.fretsWidth / 2;\n        const labelCoverWidth =\n            this.calcedParams.origin.x - this.params.fretsWidth / 2;\n        const topLabelCoverHeight =\n            this.calcedParams.origin.y -\n            this.calcedParams.bridgeStrokeWidth / 2 -\n            this.calcedParams.fontSize / 2;\n\n        /****** BACKGROUND ******/\n        this.elements.background = {\n            node: this.elements.layers.background\n                .rect(this.params.width, this.params.height)\n                .stroke({width: 0})\n                .fill(this.params.backgroundColor),\n        };\n\n        /****** BRIDGE *****/\n\n            // bridge\n        const bridgeFromX =\n                this.calcedParams.origin.x - this.params.stringWidth / 2;\n        const bridgeFromY =\n            this.calcedParams.origin.y - this.calcedParams.bridgeStrokeWidth;\n        const bridgeHeight = this.calcedParams.origin.y - bridgeFromY;\n        const fretLabelXPosition =\n            this.calcedParams.origin.x -\n            this.calcedParams.fontSize / 1.7 -\n            this.calcedParams.stringSpacing / 4;\n\n        this.elements.bridge = {\n            node: this.elements.layers.bridge\n                .rect(diagramWidth, bridgeHeight)\n                .move(bridgeFromX, bridgeFromY)\n                .stroke({width: 0})\n                .fill(this.params.bridgeColor || this.params.defaultColor),\n            label: this.drawText(\n                this.elements.layers.fretLabels,\n                fretLabelXPosition,\n                this.calcedParams.origin.y -\n                this.calcedParams.bridgeStrokeWidth / 2 -\n                this.calcedParams.fontSize * 0.7,\n                \"B\",\n                this.params.textColor,\n                {\n                    opacity: this.params.showBridgeLabel ? 1 : 0,\n                }\n            ),\n        };\n\n        // bridge cover\n        const bridgeCoverHeight =\n            this.calcedParams.origin.y - this.calcedParams.bridgeStrokeWidth;\n        this.elements.bridgeCover = {\n            node: this.elements.layers.bridgeCover\n                .rect(diagramWidth, bridgeCoverHeight)\n                .move(topDiagramCoverXPosition, 0)\n                .stroke({width: 0})\n                .fill(this.params.backgroundColor),\n        };\n\n        /****** FRETS *****/\n\n        // frets with labels\n        this.elements.frets = [];\n        for (let i = 0; i < 25; i += 1) {\n            const fromY =\n                this.calcedParams.origin.y + this.calcedParams.fretSpacing * i;\n\n            this.elements.frets[i] = {\n                node: this.drawLine(\n                    this.elements.layers.frets,\n                    this.calcedParams.origin.x,\n                    fromY,\n                    this.calcedParams.origin.x +\n                    this.calcedParams.stringSpacing * (this.params.numOfStrings - 1),\n                    fromY\n                ).stroke({\n                    width: this.params.fretsWidth,\n                    color: this.params.fretColor || this.params.defaultColor,\n                }),\n                label:\n                    i === 0\n                        ? null\n                        : this.drawText(\n                            this.elements.layers.fretLabels,\n                            fretLabelXPosition,\n                            fromY - this.calcedParams.fretSpacing / 2 - this.calcedParams.fontSize * 0.75,\n                            i.toString(),\n                            this.params.textColor,\n                            {\n                                opacity: i === 1 && !this.params.showFretsLabels ? 0 : 1\n                            }\n                        ),\n            };\n        }\n\n        // frets top cover\n        const fretsCoverTopHeight =\n            this.calcedParams.origin.y - this.params.fretsWidth / 2;\n        this.elements.fretsCoverTop = {\n            node: this.elements.layers.fretsCover\n                .rect(diagramWidth, fretsCoverTopHeight)\n                .move(topDiagramCoverXPosition, 0)\n                .stroke({width: 0})\n                .fill(this.params.backgroundColor),\n        };\n\n        // frets bottom cover\n        const fretsCoverBottomHeight =\n            this.params.height - this.calcedParams.height + this.params.fretsWidth;\n        const fretsCoverBottomYPosition =\n            this.calcedParams.origin.y +\n            this.calcedParams.fretSpacing * this.params.numOfFrets +\n            this.params.fretsWidth / 2;\n        this.elements.fretsCoverBottom = {\n            node: this.elements.layers.fretsCover\n                .rect(this.params.width, fretsCoverBottomHeight)\n                .move(0, fretsCoverBottomYPosition)\n                .stroke({width: 0})\n                .fill(this.params.backgroundColor),\n        };\n\n        // frets top label cover\n        this.elements.fretsLabelCoverTop = {\n            node: this.elements.layers.fretLabelsCover\n                .rect(labelCoverWidth, topLabelCoverHeight + this.calcedParams.fontSize / 2.5)\n                .stroke({width: 0})\n                .fill(coverTopGradient),\n        };\n\n        // frets bottom label cover\n        this.elements.fretsLabelCoverBottom = {\n            node: this.elements.layers.fretLabelsCover\n                .rect(labelCoverWidth, topLabelCoverHeight + this.calcedParams.fontSize)\n                .move(0, fretsCoverBottomYPosition - this.calcedParams.fontSize * 1.3)\n                .stroke({width: 0})\n                .fill(coverBottomGradient),\n        };\n\n        // frets side label cover\n        if (!this.params.showFretsLabels) {\n            this.elements.fretsLabelCoverSide = {\n                node: this.elements.layers.fretLabelsCover\n                    .rect(labelCoverWidth, topLabelCoverHeight)\n                    .move(0, this.calcedParams.origin.y + this.calcedParams.fontSize * 2)\n                    .stroke({width: 0})\n                    .fill(coverBottomGradient),\n            };\n            this.elements.fretsLabelCoverSide = {\n                node: this.elements.layers.fretLabelsCover\n                    .rect(labelCoverWidth, this.calcedParams.height)\n                    .move(0, this.calcedParams.origin.y + topLabelCoverHeight)\n                    .stroke({width: 0})\n                    .fill(this.params.backgroundColor),\n            };\n        }\n\n        /****** STRINGS *****/\n\n        // strings with labels\n        this.elements.strings = [];\n        for (let i = 0; i < this.params.numOfStrings; i += 1) {\n            this.elements.strings[i] = {\n                node: this.drawLine(\n                    this.elements.layers.strings,\n                    this.calcedParams.origin.x + this.calcedParams.stringSpacing * i,\n                    this.calcedParams.origin.y,\n                    this.calcedParams.origin.x + this.calcedParams.stringSpacing * i,\n                    this.calcedParams.origin.y +\n                    this.calcedParams.fretSpacing * this.params.numOfFrets\n                ).stroke({\n                    width: this.params.stringWidth,\n                    color: this.params.stringColor || this.params.defaultColor,\n                }),\n                label: this.drawText(\n                    this.elements.layers.stringsLabels,\n                    this.calcedParams.origin.x + this.calcedParams.stringSpacing * i,\n                    this.calcedParams.origin.y +\n                    this.calcedParams.fretSpacing * this.params.numOfFrets +\n                    10,\n                    this.params.tuning[i],\n                    this.params.textColor,\n                    {\n                        opacity: this.params.showTuning ? 1 : 0,\n                    }\n                ),\n            };\n        }\n\n        /****** FINGERS *****/\n\n        // fingers with labels\n        this.elements.fingers = [];\n        this.elements.barres = []\n        for (let i = 1; i < 5; i += 1) {\n            const [fingerBasePositionX, fingerBasePositionY] =\n                this.getFingerBasePosition(i);\n\n            const barreLayerName = \"barre\" + i;\n            this.elements.layers[barreLayerName] = this.elements.layers.barres\n                .group()\n                .attr({id: barreLayerName})\n                .opacity(0);\n            this.elements.barres[i] = {\n                node: this.drawLine(\n                    this.elements.layers[barreLayerName],\n                    fingerBasePositionX + this.calcedParams.stringSpacing / 4,\n                    fingerBasePositionY + this.calcedParams.fretSpacing / 4,\n                    fingerBasePositionX + this.calcedParams.stringSpacing / 4,\n                    fingerBasePositionY + this.calcedParams.fretSpacing / 4\n                ).stroke({\n                    width: this.calcedParams.fretSpacing / 2,\n                    color: this.params.fingersColor || this.params.defaultColor,\n                    linecap: 'round'\n                }),\n                label: null,\n            };\n\n            const fingerLayerName = \"finger\" + i;\n            this.elements.layers[fingerLayerName] = this.elements.layers.fingers\n                .group()\n                .attr({id: fingerLayerName})\n                .opacity(0);\n            this.elements.fingers[i] = {\n                node: this.drawCircle(\n                    this.elements.layers[fingerLayerName],\n                    this.calcedParams.fretSpacing / 2,\n                    fingerBasePositionX,\n                    fingerBasePositionY\n                ).fill(this.params.fingersColor || this.params.defaultColor),\n                label: this.drawText(\n                    this.elements.layers[fingerLayerName],\n                    fingerBasePositionX + this.calcedParams.fretSpacing / 3.9,\n                    this.calcedParams.origin.y +\n                    this.calcedParams.fretSpacing * (i - 1) +\n                    this.calcedParams.fretSpacing / 3.2,\n                    i.toString(),\n                    this.params.fingersLabelColor,\n                    {\n                        size: this.calcedParams.fretSpacing / 3.4,\n                        opacity: this.params.showFingerLabels ? 1 : 0,\n                    }\n                ),\n            };\n        }\n\n\n        // string markings with labels\n        if (this.params.forcePosition && this.params.forcePosition > 1) {\n            this.elements.fingersTopCoer = {\n                node: this.elements.layers.stringMarkings\n                    .rect(this.params.width, fretsCoverTopHeight)\n                    .move(0, 0)\n                    .stroke({width: 0})\n                    .fill(coverTopGradient),\n            };\n        }\n\n        this.elements.openStringMarkins = [];\n        this.elements.mutedStringMarkings = [];\n        for (let i = 1; i <= this.params.numOfStrings; i += 1) {\n            const openStringMarkingLayerName = \"openStringMarking\" + i;\n            this.elements.layers[openStringMarkingLayerName] =\n                this.elements.layers.stringMarkings\n                    .group()\n                    .attr({id: openStringMarkingLayerName})\n                    .opacity(0);\n            this.elements.openStringMarkins[i] = {\n                node: this.drawCircle(\n                    this.elements.layers[openStringMarkingLayerName],\n                    this.calcedParams.fretSpacing / 3,\n                    this.calcedParams.origin.x +\n                    this.calcedParams.stringSpacing * (i - 1) -\n                    this.calcedParams.fretSpacing / 6,\n                    this.getOpenStringMarkingBaseYPosition()\n                )\n                    .stroke(this.params.defaultColor)\n                    .fill(this.params.backgroundColor),\n                label: this.drawText(\n                    this.elements.layers[openStringMarkingLayerName],\n                    this.calcedParams.origin.x +\n                    this.calcedParams.stringSpacing * (i - 1),\n                    this.calcedParams.origin.y -\n                    this.calcedParams.bridgeStrokeWidth -\n                    this.calcedParams.fretSpacing * 0.95,\n                    this.params.tuning[i - 1],\n                    this.params.defaultColor,\n                    {\n                        size: this.calcedParams.fretSpacing / 5,\n                        opacity: this.params.showOpenStringsLabels ? 1 : 0,\n                    }\n                ),\n            };\n            const mutedStringMarkingLayerName = \"mutedStringMarking\" + i;\n            this.elements.layers[mutedStringMarkingLayerName] =\n                this.elements.layers.stringMarkings\n                    .group()\n                    .attr({id: mutedStringMarkingLayerName})\n                    .opacity(0);\n            this.elements.mutedStringMarkings[i] = {\n                node: null,\n                label: this.drawText(\n                    this.elements.layers[mutedStringMarkingLayerName],\n                    this.calcedParams.origin.x +\n                    this.calcedParams.stringSpacing * (i - 1),\n                    this.getMutedStringMarkingBaseYPosition(),\n                    \"X\",\n                    this.params.defaultColor,\n                    {\n                        size: this.calcedParams.fretSpacing / 3,\n                    }\n                ),\n            };\n        }\n\n        //string markings cover\n        this.elements.stringMarkingCover = {\n            node: this.elements.layers.stringMarkings\n                .rect(this.params.width, this.calcedParams.origin.y - this.calcedParams.stringSpacing * 0.75)\n                .stroke({width: 0})\n                .fill(this.params.backgroundColor)\n        };\n\n        this.moveDiagramToFret(this.params.forcePosition || 1);\n\n        this.params.debugMode && this.printParams();\n    }\n\n    getOpenStringMarkingBaseYPosition() {\n        return (\n            this.calcedParams.origin.y -\n            this.calcedParams.bridgeStrokeWidth -\n            this.calcedParams.fretSpacing\n        );\n    }\n\n    getMutedStringMarkingBaseYPosition() {\n        return (\n            this.calcedParams.origin.y -\n            this.calcedParams.bridgeStrokeWidth -\n            this.calcedParams.fretSpacing * 1.05\n        );\n    }\n\n    getFingerBasePosition(fingerIndex: number) {\n        const x =\n            this.calcedParams.origin.x +\n            this.calcedParams.stringSpacing * (this.params.numOfStrings - 0.5);\n        const y =\n            this.calcedParams.origin.y +\n            this.calcedParams.fretSpacing * (fingerIndex - 1) +\n            this.calcedParams.fretSpacing / 4;\n        return [x, y];\n    }\n\n    getFingerChordPosition(chordPosition: number, finger: Finger) {\n        const {string, fret} = finger;\n        const actualString = Array.isArray(string) ? string[0] : string;\n        const isForcePositionExists = this.params.forcePosition !== undefined && !isNaN(this.params.forcePosition);\n        const chordPositionAdd = chordPosition <= 1 ? 0 : -chordPosition + 1;\n        const forcePositionAdd = this.params.forcePosition! <= 1 ? 0 : -this.params.forcePosition! + 1;\n        const finalAdd = isForcePositionExists ? forcePositionAdd : chordPositionAdd;\n        const moveToX =\n            this.calcedParams.origin.x +\n            ((this.params.numOfStrings - actualString - (1.25 / this.params.numOfFrets)) *\n                this.calcedParams.stringSpacing);\n        const moveToY =\n            this.calcedParams.origin.y +\n            ((fret + finalAdd - 0.75) *\n                this.calcedParams.fretSpacing);\n        let barreLength;\n        if (Array.isArray(string) && string[1]) {\n            barreLength = this.calcedParams.stringSpacing * (string[0] - string[1]) + this.calcedParams.stringSpacing / 4\n        }\n        return [moveToX, moveToY, barreLength];\n    }\n\n    moveDiagramToFret(fretNumber: number, animate?: boolean) {\n        const maxStartFret = 25 - this.params.numOfFrets;\n        const topFretLine = fretNumber - 1;\n        if (topFretLine > maxStartFret || topFretLine < 0) {\n            console.error(`Fret number should be between 1 to ${maxStartFret}`);\n            return;\n        }\n\n        const bridgeTopY =\n            this.calcedParams.origin.y - this.calcedParams.bridgeStrokeWidth;\n        const labelsTopY =\n            this.calcedParams.origin.y - this.calcedParams.fontSize * 0.9;\n        if (animate) {\n            this.elements.layers.bridge\n                .animate(this.calcedParams.animationDuration)\n                .ease('<>')\n                .y(bridgeTopY - this.calcedParams.fretSpacing * topFretLine);\n            this.elements.layers.frets\n                .animate(this.calcedParams.animationDuration)\n                .ease('<>')\n                .y(\n                    this.calcedParams.origin.y -\n                    this.calcedParams.fretSpacing * topFretLine\n                );\n            this.elements.layers.fretLabels\n                .animate(this.calcedParams.animationDuration)\n                .ease('<>')\n                .y(labelsTopY - this.calcedParams.fretSpacing * topFretLine);\n        } else {\n            this.elements.layers.bridge.y(\n                bridgeTopY - this.calcedParams.fretSpacing * topFretLine\n            );\n            this.elements.layers.frets.y(\n                this.calcedParams.origin.y - this.calcedParams.fretSpacing * topFretLine\n            );\n            this.elements.layers.fretLabels.y(\n                labelsTopY - this.calcedParams.fretSpacing * topFretLine\n            );\n        }\n    }\n\n    drawChord(chord: Chord, animate?: boolean) {\n        if (this.params.forcePosition === undefined || isNaN(this.params.forcePosition)) {\n            this.moveDiagramToFret(chord.startFret, animate);\n        }\n\n        for (let i = 1; i < 5; i++) {\n            const finger = chord.fingers.find((finger: Finger) => finger.index === i);\n            if (finger) {\n                const [x, y, barreLength] = this.getFingerChordPosition(chord.startFret, finger)\n                if (animate) {\n                    this.elements.layers[\"finger\" + i]\n                        .animate(this.calcedParams.animationDuration)\n                        .ease('<>')\n                        .move(x, y)\n                        .opacity(1);\n                    if (barreLength) {\n                        this.elements.layers[\"barre\" + i]\n                            .animate(this.calcedParams.animationDuration)\n                            .ease('<>')\n                            .move(x + this.calcedParams.stringSpacing / 4, y + this.calcedParams.fretSpacing / 4)\n                            .opacity(1);\n                        this.elements.barres[i].node\n                            .animate(this.calcedParams.animationDuration)\n                            .ease('<>')\n                            .attr({x1: x + barreLength})\n                    } else {\n                        this.elements.layers[\"barre\" + i]\n                            .animate(this.calcedParams.animationDuration)\n                            .ease('<>')\n                            .move(x, y + this.calcedParams.fretSpacing / 4)\n                            .opacity(0);\n                        this.elements.barres[i].node\n                            .animate(this.calcedParams.animationDuration)\n                            .ease('<>')\n                            .attr({\n                                x1: x + this.calcedParams.fretSpacing / 4,\n                                x2: x + this.calcedParams.fretSpacing / 4\n                            })\n                    }\n                } else {\n                    this.elements.layers[\"finger\" + i]\n                        .move(x, y)\n                        .opacity(1);\n                    if (barreLength) {\n                        this.elements.layers[\"barre\" + i]\n                            .move(x + this.calcedParams.stringSpacing / 4, y + this.calcedParams.fretSpacing / 4)\n                            .opacity(1);\n                        this.elements.barres[i].node.attr({x1: x + barreLength})\n                    }\n                }\n            } else {\n                const [x, y] = this.getFingerBasePosition(i)\n                if (animate) {\n                    this.elements.layers[\"finger\" + i]\n                        .animate(this.calcedParams.animationDuration)\n                        .ease('<>')\n                        .move(x, y)\n                        .opacity(0);\n                    this.elements.layers[\"barre\" + i]\n                        .animate(this.calcedParams.animationDuration)\n                        .ease('<>')\n                        .move(x + this.calcedParams.stringSpacing / 4, y + this.calcedParams.fretSpacing / 4)\n                        .opacity(0);\n                } else {\n                    this.elements.layers[\"finger\" + i]\n                        .move(x, y)\n                        .opacity(0);\n                    this.elements.layers[\"barre\" + i]\n                        .move(x + this.calcedParams.stringSpacing / 4, y + this.calcedParams.fretSpacing / 4)\n                        .opacity(0);\n                }\n            }\n        }\n\n        for (let i = 1; i <= this.params.numOfStrings; i++) {\n            if (chord.mutedStrings.includes(this.params.numOfStrings - i + 1)) {\n                if (animate) {\n                    this.elements.layers[\"mutedStringMarking\" + i]\n                        .animate(this.calcedParams.animationDuration)\n                        .ease('<>')\n                        .y(\n                            this.calcedParams.origin.y -\n                            this.calcedParams.bridgeStrokeWidth -\n                            this.calcedParams.fretSpacing * 0.53\n                        )\n                        .opacity(1);\n                } else {\n                    this.elements.layers[\"mutedStringMarking\" + i]\n                        .y(\n                            this.calcedParams.origin.y -\n                            this.calcedParams.bridgeStrokeWidth -\n                            this.calcedParams.fretSpacing * 0.53\n                        )\n                        .opacity(1);\n                }\n            } else {\n                if (animate) {\n                    this.elements.layers[\"mutedStringMarking\" + i]\n                        .animate(this.calcedParams.animationDuration)\n                        .ease('<>')\n                        .y(this.getMutedStringMarkingBaseYPosition())\n                        .opacity(0);\n                } else {\n                    this.elements.layers[\"mutedStringMarking\" + i]\n                        .y(this.getMutedStringMarkingBaseYPosition())\n                        .opacity(0);\n                }\n            }\n\n            if (chord.openStrings.includes(this.params.numOfStrings - i + 1)) {\n                if (animate) {\n                    this.elements.layers[\"openStringMarking\" + i]\n                        .animate(this.calcedParams.animationDuration)\n                        .ease('<>')\n                        .y(\n                            this.calcedParams.origin.y -\n                            this.calcedParams.bridgeStrokeWidth -\n                            this.calcedParams.fretSpacing * 0.5\n                        )\n                        .opacity(1);\n                } else {\n                    this.elements.layers[\"openStringMarking\" + i]\n                        .y(\n                            this.calcedParams.origin.y -\n                            this.calcedParams.bridgeStrokeWidth -\n                            this.calcedParams.fretSpacing * 0.5\n                        )\n                        .opacity(1);\n                }\n            } else {\n                if (animate) {\n                    this.elements.layers[\"openStringMarking\" + i]\n                        .animate(this.calcedParams.animationDuration)\n                        .ease('<>')\n                        .y(this.getOpenStringMarkingBaseYPosition())\n                        .opacity(0);\n                } else {\n                    this.elements.layers[\"openStringMarking\" + i]\n                        .y(this.getOpenStringMarkingBaseYPosition())\n                        .opacity(0);\n                }\n            }\n        }\n\n\n        this.moveOldTitle(this.currentTitle, animate);\n        this.currentTitle = this.currentTitle % 2 + 1;\n        this.drawChordTitle(chord.title, this.currentTitle, animate);\n    }\n\n    moveOldTitle(chordTitleNumber: number, animate?: boolean) {\n        if (animate) {\n            this.elements.layers[\"chordTitle\" + chordTitleNumber].animate(this.calcedParams.animationDuration).ease('<>').x(-this.calcedParams.width / 4).opacity(0);\n        } else {\n            this.elements.layers[\"chordTitle\" + chordTitleNumber].x(-this.calcedParams.width / 4).opacity(0);\n        }\n        setTimeout(() => {\n            this.elements.layers[\"chordTitle\" + chordTitleNumber].opacity(1).x(0).clear();\n        }, this.calcedParams.animationDuration)\n    }\n\n    drawChordTitle(title: string, chordTitleNumber: number, animate?: boolean) {\n        this.elements.layers[\"chordTitle\" + chordTitleNumber].opacity(1);\n        if (animate) {\n            this.elements[\"chordTitle\" + chordTitleNumber] = this.drawText(\n                this.elements.layers[\"chordTitle\" + chordTitleNumber],\n                this.params.width,\n                this.calcedParams.origin.y / 5,\n                title,\n                this.params.defaultColor,\n                {\n                    size: this.calcedParams.fontSize * 3,\n                }\n            )\n                .attr({opacity: 0})\n\n\n            this.elements[\"chordTitle\" + chordTitleNumber]\n                .animate(this.calcedParams.animationDuration)\n                .ease('<>')\n                .x(this.params.width / 2 - this.elements[\"chordTitle\" + chordTitleNumber].length() / 2)\n                .attr({opacity: 1});\n\n        } else {\n            this.elements[\"chordTitle\" + chordTitleNumber] = this.drawText(\n                this.elements.layers[\"chordTitle\" + chordTitleNumber],\n                this.params.width / 2,\n                this.calcedParams.origin.y / 5,\n                title,\n                this.params.defaultColor,\n                {\n                    size: this.calcedParams.fontSize * 3,\n                }\n            );\n        }\n    }\n}\n","import React, {ChangeEvent, useEffect, useRef, useState} from \"react\";\nimport styled from \"@emotion/styled\";\nimport TextField from \"@mui/material/TextField\";\nimport {\n    Chord,\n    ConfigurableChord,\n    constructChordStringFromConfigurableChord,\n    Finger,\n    stringToConfigurableChord\n} from \"../ChordDiagram\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport ErrorIcon from '@mui/icons-material/Error';\n\nconst ChordConfigurationWrapper = styled.div<{ selected: boolean, hasErrors: boolean, isEmptyChord: boolean }>`\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  border-radius: 20px;\n  border: ${({selected, hasErrors, isEmptyChord}) => {\n    if (hasErrors) {\n      return \"4px solid red\"\n    }\n    if (isEmptyChord) {\n      return \"4px solid orange\"\n    }\n    if (selected) {\n      return \"4px solid #1976d2\"\n    }\n    return \"2px solid gray\"\n  }};\n  margin: 20px;\n  position: relative;\n`;\n\nconst Row = styled.div<{ alignCenter?: boolean }>`\n  display: flex;\n  gap: 20px;\n  ${({alignCenter}) => alignCenter ? `align-items: center;` : null}\n`;\n\nconst Column = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nconst ErrorText = styled.div<{ type: string }>`\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  font-size: 14px;\n  color: ${({type}) => type === \"warning\" ? \"orange\" : \"red\"};;\n`;\n\nconst BaseBorderLabel = styled.div<{ selected: boolean, hasErrors: boolean, isEmptyChord: boolean, size: number, fontSize: string }>`\n  position: absolute;\n  border-radius: 50%;\n  width: ${({size}) => size}px;\n  height: ${({size}) => size}px;\n  background-color: ${({selected, hasErrors, isEmptyChord}) => {\n    if (hasErrors) {\n      return \"red\"\n    }\n    if (isEmptyChord) {\n      return \"orange\"\n    }\n    if (selected) {\n      return \"#1976d2\"\n    }\n    return \"gray\"\n  }};\n  color: ${({isEmptyChord}) => isEmptyChord ? \"black\" : \"white\"};;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: ${({fontSize}) => fontSize};\n`;\n\nconst ChordLabel = styled(BaseBorderLabel)`\n  top: -10px;\n  left: 15px;\n`;\n\nconst ShowChordButton = styled(BaseBorderLabel)`\n  top: 35px;\n  right: -15px;\n`;\n\nconst StyledTextField = styled(TextField)<{ width?: string }>`\n  flex-grow: 1;\n  ${({width}) => width ? `width: ${width};` : null}\n`;\n\nconst StyledAutoComplete = styled(Autocomplete)<{ width: string }>`\n  width: ${({width}) => width};\n`;\n\nconst StyledCheckbox = styled(Checkbox)`\n  padding: 0;\n`;\n\nconst StyledTable = styled.table`\n  width: 100%;\n  border-spacing: 0;\n\n  & tr:first-of-type {\n    td {\n      border-top: 1px gray solid;\n\n      &:first-of-type {\n        border-top-left-radius: 10px;\n      }\n\n      &:last-of-type {\n        border-top-right-radius: 10px;\n      }\n    }\n  }\n\n  & tr:last-of-type {\n    td {\n      border-bottom: 1px gray solid;\n\n      &:first-of-type {\n        border-bottom-left-radius: 10px;\n      }\n\n      &:last-of-type {\n        border-bottom-right-radius: 10px;\n      }\n    }\n  }\n\n  & td {\n    border-right: 1px gray solid;\n    border-bottom: 1px gray solid;\n    padding: 5px 8px;\n\n    &:first-of-type {\n      border-left: 1px gray solid;\n    }\n\n    &:not(:first-of-type) {\n      text-align: center;\n    }\n  }\n`;\n\ntype ChordConfigurationProps = {\n    index: number;\n    chordConfiguration: ConfigurableChord;\n    onChange: (chord: ConfigurableChord, index: number) => void;\n    removeChord: (index: number) => void;\n    isCurrentChord: boolean;\n    setAsCurrentChord: () => void;\n};\n\nconst getFingerByString = (string: number, chord: Chord): Finger | null => {\n    return (chord && chord.fingers.find(finger => {\n        return (Array.isArray(finger.string) && finger.string[0] === string) || finger.string === string;\n    })) || null;\n}\n\nfunction getIsFingerAppearsTwice(fingerIndex: number, fingers: Finger[]) {\n    let count = 0\n    fingers.forEach(finger => finger.index === fingerIndex && count++)\n    return count > 1;\n}\n\nfunction getIsBarreInvalid(stringStart: number, stringEnd: number) {\n    return stringStart < stringEnd;\n}\n\nfunction getErrors(config: ConfigurableChord) {\n    const errors: any = {};\n    if (config.isLastPositionCustom && config.selectedPosition === config.availablePositions.length && config.chords[config.selectedPosition - 1].fingers.length === 0) {\n        errors.emptyCustomChord = true;\n    }\n\n    [1, 2, 3, 4].forEach(fingerIndex => {\n        if (getIsFingerAppearsTwice(fingerIndex, config.chords[config.selectedPosition - 1].fingers)) {\n            errors.hasErrors = true\n            errors.fingerAppearsTwice = true\n        }\n        const finger = config.chords[config.selectedPosition - 1].fingers.find(finger => finger.index === fingerIndex);\n\n        if (finger && Array.isArray(finger.string)) {\n            if (getIsBarreInvalid(finger.string[0], finger.string[1])) {\n                errors.hasErrors = true\n                errors.barreInvalid = true\n            }\n        }\n\n    })\n\n    return errors;\n}\n\nconst errorTexts: any = {\n    emptyCustomChord: {\n        type: \"warning\",\n        text: \"Finger positions are empty\"\n    },\n    fingerAppearsTwice: {\n        type: \"error\",\n        text: \"Same finger appears on two strings\"\n    },\n    barreInvalid: {\n        type: \"error\",\n        text: \"Barre end position cannot be bigger than string\"\n    }\n}\n\nfunction ChordConfigurationPanel(props: ChordConfigurationProps) {\n    const [config, setConfig] = useState<ConfigurableChord>(props.chordConfiguration);\n    const wrapper = useRef<HTMLDivElement>(null);\n\n    const errors = getErrors(config);\n\n    useEffect(() => {\n        setConfig(props.chordConfiguration)\n    }, [props.chordConfiguration])\n\n    useEffect(() => {\n        if (wrapper.current && props.isCurrentChord) {\n            wrapper.current.scrollIntoView({behavior: \"smooth\", block: \"center\"});\n        }\n    }, [props.isCurrentChord])\n\n    const chord = config.chords[config.selectedPosition - 1];\n\n    const handleChordTitleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setConfig(stringToConfigurableChord(e.target.value));\n    }\n\n    const handleBlur = () => {\n        const newString = constructChordStringFromConfigurableChord(config);\n        props.onChange({...config, string: newString}, props.index);\n    };\n\n    const handleFingerValueChange = (stringIndex: number, attribute: \"index\" | \"fret\" | \"string\" | \"mutedStrings\", value: any) => {\n        const newConfig = {...config};\n        if (!newConfig.isLastPositionCustom) {\n            newConfig.chords.push(newConfig.chords[newConfig.selectedPosition - 1]);\n            newConfig.selectedPosition = newConfig.chords.length;\n            newConfig.availablePositions.push(newConfig.chords.length);\n            newConfig.isLastPositionCustom = true;\n        } else {\n            newConfig.selectedPosition = newConfig.chords.length;\n        }\n\n        if (attribute === \"mutedStrings\") {\n            newConfig.chords[newConfig.selectedPosition - 1].mutedStrings = value[0];\n            newConfig.chords[newConfig.selectedPosition - 1].openStrings = value[1];\n        } else {\n            const fingerIndex = newConfig.chords[newConfig.selectedPosition - 1].fingers.findIndex(finger => {\n                return (Array.isArray(finger.string) && finger.string[0] === stringIndex) || finger.string === stringIndex;\n            });\n\n            if (fingerIndex > -1) {\n                if (value === \"\" && attribute === \"index\") {\n                    newConfig.chords[newConfig.selectedPosition - 1].fingers.splice(fingerIndex, 1)\n                } else {\n                    let actualValue: number | [number, number] = parseInt(value);\n                    if (attribute === \"string\") {\n                        actualValue = [stringIndex, value]\n                    }\n                    newConfig.chords[newConfig.selectedPosition - 1].fingers[fingerIndex] = {\n                        ...newConfig.chords[newConfig.selectedPosition - 1].fingers[fingerIndex],\n                        [attribute]: actualValue\n                    }\n                }\n            } else {\n                newConfig.chords[newConfig.selectedPosition - 1].fingers.push({\n                    index: parseInt(value),\n                    string: stringIndex,\n                    fret: 0\n                })\n            }\n        }\n        setConfig(newConfig);\n        return newConfig;\n    };\n\n    return (\n        <ChordConfigurationWrapper\n            selected={props.isCurrentChord}\n            ref={wrapper}\n            hasErrors={errors.hasErrors}\n            isEmptyChord={errors.emptyCustomChord}\n        >\n            <ChordLabel\n                selected={props.isCurrentChord}\n                hasErrors={errors.hasErrors}\n                isEmptyChord={errors.emptyCustomChord}\n                size={20}\n                fontSize=\"0.6em\"\n            >\n                {props.index + 1}\n            </ChordLabel>\n            <ShowChordButton\n                selected={props.isCurrentChord}\n                onClick={() => props.setAsCurrentChord()}\n                hasErrors={errors.hasErrors}\n                isEmptyChord={errors.emptyCustomChord}\n                size={30}\n                fontSize=\"14px\"\n            >\n                <ArrowForwardIosIcon style={{fontSize: \"14px\"}}/>\n            </ShowChordButton>\n            <Row>\n                <StyledTextField\n                    label=\"Chord\"\n                    variant=\"standard\"\n                    value={config.title}\n                    onChange={handleChordTitleChange}\n                    onBlur={handleBlur}\n                    helperText=\"Changing this value will reset the other fields\"\n                />\n                <StyledAutoComplete\n                    width=\"110px\"\n                    disableClearable\n                    options={config.availablePositions}\n                    value={config.selectedPosition}\n                    onChange={(e, value: any) => {\n                        const newConfig = {...config, selectedPosition: value};\n                        const newString = constructChordStringFromConfigurableChord(newConfig);\n                        setConfig({...newConfig, string: newString})\n                        props.onChange({...newConfig, string: newString}, props.index)\n                    }}\n                    getOptionLabel={(option: any) => {\n                        return config.isLastPositionCustom && option === config.chords.length ? \"Custom\" : option.toString();\n                    }}\n                    renderInput={(params) => (\n                        <TextField {...params} label=\"Position\" variant=\"standard\"/>\n                    )}\n                />\n            </Row>\n            <Row alignCenter>\n                <StyledTable>\n                    <tbody>\n                    <tr>\n                        <td style={{width: \"30px\"}}>String:</td>\n                        {[6, 5, 4, 3, 2, 1].map(string => (\n                            <td key={string}>{string}</td>\n                        ))}\n                    </tr>\n                    <tr>\n                        <td>Finger:</td>\n                        <>\n                            {[6, 5, 4, 3, 2, 1].map(string => {\n                                const finger = getFingerByString(string, chord);\n                                const fingerIndex = (!isNaN(finger?.index ?? NaN) && finger?.index) || \"\";\n                                return (\n                                    <td key={string}>\n                                        <StyledTextField\n                                            onFocus={(e) => e.target.select()}\n                                            fullWidth\n                                            key={string}\n                                            width=\"80%\"\n                                            variant=\"standard\"\n                                            error={fingerIndex !== \"\" && getIsFingerAppearsTwice(fingerIndex, chord.fingers)}\n                                            inputProps={{style: {textAlign: 'center'}}}\n                                            value={fingerIndex}\n                                            onChange={(e) => handleFingerValueChange(string, \"index\", e.target.value)}\n                                            onBlur={handleBlur}\n                                        />\n                                    </td>\n                                )\n                            })}\n                        </>\n                    </tr>\n                    <tr>\n                        <td>Fret:</td>\n                        <>\n                            {[6, 5, 4, 3, 2, 1].map(string => {\n                                const finger = getFingerByString(string, chord);\n                                const fret = (!isNaN(finger?.fret ?? NaN) && finger?.fret) || \"\"\n                                return (\n                                    <td key={string}>\n                                        <StyledTextField\n                                            onFocus={(e) => e.target.select()}\n                                            fullWidth\n                                            key={string}\n                                            width=\"80%\"\n                                            variant=\"standard\"\n                                            inputProps={{style: {textAlign: 'center'}}}\n                                            disabled={!finger?.index}\n                                            value={fret}\n                                            onChange={(e) => handleFingerValueChange(string, \"fret\", e.target.value)}\n                                            onBlur={handleBlur}\n                                        />\n                                    </td>\n                                )\n                            })}\n                        </>\n                    </tr>\n                    <tr>\n                        <td>Barre:</td>\n                        <>\n                            {[6, 5, 4, 3, 2, 1].map(string => {\n                                const finger = getFingerByString(string, chord);\n                                const barre = (Array.isArray(finger?.string) && !isNaN(finger?.string[1] ?? NaN) && finger?.string[1]) || \"\"\n                                return (\n                                    <td key={string}>\n                                        <StyledTextField\n                                            onFocus={(e) => e.target.select()}\n                                            fullWidth\n                                            key={string}\n                                            width=\"80%\"\n                                            variant=\"standard\"\n                                            error={barre !== \"\" && getIsBarreInvalid(string, barre)}\n                                            inputProps={{style: {textAlign: 'center'}}}\n                                            disabled={!finger?.index}\n                                            value={barre}\n                                            onChange={(e) => handleFingerValueChange(string, \"string\", e.target.value)}\n                                            onBlur={handleBlur}\n                                        />\n                                    </td>\n                                )\n                            })}\n                        </>\n                    </tr>\n                    <tr>\n                        <td>Muted:</td>\n                        <>\n                            {[6, 5, 4, 3, 2, 1].map(string => {\n                                return (\n                                    <td key={string}>\n                                        <StyledCheckbox\n                                            checked={chord?.mutedStrings.includes(string) ?? false}\n                                            onChange={(e) => {\n                                                const newMutedStrings = [...chord.mutedStrings]\n                                                const newOpenStrings = [...chord.openStrings]\n                                                if (e.target.checked) {\n                                                    newMutedStrings.push(string)\n                                                    newOpenStrings.splice(newOpenStrings.indexOf(string), 1)\n                                                } else {\n                                                    newMutedStrings.splice(newMutedStrings.indexOf(string), 1)\n                                                    newOpenStrings.push(string)\n\n                                                }\n                                                const newConfig = handleFingerValueChange(string, \"mutedStrings\", [newMutedStrings, newOpenStrings])\n                                                const newString = constructChordStringFromConfigurableChord(newConfig);\n                                                props.onChange({...newConfig, string: newString}, props.index);\n                                            }}\n                                        />\n                                    </td>\n                                )\n                            })}\n                        </>\n                    </tr>\n                    </tbody>\n                </StyledTable>\n            </Row>\n            <Column>\n                {Object.keys(errors).map(error => {\n                    const errorInfo = errorTexts[error];\n                    return errorInfo ? (\n                        <ErrorText key={error} type={errorInfo.type}>\n                            <ErrorIcon/>\n                            {errorInfo.text}\n                        </ErrorText>\n                    ) : null\n                })}\n            </Column>\n        </ChordConfigurationWrapper>\n    );\n}\n\nexport default ChordConfigurationPanel;","import React, { useEffect, useRef, useState } from \"react\";\nimport styled from \"@emotion/styled\";\nimport ChordConfigurationPanel from \"./ChordConfigurationPanel\";\nimport TextField from \"@mui/material/TextField\";\nimport { arrayToConfigurableChords, ConfigurableChord, getEmptyChordConfiguration } from \"../ChordDiagram\";\nimport Button from \"@mui/material/Button\";\n\nconst StyledButton = styled(Button)`\n  margin: 10px 0 -5px;\n`;\n\nconst ButtonWrapper = styled.div`\n  position: sticky;\n  bottom: 0;\n  background: linear-gradient(to bottom, transparent, #eeeeee 30%);\n  padding: 30px 20px 20px;\n  display: flex;\n  justify-content: flex-end;\n`;\n\nconst InputWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 20px;\n`;\n\nconst StyledTextField = styled(TextField)`\n  background-color: rgba(25, 118, 210, 0.1);\n`;\n\ntype ConfigurationPanelProps = {\n  chordsConfigurations: ConfigurableChord[];\n  setChordsConfigurations: (chords: ConfigurableChord[]) => void;\n  currentChord: number | null;\n  setCurrentChord: (index: number) => void;\n};\n\nfunction ChordsSequence(props: ConfigurationPanelProps) {\n  const [stringValue, setStringValue] = useState<string>(\"\")\n  const textInputField = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    setStringValue(props.chordsConfigurations.map(config => config.string).join(\" \"));\n  }, [props.chordsConfigurations])\n\n  useEffect(() => {\n    if (!props.currentChord && textInputField.current) {\n      textInputField.current.scrollIntoView({behavior: \"smooth\", block: \"start\"});\n    }\n  }, [props.currentChord])\n\n  const handleChange = (chord: ConfigurableChord, index: number) => {\n    const newChords = [...props.chordsConfigurations];\n    newChords[index] = chord;\n    props.setChordsConfigurations(newChords);\n  };\n\n  const addChord = () => {\n    props.setChordsConfigurations([...props.chordsConfigurations, getEmptyChordConfiguration()]);\n  };\n\n  const removeChord = (index: number) => {\n    const newChords = [...props.chordsConfigurations];\n    newChords.splice(index, 1);\n    props.setChordsConfigurations(newChords);\n  };\n\n  const handleTextBlur = () => {\n    const chordArray = stringValue === \"\" ? [] : stringValue.replace(\"\\n\", \" \").split(\" \");\n    props.setChordsConfigurations(arrayToConfigurableChords(chordArray));\n  }\n\n  return (\n    <div>\n      <InputWrapper ref={textInputField}>\n        <StyledTextField\n          label={\"Chord Sequence Text Input\"}\n          value={stringValue}\n          onChange={(e) => setStringValue(e.target.value)}\n          onBlur={handleTextBlur}\n          multiline\n        />\n      </InputWrapper>\n      {props.chordsConfigurations.map((config, index) => (\n        <ChordConfigurationPanel\n          key={index}\n          index={index}\n          isCurrentChord={props.currentChord === index}\n          setAsCurrentChord={() => props.setCurrentChord(index)}\n          chordConfiguration={config}\n          onChange={handleChange}\n          removeChord={removeChord}\n        />\n      ))}\n      <ButtonWrapper>\n        <StyledButton onClick={addChord} variant=\"contained\">+Add Chord</StyledButton>\n      </ButtonWrapper>\n    </div>\n  );\n}\n\nexport default ChordsSequence;\n","import React from \"react\";\nimport Tabs from \"@mui/material/Tabs\";\nimport Tab from \"@mui/material/Tab\";\nimport Box from \"@mui/material/Box\";\nimport styled from \"@emotion/styled\";\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nconst StyledPanel = styled.div`\n  background-color: #eeeeee;\n  flex-grow: ${({ hidden }) => (hidden ? 0 : 1)};\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  overflow-y: auto;\n`;\n\nconst StylePanelContentWrapper = styled(Box)`\n  padding: 0;\n  width: 100%;\n`;\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index } = props;\n\n  return (\n    <StyledPanel role=\"tabpanel\" hidden={value !== index}>\n      {value === index && (\n        <StylePanelContentWrapper>{children}</StylePanelContentWrapper>\n      )}\n    </StyledPanel>\n  );\n}\n\nconst StyleTabsWrapper = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\ntype BasicTabsProps = {\n  tabs: {\n    title: string;\n    content: any;\n  }[];\n};\n\nfunction BasicTabs({ tabs }: BasicTabsProps) {\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\n    setValue(newValue);\n  };\n\n  return (\n    <StyleTabsWrapper>\n      <Box sx={{ borderBottom: 1, borderColor: \"divider\" }}>\n        <Tabs variant=\"fullWidth\" value={value} onChange={handleChange}>\n          {tabs.map((tab, index) => (\n            <Tab label={tab.title} key={index} />\n          ))}\n        </Tabs>\n      </Box>\n      {tabs.map((tab, index) => (\n        <TabPanel value={value} index={index} key={index}>\n          {tab.content}\n        </TabPanel>\n      ))}\n    </StyleTabsWrapper>\n  );\n}\n\nexport default BasicTabs;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport DiagramConfiguration from \"./DiagramConfiguration\";\nimport ChordsSequence from \"./ChordsSequence\";\nimport BasicTabs from \"./layout/BasicTabs\";\nimport {ChordDiagramParams, ConfigurableChord} from \"../ChordDiagram\";\n\nconst Wrapper = styled.div`\n  height: 100%;\n  width: 30vw;\n`;\n\ntype ConfigurationPanelProps = {\n    chords: ConfigurableChord[];\n    setChords: (chords: ConfigurableChord[]) => void;\n    diagramConfiguration: ChordDiagramParams;\n    setDiagramConfiguration: (configuration: ChordDiagramParams) => void;\n    currentChord: number | null;\n    setCurrentChord: (index: number) => void;\n};\n\nfunction ConfigurationPanel(props: ConfigurationPanelProps) {\n    return (\n        <Wrapper>\n            <BasicTabs\n                tabs={[\n                    {\n                        title: \"Chords Sequencer\",\n                        content: (\n                            <ChordsSequence\n                                chordsConfigurations={props.chords}\n                                setChordsConfigurations={props.setChords}\n                                currentChord={props.currentChord}\n                                setCurrentChord={props.setCurrentChord}\n                            />\n                        ),\n                    },\n                    {\n                        title: \"Diagram Configuration\",\n                        content: (\n                            <DiagramConfiguration\n                                diagramConfiguration={props.diagramConfiguration}\n                                setDiagramConfiguration={props.setDiagramConfiguration}\n                            />\n                        ),\n                    }\n                ]}\n            />\n        </Wrapper>\n    );\n}\n\nexport default ConfigurationPanel;\n","import React, {useEffect, useRef, useState} from \"react\";\nimport styled from \"@emotion/styled\";\nimport {Chord, ChordDiagram, ChordDiagramParams} from \"../ChordDiagram\";\nimport Button from \"@mui/material/Button\";\n\nconst MainChordWrapper = styled.div`\n  height: 100%;\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n`;\n\nconst BottomContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  position: absolute;\n  bottom: 0;\n  padding: 20px;\n  gap: 10px;\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n`;\n\nconst ChordIndex = styled.div`\n  text-align: center;\n  color: #1976d2;\n\n  & span {\n    font-weight: 500;\n  }\n`\n\nconst ChordDiagramWrapper = styled.div<{ debugMode: boolean | undefined }>`\n  ${({debugMode}) => (debugMode ? \"border: 1px solid red;\" : null)}\n`;\n\ntype MainChordProps = {\n    diagramConfiguration: ChordDiagramParams;\n    chords: Chord[];\n    setCurrentChord: (index: number | null) => void;\n};\n\nfunction MainChord({diagramConfiguration, chords, setCurrentChord}: MainChordProps) {\n    const diagramWrapper = useRef<HTMLDivElement>(null);\n    const chordDiagram = useRef<ChordDiagram | null>(null);\n    const [playButtonText, setPlayButtonText] = useState<string>(\"Play\");\n\n    useEffect(() => {\n        if (diagramWrapper.current) {\n            diagramWrapper.current.innerHTML = \"\";\n            chordDiagram.current = new ChordDiagram(\n                \"#main-chord-diagram-wrapper\",\n                diagramConfiguration\n            );\n        }\n\n        if (chordDiagram.current) {\n            chordDiagram.current.drawBaseDiagram();\n        }\n    }, [diagramConfiguration]);\n\n    useEffect(() => {\n        // const chord = (currentChord || currentChord === 0) && chords[currentChord];\n        // if (chordDiagram.current !== null) {\n        //     if (chord) {\n        //         chordDiagram.current.drawChord(chord, true);\n        //     } else {\n        //         chordDiagram.current.drawChord(getEmptyChordObject(), true);\n        //     }\n        // }\n        if (chordDiagram.current !== null) {\n            if (chordDiagram.current && chordDiagram.current.getCurrentChord() && chordDiagram.current.getCurrentChord()! > chords.length) {\n                chordDiagram.current.moveToChordInSequence(null, true);\n            }\n            chordDiagram.current.setChords(chords);\n        }\n    }, [chords]);\n\n    const handleMoveChord = (direction: number) => {\n        if (chordDiagram.current !== null) {\n            direction === 1 ?\n                setCurrentChord(chordDiagram.current.moveToNextChord(true)) :\n                setCurrentChord(chordDiagram.current.moveToPreviousChord(true));\n        }\n    };\n\n    const handlePlay = (isPlaying: boolean) => {\n        if (chordDiagram.current !== null) {\n            if (isPlaying) {\n                chordDiagram.current.stopSequence(true, setCurrentChord);\n                setPlayButtonText(\"Play\")\n            } else {\n                chordDiagram.current.playSequence(null, true, setCurrentChord, () => setPlayButtonText(\"Play\"))\n                setPlayButtonText(\"Stop\")\n\n            }\n        }\n    }\n\n    return (\n        <MainChordWrapper>\n            <ChordDiagramWrapper\n                id={\"main-chord-diagram-wrapper\"}\n                ref={diagramWrapper}\n                debugMode={diagramConfiguration.debugMode}\n            />\n            <BottomContainer>\n                <ButtonContainer>\n                    <Button onClick={() => handleMoveChord(-1)} variant=\"contained\" disabled={chordDiagram.current?.isPlaying}>\n                        &lt;-- Previous Chord\n                    </Button>\n                    <Button onClick={() => handlePlay(chordDiagram.current?.isPlaying ?? false)} variant=\"contained\">\n                        {playButtonText}\n                    </Button>\n                    <Button onClick={() => handleMoveChord(1)} variant=\"contained\" disabled={chordDiagram.current?.isPlaying}>Next Chord --&gt;</Button>\n                </ButtonContainer>\n                <ChordIndex>\n                    {\"Current chord: \"}\n                    <span>\n                        {chordDiagram.current?.getCurrentChord() || chordDiagram.current?.getCurrentChord() === 0 ?\n                            chordDiagram.current?.getCurrentChord()! + 1 :\n                            \"Empty\"\n                        }\n                    </span>\n                </ChordIndex>\n            </BottomContainer>\n\n        </MainChordWrapper>\n    );\n}\n\nexport default MainChord;\n","import React, {useState} from \"react\";\nimport styled from \"@emotion/styled\";\nimport ConfigurationPanel from \"./components/ConfigurationPanel\";\nimport MainChord from \"./components/MainChord\";\nimport {defaultParams, ChordDiagramParams, arrayToConfigurableChords, ConfigurableChord} from \"./ChordDiagram\";\n// import { parseChords } from \"./parser/parseChords\";\n// import camelCase from \"camelcase\";\n\n\nconst Main = styled.div`\n  display: flex;\n  height: 100vh;\n  width: 100vw;\n  overflow: hidden;\n`;\n\nfunction App() {\n    const [diagramConfiguration, setDiagramConfiguration] =\n        useState<ChordDiagramParams>({...defaultParams, debugMode: false});\n    const [chords, setChords] = useState<ConfigurableChord[]>(arrayToConfigurableChords([\"C\", \"Cmaj7\", \"C7\", \"F\", \"F/E\", \"D\", \"G\", \"Amin\", \"A-maj7\", \"Am7\", \"Am6\", \"F\", \"Eb\", \"G\", \"C\"]));\n    const [currentChord, setCurrentChord] = useState<number | null>(null);\n    // try {\n    //   // TODO - use this\n    //   const chordsFromText = parseChords(\"|\" + chords.join(\" \") + \"|\");\n    //   chordsFromText.map((c: string) => camelCase(c, { pascalCase: true }));\n    // } catch (error: any) {\n    //   console.error(`can't parse chords`);\n    // }\n\n\n    return (\n        <Main>\n            <ConfigurationPanel\n                chords={chords}\n                setChords={setChords}\n                diagramConfiguration={diagramConfiguration}\n                setDiagramConfiguration={setDiagramConfiguration}\n                currentChord={currentChord}\n                setCurrentChord={setCurrentChord}\n            />\n            <MainChord\n                diagramConfiguration={diagramConfiguration}\n                chords={chords.map(chord => chord.chords[chord.selectedPosition - 1])}\n                setCurrentChord={setCurrentChord}\n            />\n        </Main>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"@fontsource/roboto/300.css\";\nimport \"@fontsource/roboto/400.css\";\nimport \"@fontsource/roboto/500.css\";\nimport \"@fontsource/roboto/700.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}