{"version":3,"sources":["components/DiagramConfiguration.tsx","components/ChordConfiguration.tsx","components/ChordsSequence.tsx","components/layout/BasicTabs.tsx","components/ConfigurationPanel.tsx","ChordDiagram/ChordDiagram.ts","ChordDiagram/StringToChord.ts","components/MainChord.tsx","parser/parseChords.ts","parser/tokenizer.ts","parser/parser.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Wraper","styled","div","Row","DiagramConfiguration","diagramConfiguration","setDiagramConfiguration","handleNumberChange","value","param","handleBooleanChange","handleStringChange","TextField","label","variant","defaultValue","width","onBlur","e","parseInt","target","height","numOfStrings","numOfFrets","stringWidth","fretsWidth","animationDuration","forcePosition","FormControlLabel","control","Switch","checked","showFretsLabels","onChange","showBridgeLabel","showFingerLabels","showOpenStringsLabels","showTuning","tuning","split","defaultColor","bridgeColor","stringColor","fretColor","textColor","labelColor","backgroundColor","fontFamily","fontSize","fontStyle","fontWeight","ChordConfigurationWrapper","ChordConfiguration","props","useState","chord","setValue","index","StyledButton","button","ButtonWrapper","InputWrapper","StyledTextField","ChordsSequence","handleChange","newChords","chords","setChords","removeChord","splice","join","map","onClick","StyledPanel","hidden","StylePanelContentWrapper","Box","TabPanel","children","role","StyleTabsWrapper","BasicTabs","tabs","React","sx","borderBottom","borderColor","Tabs","event","newValue","tab","Tab","title","content","Wrapper","ConfigurationPanel","defaultParams","fingersLabelColor","ChordDiagram","selector","params","draw","elements","calcedParams","currentTitle","this","SVG","addTo","size","stringSpacing","fretSpacing","origin","x","y","bridgeStrokeWidth","Math","ceil","maxFontSize","max","layer","msg","color","attrs","textAttrs","family","style","weight","opacity","text","stroke","fill","font","move","length","fromX","fromY","toX","toY","line","circle","console","log","table","strings","frets","layers","points","forEach","point","drawPointAt","baseDiagram","group","attr","id","background","fretsCover","bridge","bridgeCover","fretLabels","fretLabelsCover","stringsLabels","barres","fingers","stringMarkings","chordTitle1","chordTitle2","coverTopGradient","gradient","add","stop","rotate","coverBottomGradient","diagramWidth","topDiagramCoverXPosition","labelCoverWidth","topLabelCoverHeight","node","rect","bridgeFromX","bridgeFromY","bridgeHeight","fretLabelXPosition","drawText","bridgeCoverHeight","i","drawLine","toString","fretsCoverTopHeight","fretsCoverTop","fretsCoverBottomHeight","fretsCoverBottomYPosition","fretsCoverBottom","fretsLabelCoverTop","fretsLabelCoverBottom","fretsLabelCoverSide","getFingerBasePosition","fingerBasePositionX","fingerBasePositionY","barreLayerName","fingersColor","linecap","fingerLayerName","drawCircle","openStringMarkins","mutedStringMarkings","openStringMarkingLayerName","getOpenStringMarkingBaseYPosition","mutedStringMarkingLayerName","getMutedStringMarkingBaseYPosition","stringMarkingCover","moveDiagramToFret","debugMode","printParams","fingerIndex","chordPosition","finger","barreLength","string","fret","actualString","Array","isArray","fretsToAdd","finalAdd","undefined","isNaN","moveToX","moveToY","fretNumber","animate","maxStartFret","topFretLine","error","bridgeTopY","labelsTopY","position","find","getFingerChordPosition","x1","x2","mutedStrings","includes","openStrings","moveOldTitle","drawChordTitle","chordTitleNumber","setTimeout","clear","sortFingers","fingerA","fingerB","fingerAString","fingerBString","MainChordWrapper","ButtonContainer","ChordDiagramWrapper","MainChord","diagramWrapper","useRef","chordDiagram","currentChord","setCurrentChord","useEffect","current","innerHTML","drawBaseDiagram","chordModel","chordFingerings","findGuitarChord","fingerings","positions","barre","currentBarre","currentBarreFret","reverse","stringIndex","stringIndices","push","indexOf","filteredFingers","filter","sort","min","stringToChord","drawChord","handleMoveChord","direction","ref","Button","parseChords","input","tokens","char","test","type","CHORD","TypeError","tokenizer","ast","walk","token","body","parser","flatMap","Main","App","c","camelCase","pascalCase","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a6a8961.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Switch from \"@mui/material/Switch\";\nimport TextField from \"@mui/material/TextField\";\nimport React from \"react\";\nimport { ChordDiagramParams } from \"../ChordDiagram\";\n\nconst Wraper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n  padding: 30px;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  gap: 15px;\n`;\n\ntype ConfigurationPanelProps = {\n  diagramConfiguration: ChordDiagramParams;\n  setDiagramConfiguration: (configuration: ChordDiagramParams) => void;\n};\n\nfunction DiagramConfiguration({\n  diagramConfiguration,\n  setDiagramConfiguration,\n}: ConfigurationPanelProps) {\n  const handleNumberChange = (\n    value: number,\n    param: keyof ChordDiagramParams\n  ) => {\n    setDiagramConfiguration({\n      ...diagramConfiguration,\n      [param]: value,\n    });\n  };\n\n  const handleBooleanChange = (\n    value: boolean,\n    param: keyof ChordDiagramParams\n  ) => {\n    setDiagramConfiguration({\n      ...diagramConfiguration,\n      [param]: value,\n    });\n  };\n\n  const handleArrayChange = (\n    value: string,\n    param: keyof ChordDiagramParams\n  ) => {\n    setDiagramConfiguration({\n      ...diagramConfiguration,\n      [param]: value.split(\",\"),\n    });\n  };\n\n  const handleStringChange = (\n    value: string,\n    param: keyof ChordDiagramParams\n  ) => {\n    setDiagramConfiguration({\n      ...diagramConfiguration,\n      [param]: value,\n    });\n  };\n\n  return (\n    <Wraper>\n      <Row>\n        <TextField\n          label=\"Width\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.width}\n          onBlur={(e) => handleNumberChange(parseInt(e.target.value), \"width\")}\n        />\n        <TextField\n          label=\"Height\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.height}\n          onBlur={(e) => handleNumberChange(parseInt(e.target.value), \"height\")}\n        />\n      </Row>\n      <Row>\n        <TextField\n          label=\"# of Strings\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.numOfStrings}\n          onBlur={(e) =>\n            handleNumberChange(parseInt(e.target.value), \"numOfStrings\")\n          }\n        />\n        <TextField\n          label=\"# of Frets\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.numOfFrets}\n          onBlur={(e) =>\n            handleNumberChange(parseInt(e.target.value), \"numOfFrets\")\n          }\n        />\n      </Row>\n      <Row>\n        <TextField\n          label=\"String Width\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.stringWidth}\n          onBlur={(e) =>\n            handleNumberChange(parseInt(e.target.value), \"stringWidth\")\n          }\n        />\n        <TextField\n          label=\"Frets Width\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.fretsWidth}\n          onBlur={(e) =>\n            handleNumberChange(parseInt(e.target.value), \"fretsWidth\")\n          }\n        />\n      </Row>\n      <Row>\n        <TextField\n          label=\"Animation Duration\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.animationDuration}\n          onBlur={(e) =>\n            handleNumberChange(parseInt(e.target.value), \"animationDuration\")\n          }\n        />\n        <TextField\n          label=\"Force Start Position\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.forcePosition}\n          onBlur={(e) =>\n            handleNumberChange(parseInt(e.target.value), \"forcePosition\")\n          }\n        />\n      </Row>\n      <Row>\n        <FormControlLabel\n          control={\n            <Switch\n              checked={diagramConfiguration.showFretsLabels}\n              onChange={(e) =>\n                handleBooleanChange(e.target.checked, \"showFretsLabels\")\n              }\n            />\n          }\n          label=\"Show Fret Labels\"\n        />\n        <FormControlLabel\n          control={\n            <Switch\n              checked={diagramConfiguration.showBridgeLabel}\n              onChange={(e) =>\n                handleBooleanChange(e.target.checked, \"showBridgeLabel\")\n              }\n            />\n          }\n          label=\"Show Bridge Labels\"\n        />\n      </Row>\n      <Row>\n        <FormControlLabel\n          control={\n            <Switch\n              checked={diagramConfiguration.showFingerLabels}\n              onChange={(e) =>\n                handleBooleanChange(e.target.checked, \"showFingerLabels\")\n              }\n            />\n          }\n          label=\"Show Finger Label\"\n        />\n        <FormControlLabel\n          control={\n            <Switch\n              checked={diagramConfiguration.showOpenStringsLabels}\n              onChange={(e) =>\n                handleBooleanChange(e.target.checked, \"showOpenStringsLabels\")\n              }\n            />\n          }\n          label=\"Show Open Strings Labels\"\n        />\n      </Row>\n      <Row>\n        <FormControlLabel\n          control={\n            <Switch\n              checked={diagramConfiguration.showTuning}\n              onChange={(e) =>\n                handleBooleanChange(e.target.checked, \"showTuning\")\n              }\n            />\n          }\n          label=\"Show Tuning\"\n        />\n        <TextField\n          label=\"Tuning\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.tuning}\n          onBlur={(e) => handleArrayChange(e.target.value, \"tuning\")}\n        />\n      </Row>\n      <Row>\n        <TextField\n          label=\"Default Color\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.defaultColor}\n          onBlur={(e) => handleStringChange(e.target.value, \"defaultColor\")}\n        />\n        <TextField\n          label=\"Bridge Color\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.bridgeColor}\n          onBlur={(e) => handleStringChange(e.target.value, \"bridgeColor\")}\n        />\n      </Row>\n      <Row>\n        <TextField\n          label=\"String Color\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.stringColor}\n          onBlur={(e) => handleStringChange(e.target.value, \"stringColor\")}\n        />\n        <TextField\n          label=\"Fret Color\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.fretColor}\n          onBlur={(e) => handleStringChange(e.target.value, \"fretColor\")}\n        />\n      </Row>\n      <Row>\n        <TextField\n          label=\"Text Color\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.textColor}\n          onBlur={(e) => handleStringChange(e.target.value, \"textColor\")}\n        />\n        <TextField\n          label=\"Label Color\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.labelColor}\n          onBlur={(e) => handleStringChange(e.target.value, \"labelColor\")}\n        />\n      </Row>\n      <Row>\n        <TextField\n          label=\"Background Color\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.backgroundColor}\n          onBlur={(e) => handleStringChange(e.target.value, \"backgroundColor\")}\n        />\n      </Row>\n      <Row>\n        <TextField\n          label=\"Font Family\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.fontFamily}\n          onBlur={(e) => handleStringChange(e.target.value, \"fontFamily\")}\n        />\n        <TextField\n          label=\"Font Size\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.fontSize}\n          onBlur={(e) =>\n            handleNumberChange(parseInt(e.target.value), \"fontSize\")\n          }\n        />\n      </Row>\n      <Row>\n        <TextField\n          label=\"Font Style\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.fontStyle}\n          onBlur={(e) => handleStringChange(e.target.value, \"fontStyle\")}\n        />\n        <TextField\n          label=\"Font Weight\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.fontWeight}\n          onBlur={(e) =>\n            handleNumberChange(parseInt(e.target.value), \"fontWeight\")\n          }\n        />\n      </Row>\n    </Wraper>\n  );\n}\n\nexport default DiagramConfiguration;\n","import React, { useState } from \"react\";\nimport styled from \"@emotion/styled\";\nimport TextField from \"@mui/material/TextField\";\n\nconst ChordConfigurationWrapper = styled.div`\n  padding: 20px;\n  display: flex;\n  gap: 20px;\n  align-items: center;\n  justify-content: space-between;\n`;\n\ntype ChordConfigurationProps = {\n  index: number;\n  chord: string;\n  onChange: (chord: string, index: number) => void;\n  removeChord: (index: number) => void;\n};\n\nfunction ChordConfiguration(props: ChordConfigurationProps) {\n  const [value, setValue] = useState<string>(props.chord);\n  \n\n  return (\n    <ChordConfigurationWrapper>\n      <TextField\n          label={`Chord ${props.index + 1}`}\n          variant=\"standard\"\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n          onBlur={() => props.onChange(value, props.index)}\n        />\n      {/* <ChordDiagramWrapper\n        id={`chord-diagram-wrapper-${props.index}`}\n        ref={diagramWrapper}\n        debugMode={true}\n      /> */}\n    </ChordConfigurationWrapper>\n  );\n}\n\nexport default ChordConfiguration;\n\n// const StyledSelectWrapper = styled.div`\n//   display: flex;\n//   flex-direction: column;\n// `;\n\n// const StyledSelect = styled.select<{ width: number }>`\n//   width: ${({ width }) => width}px;\n//   padding: 5px;\n// `;\n\n// const StyledButton = styled.button`\n//   background-color: #ffffff;\n//   padding: 2px 7px;\n// `;\n\n// const ChordDiagramWrapper = styled.div<{ debugMode: boolean | undefined }>`\n//   min-width: 100px;\n//   min-height: 120px;\n//   ${({ debugMode }) => (debugMode ? \"border: 1px solid red;\" : null)}\n// `;\n\n// const options = {\n//   // Customizations (all optional, defaults shown)\n//   width: 100, // canvas width\n//   height: 120, // canvas height\n//   circleRadius: 5, // circle radius (width / 20 by default)\n\n//   numStrings: 6, // number of strings (e.g., 4 for bass)\n//   numFrets: 5, // number of frets (e.g., 7 for stretch chords)\n//   showTuning: false, // show tuning keys\n\n//   defaultColor: \"#666\", // default color\n//   // bgColor: '#FFF', // background color\n//   // strokeColor: '#666', // stroke color (overrides defaultColor)\n//   // textColor: '#666', // text color (overrides defaultColor)\n//   // stringColor: '#666', // string color (overrides defaultColor)\n//   // fretColor: '#666', // fret color (overrides defaultColor)\n//   // labelColor: '#666', // label color (overrides defaultColor)\n\n//   fretWidth: 1, // fret width\n//   stringWidth: 1, // string width\n// };\n\n\n// const diagramWrapper = useRef<any>(null);\n\n  // useEffect(() => {\n  //   if (props.note && props.type) {\n  //     diagramWrapper.current.innerHTML = \"\";\n  //     diagramWrapper.current &&\n  //       new ChordBox(`#chord-diagram-wrapper-${props.index}`, options).draw({\n  //         // array of [string, fret, label (optional)]\n  //         chord: Chords[props.note][props.type].chord,\n\n  //         // optional: position marker\n  //         position: Chords[props.note][props.type].position || 0,\n\n  //         // optional: barres for barre chords\n  //         barres: Chords[props.note][props.type].barres || [],\n  //       });\n  //   }\n  // }, [props.note, props.type, props.index]);\n\n  // const handleNoteChange = (e: ChangeEvent<HTMLSelectElement>) => {\n  //   const note = e.target.value;\n  //   let type = props.type;\n  //   if (type && !Chords[props.note][props.type]) {\n  //     type = Object.keys(Chords[props.note])[0];\n  //   }\n  //   props.onChange({ note, type }, props.index);\n  // };\n\n  // const handleTypeChange = (e: ChangeEvent<HTMLSelectElement>) => {\n  //   props.onChange({ note: props.note, type: e.target.value }, props.index);\n  // };\n\n/* <StyledButton onClick={() => props.removeChord(props.index)}>\n        -\n      </StyledButton>\n      {props.index + 1}.\n      <StyledSelectWrapper>\n        Note:\n        <StyledSelect value={props.note || \"\"} width={50} onChange={handleNoteChange}>\n          <option value={\"\"} key={\"null\"}>\n            --\n          </option>\n          {Object.keys(Chords).map((note) => (\n            <option value={note} key={note}>\n              {note}\n            </option>\n          ))}\n        </StyledSelect>\n      </StyledSelectWrapper>\n      <StyledSelectWrapper>\n        Type:\n        <StyledSelect value={props.type || \"\"} width={80} onChange={handleTypeChange}>\n          <option value={\"\"} key={\"null\"}>\n            --\n          </option>\n          {Chords[props.note] &&\n            Object.keys(Chords[props.note]).map((type) => (\n              <option value={type} key={type}>\n                {type}\n              </option>\n            ))}\n        </StyledSelect>\n      </StyledSelectWrapper> */\n","import React, { ChangeEvent } from \"react\";\nimport styled from \"@emotion/styled\";\nimport ChordConfiguration from \"./ChordConfiguration\";\nimport TextField from \"@mui/material/TextField\";\n\nconst StyledButton = styled.button`\n  padding: 5px;\n  align-self: flex-end;\n  background-color: #ffffff;\n`;\n\nconst ButtonWrapper = styled.div`\n  position: sticky;\n  bottom: 0;\n  background: linear-gradient(to bottom, transparent, #eeeeee 30%);\n  padding: 30px 20px 20px;\n  display: flex;\n  justify-content: flex-end;\n`;\n\nconst InputWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 20px;\n`;\n\nconst StyledTextField = styled(TextField)`\n  background-color: rgba(25, 118, 210, 0.1);\n`;\n\ntype ConfigurationPanelProps = {\n  chords: string[];\n  setChords: (chords: string[]) => void;\n};\n\nfunction ChordsSequence(props: ConfigurationPanelProps) {\n  const handleChange = (chord: string, index: number) => {\n    const newChords = [...props.chords];\n    newChords[index] = chord;\n    props.setChords(newChords);\n  };\n\n  const addChord = () => {\n    props.setChords([...props.chords, \"\"]);\n  };\n\n  const removeChord = (index: number) => {\n    const newChords = [...props.chords];\n    newChords.splice(index, 1);\n    props.setChords(newChords);\n  };\n\n  const handleTextChange = (e: ChangeEvent<HTMLInputElement>) => {\n    props.setChords(e.target.value === \"\" ? [\"\"] : e.target.value.split(\" \"));\n}\n\n  return (\n    <>\n      <InputWrapper>\n        <StyledTextField\n          label={\"Chord Sequence Text Input\"}\n          value={props.chords.join(\" \")}\n          onChange={handleTextChange}\n        />\n      </InputWrapper>\n      {props.chords.map((chord, index) => (\n        <ChordConfiguration\n          key={`${index}_${chord}`}\n          index={index}\n          chord={chord}\n          onChange={handleChange}\n          removeChord={removeChord}\n        />\n      ))}\n      <ButtonWrapper>\n        <StyledButton onClick={addChord}>+Add Chord</StyledButton>\n      </ButtonWrapper>\n    </>\n  );\n}\n\nexport default ChordsSequence;\n","import React from \"react\";\nimport Tabs from \"@mui/material/Tabs\";\nimport Tab from \"@mui/material/Tab\";\nimport Box from \"@mui/material/Box\";\nimport styled from \"@emotion/styled\";\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nconst StyledPanel = styled.div`\n  background-color: #eeeeee;\n  flex-grow: ${({ hidden }) => (hidden ? 0 : 1)};\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  overflow-y: auto;\n`;\n\nconst StylePanelContentWrapper = styled(Box)`\n  padding: 0;\n  width: 100%;\n`;\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index } = props;\n\n  return (\n    <StyledPanel role=\"tabpanel\" hidden={value !== index}>\n      {value === index && (\n        <StylePanelContentWrapper>{children}</StylePanelContentWrapper>\n      )}\n    </StyledPanel>\n  );\n}\n\nconst StyleTabsWrapper = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\ntype BasicTabsProps = {\n  tabs: {\n    title: string;\n    content: any;\n  }[];\n};\n\nfunction BasicTabs({ tabs }: BasicTabsProps) {\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\n    setValue(newValue);\n  };\n\n  return (\n    <StyleTabsWrapper>\n      <Box sx={{ borderBottom: 1, borderColor: \"divider\" }}>\n        <Tabs variant=\"fullWidth\" value={value} onChange={handleChange}>\n          {tabs.map((tab, index) => (\n            <Tab label={tab.title} key={index} />\n          ))}\n        </Tabs>\n      </Box>\n      {tabs.map((tab, index) => (\n        <TabPanel value={value} index={index} key={index}>\n          {tab.content}\n        </TabPanel>\n      ))}\n    </StyleTabsWrapper>\n  );\n}\n\nexport default BasicTabs;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport DiagramConfiguration from \"./DiagramConfiguration\";\nimport ChordsSequence from \"./ChordsSequence\";\nimport BasicTabs from \"./layout/BasicTabs\";\nimport { ChordDiagramParams } from \"../ChordDiagram\";\n\nconst Wrapper = styled.div`\n  height: 100%;\n  width: 30vw;\n`;\n\ntype ConfigurationPanelProps = {\n  chords: string[];\n  setChords: (chords: string[]) => void;\n  diagramConfiguration: ChordDiagramParams;\n  setDiagramConfiguration: (configuration: ChordDiagramParams) => void;\n};\n\nfunction ConfigurationPanel(props: ConfigurationPanelProps) {\n  return (\n    <Wrapper>\n      <BasicTabs\n        tabs={[\n          {\n            title: \"Diagram Configuration\",\n            content: (\n              <DiagramConfiguration\n                diagramConfiguration={props.diagramConfiguration}\n                setDiagramConfiguration={props.setDiagramConfiguration}\n              />\n            ),\n          },\n          {\n            title: \"Chords Sequencer\",\n            content: (\n              <ChordsSequence\n                chords={props.chords}\n                setChords={props.setChords}\n              />\n            ),\n          }\n        ]}\n      />\n    </Wrapper>\n  );\n}\n\nexport default ConfigurationPanel;\n","import { SVG, Svg, G, Gradient } from \"@svgdotjs/svg.js\";\nimport { Chord, Finger } from \"../utils/Chords2\";\n\nexport type ChordDiagramParams = {\n  width: number;\n  height: number;\n  numOfStrings: number;\n  numOfFrets: number;\n  stringWidth: number;\n  fretsWidth: number;\n  showFretsLabels: boolean;\n  showBridgeLabel: boolean;\n  showFingerLabels: boolean;\n  showOpenStringsLabels: boolean;\n  showTuning: boolean;\n  tuning: string[];\n  defaultColor: string;\n  bridgeColor?: string;\n  stringColor?: string;\n  fretColor?: string;\n  textColor?: string;\n  labelColor?: string;\n  fingersColor?: string;\n  fingersLabelColor?: string;\n  backgroundColor: string;\n  fontFamily?: string;\n  fontSize?: number;\n  fontStyle?: string;\n  fontWeight?: string;\n  debugMode?: boolean;\n  animationDuration?: number;\n  forcePosition?: number\n};\n\nexport const defaultParams: ChordDiagramParams = {\n  width: 500,\n  height: 600,\n  numOfStrings: 6,\n  numOfFrets: 5,\n  stringWidth: 1,\n  fretsWidth: 1,\n  showTuning: true,\n  showFretsLabels: false,\n  showBridgeLabel: false,\n  showFingerLabels: true,\n  showOpenStringsLabels: false,\n  tuning: [\"E\", \"A\", \"D\", \"G\", \"B\", \"E\"],\n  defaultColor: \"#666666\",\n  fingersLabelColor: \"#ffffff\",\n  backgroundColor: \"#ffffff\",\n  animationDuration: 500,\n  forcePosition: 0\n};\n\ntype TextAttributes = {\n  family: ChordDiagramParams[\"fontFamily\"];\n  size: ChordDiagramParams[\"fontSize\"];\n  style: ChordDiagramParams[\"fontStyle\"];\n  weight: ChordDiagramParams[\"fontWeight\"];\n  \"text-anchor\": string;\n  opacity: number;\n};\n\nexport class ChordDiagram {\n  private draw: Svg;\n  private params: ChordDiagramParams = defaultParams;\n  private elements: any = {};\n  private calcedParams: any = {};\n  private currentTitle: number = 1;\n\n  constructor(selector: string, params: Partial<ChordDiagramParams> = {}) {\n    this.params = {\n      ...this.params,\n      ...params,\n    };\n    this.draw = SVG()\n      .addTo(selector)\n      .size(this.params.width, this.params.height);\n\n    this.calcedParams.width = this.params.width * 0.75;\n    this.calcedParams.height = this.params.height * 0.75;\n    this.calcedParams.stringSpacing =\n      this.calcedParams.width / this.params.numOfStrings;\n    this.calcedParams.fretSpacing =\n      this.calcedParams.height / (this.params.numOfFrets + 2);\n    this.calcedParams.origin = {\n      x: this.params.width * 0.15 + this.calcedParams.stringSpacing / 2,\n      y: this.params.height * 0.15 + this.calcedParams.fretSpacing,\n    };\n    this.calcedParams.bridgeStrokeWidth = Math.ceil(\n      this.calcedParams.height / 36\n    );\n    this.calcedParams.animationDuration = this.params.animationDuration || 500;\n\n    const fontSize =\n      this.params.fontSize || Math.ceil(this.calcedParams.width / 20);\n    const maxFontSize = Math.max(\n      this.calcedParams.stringSpacing / 2,\n      this.calcedParams.fretSpacing / 2\n    );\n    this.calcedParams.fontSize =\n      fontSize > maxFontSize ? maxFontSize : fontSize;\n  }\n\n  drawText(\n    layer: Svg | G,\n    x: number,\n    y: number,\n    msg: string,\n    color: string | undefined,\n    attrs: Partial<TextAttributes> = {}\n  ) {\n    const textAttrs: any = {\n      family:\n        this.params.fontFamily ||\n        '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n      size: this.calcedParams.fontSize,\n      style: this.params.fontStyle,\n      weight: this.params.fontWeight || \"100\",\n      opacity: 1,\n      ...attrs,\n    };\n\n    const text = layer\n      .text(msg)\n      .stroke(color || this.params.defaultColor)\n      .fill(color || this.params.defaultColor)\n      .font(textAttrs);\n\n    return text.move(x - text.length() / 2, y);\n  }\n\n  drawLine(\n    layer: Svg | G,\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number\n  ) {\n    return layer.line(0, 0, toX - fromX, toY - fromY).move(fromX, fromY);\n  }\n\n  drawCircle(layer: Svg | G, size: number, x: number, y: number) {\n    return layer.circle(size).move(x, y);\n  }\n\n  drawPointAt(x: number, y: number) {\n    this.draw\n      .circle(4, 4)\n      .fill(\"red\")\n      .move(x - 2, y - 2);\n  }\n\n  private printParams() {\n    console.log(\"Calced Params:\");\n    console.table(this.calcedParams);\n    const { strings, frets, layers, ...elements } = this.elements;\n    console.log(\"Strings:\");\n    console.table(strings);\n    console.log(\"Frets:\");\n    console.table(frets);\n    console.log(\"Layers:\");\n    console.table(layers);\n    console.log(\"Other Elements:\");\n    console.table(elements);\n  }\n\n  private debug(points: number[][]) {\n    points.forEach((point, index) => {\n      console.log(`debug point ${index + 1}: ${point[0]}, ${point[1]}`);\n      this.drawPointAt(point[0], point[1]);\n    });\n  }\n\n  drawBaseDiagram() {\n    const baseDiagram = this.draw.group().attr({ id: \"baseDiagram\" });\n\n    //order is important!!\n    this.elements.layers = {\n      baseDiagram: baseDiagram,\n      background: baseDiagram.group().attr({ id: \"background\" }),\n      strings: baseDiagram.group().attr({ id: \"strings\" }),\n      frets: baseDiagram.group().attr({ id: \"frets\" }),\n      fretsCover: baseDiagram.group().attr({ id: \"fretsCover\" }),\n      bridge: baseDiagram.group().attr({ id: \"bridge\" }),\n      bridgeCover: baseDiagram.group().attr({ id: \"bridgeCover\" }),\n      fretLabels: baseDiagram.group().attr({ id: \"fretLabels\" }),\n      fretLabelsCover: baseDiagram.group().attr({ id: \"fretLabelsCover\" }),\n      stringsLabels: baseDiagram.group().attr({ id: \"stringsLabels\" }),\n      barres: baseDiagram.group().attr({ id: \"barres\" }),\n      fingers: baseDiagram.group().attr({ id: \"fingers\" }),\n      stringMarkings: baseDiagram.group().attr({ id: \"stringMarkings\" }),\n      chordTitle1: baseDiagram.group().attr({ id: \"chordTitle1\" }),\n      chordTitle2: baseDiagram.group().attr({ id: \"chordTitle2\" }),\n    };\n\n    const coverTopGradient = this.draw\n      .gradient(\"linear\", (add: Gradient) => {\n        add.stop(0, this.params.backgroundColor);\n        add.stop(0.9, this.params.backgroundColor);\n        add.stop(1, this.params.backgroundColor, 0);\n      })\n      .rotate(90);\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const coverTopGradientDebug = this.draw\n      .gradient(\"linear\", (add: Gradient) => {\n        add.stop(0, \"rgba(255,0,0)\", 0.5);\n        add.stop(0.9, \"rgba(255,0,0)\", 0.5);\n        add.stop(1, \"rgba(0,255,0)\", 0.5);\n      })\n      .rotate(90);\n\n    const coverBottomGradient = this.draw\n      .gradient(\"linear\", (add: Gradient) => {\n        add.stop(0, this.params.backgroundColor, 0);\n        add.stop(0.1, this.params.backgroundColor);\n        add.stop(1, this.params.backgroundColor);\n      })\n      .rotate(90);\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const coverBottomGradientDebug = this.draw\n      .gradient(\"linear\", (add: Gradient) => {\n        add.stop(0, \"rgba(0,255,0)\", 0.5);\n        add.stop(0.1, \"rgba(255,0,0)\", 0.5);\n        add.stop(1, \"rgba(255,0,0)\", 0.5);\n      })\n      .rotate(90);\n\n    const diagramWidth =\n      this.calcedParams.stringSpacing * (this.params.numOfStrings - 1) +\n      this.params.stringWidth;\n    const topDiagramCoverXPosition =\n      this.calcedParams.origin.x - this.params.fretsWidth / 2;\n    const labelCoverWidth =\n      this.calcedParams.origin.x - this.params.fretsWidth / 2;\n    const topLabelCoverHeight =\n      this.calcedParams.origin.y -\n      this.calcedParams.bridgeStrokeWidth / 2 -\n      this.calcedParams.fontSize / 2;\n\n    /****** BACKGROUND ******/\n    this.elements.background = {\n      node: this.elements.layers.background\n        .rect(this.params.width, this.params.height)\n        .stroke({ width: 0 })\n        .fill(this.params.backgroundColor),\n    };\n\n    /****** BRIDGE *****/\n\n    // bridge\n    const bridgeFromX =\n      this.calcedParams.origin.x - this.params.stringWidth / 2;\n    const bridgeFromY =\n      this.calcedParams.origin.y - this.calcedParams.bridgeStrokeWidth;\n    const bridgeHeight = this.calcedParams.origin.y - bridgeFromY;\n    const fretLabelXPosition =\n      this.calcedParams.origin.x -\n      this.calcedParams.fontSize / 1.7 -\n      this.calcedParams.stringSpacing / 4;\n\n    this.elements.bridge = {\n      node: this.elements.layers.bridge\n        .rect(diagramWidth, bridgeHeight)\n        .move(bridgeFromX, bridgeFromY)\n        .stroke({ width: 0 })\n        .fill(this.params.bridgeColor || this.params.defaultColor),\n      label: this.drawText(\n        this.elements.layers.fretLabels,\n        fretLabelXPosition,\n        this.calcedParams.origin.y -\n          this.calcedParams.bridgeStrokeWidth / 2 -\n          this.calcedParams.fontSize * 0.7,\n        \"B\",\n        this.params.textColor,\n        {\n          opacity: this.params.showBridgeLabel ? 1 : 0,\n        }\n      ),\n    };\n\n    // bridge cover\n    const bridgeCoverHeight =\n      this.calcedParams.origin.y - this.calcedParams.bridgeStrokeWidth;\n    this.elements.bridgeCover = {\n      node: this.elements.layers.bridgeCover\n        .rect(diagramWidth, bridgeCoverHeight)\n        .move(topDiagramCoverXPosition, 0)\n        .stroke({ width: 0 })\n        .fill(this.params.backgroundColor),\n    };\n\n    /****** FRETS *****/\n\n    // frets with labels\n    this.elements.frets = [];\n    for (let i = 0; i < 25; i += 1) {\n      const fromY =\n        this.calcedParams.origin.y + this.calcedParams.fretSpacing * i;\n\n      this.elements.frets[i] = {\n        node: this.drawLine(\n          this.elements.layers.frets,\n          this.calcedParams.origin.x,\n          fromY,\n          this.calcedParams.origin.x +\n            this.calcedParams.stringSpacing * (this.params.numOfStrings - 1),\n          fromY\n        ).stroke({\n          width: this.params.fretsWidth,\n          color: this.params.fretColor || this.params.defaultColor,\n        }),\n        label:\n          i === 0\n            ? null\n            : this.drawText(\n                this.elements.layers.fretLabels,\n                fretLabelXPosition,\n                fromY - this.calcedParams.fretSpacing / 2 - this.calcedParams.fontSize * 0.75,\n                i.toString(),\n                this.params.textColor,\n                {\n                  opacity: i === 1 && !this.params.showFretsLabels ? 0 : 1\n                }\n              ),\n      };\n    }\n\n    // frets top cover\n    const fretsCoverTopHeight =\n      this.calcedParams.origin.y - this.params.fretsWidth / 2;\n    this.elements.fretsCoverTop = {\n      node: this.elements.layers.fretsCover\n        .rect(diagramWidth, fretsCoverTopHeight)\n        .move(topDiagramCoverXPosition, 0)\n        .stroke({ width: 0 })\n        .fill(this.params.backgroundColor),\n    };\n\n    // frets bottom cover\n    const fretsCoverBottomHeight =\n      this.params.height - this.calcedParams.height + this.params.fretsWidth;\n    const fretsCoverBottomYPosition =\n      this.calcedParams.origin.y +\n      this.calcedParams.fretSpacing * this.params.numOfFrets +\n      this.params.fretsWidth / 2;\n    this.elements.fretsCoverBottom = {\n      node: this.elements.layers.fretsCover\n        .rect(this.params.width, fretsCoverBottomHeight)\n        .move(0, fretsCoverBottomYPosition)\n        .stroke({ width: 0 })\n        .fill(this.params.backgroundColor),\n    };\n\n    // frets top label cover\n    this.elements.fretsLabelCoverTop = {\n      node: this.elements.layers.fretLabelsCover\n        .rect(labelCoverWidth, topLabelCoverHeight + this.calcedParams.fontSize / 2.5)\n        .stroke({ width: 0 })\n        .fill(coverTopGradient),\n    };\n\n    // frets bottom label cover\n    this.elements.fretsLabelCoverBottom = {\n      node: this.elements.layers.fretLabelsCover\n        .rect(labelCoverWidth, topLabelCoverHeight + this.calcedParams.fontSize)\n        .move(0, fretsCoverBottomYPosition - this.calcedParams.fontSize * 1.3)\n        .stroke({ width: 0 })\n        .fill(coverBottomGradient),\n    };\n\n    // frets side label cover\n    if (!this.params.showFretsLabels) {\n      this.elements.fretsLabelCoverSide = {\n        node: this.elements.layers.fretLabelsCover\n          .rect(labelCoverWidth, topLabelCoverHeight)\n          .move(0, this.calcedParams.origin.y + this.calcedParams.fontSize * 2)\n          .stroke({ width: 0 })\n          .fill(coverBottomGradient),\n      };\n      this.elements.fretsLabelCoverSide = {\n        node: this.elements.layers.fretLabelsCover\n          .rect(labelCoverWidth, this.calcedParams.height)\n          .move(0, this.calcedParams.origin.y + topLabelCoverHeight)\n          .stroke({ width: 0 })\n          .fill(this.params.backgroundColor),\n      };\n    }\n\n    /****** STRINGS *****/\n\n    // strings with labels\n    this.elements.strings = [];\n    for (let i = 0; i < this.params.numOfStrings; i += 1) {\n      this.elements.strings[i] = {\n        node: this.drawLine(\n          this.elements.layers.strings,\n          this.calcedParams.origin.x + this.calcedParams.stringSpacing * i,\n          this.calcedParams.origin.y,\n          this.calcedParams.origin.x + this.calcedParams.stringSpacing * i,\n          this.calcedParams.origin.y +\n            this.calcedParams.fretSpacing * this.params.numOfFrets\n        ).stroke({\n          width: this.params.stringWidth,\n          color: this.params.stringColor || this.params.defaultColor,\n        }),\n        label: this.drawText(\n          this.elements.layers.stringsLabels,\n          this.calcedParams.origin.x + this.calcedParams.stringSpacing * i,\n          this.calcedParams.origin.y +\n            this.calcedParams.fretSpacing * this.params.numOfFrets +\n            10,\n          this.params.tuning[i],\n          this.params.textColor,\n          {\n            opacity: this.params.showTuning ? 1 : 0,\n          }\n        ),\n      };\n    }\n\n    /****** FINGERS *****/\n\n    // fingers with labels\n    this.elements.fingers = [];\n    this.elements.barres = []\n    for (let i = 1; i < 5; i += 1) {\n      const [fingerBasePositionX, fingerBasePositionY] =\n      this.getFingerBasePosition(i);\n\n      const barreLayerName = \"barre\" + i;\n        this.elements.layers[barreLayerName] = this.elements.layers.barres\n        .group()\n        .attr({ id: barreLayerName })\n        .opacity(0);\n      this.elements.barres[i] = {\n        node: this.drawLine(\n          this.elements.layers[barreLayerName],\n          fingerBasePositionX + this.calcedParams.stringSpacing / 4,\n          fingerBasePositionY + this.calcedParams.fretSpacing / 4,\n          fingerBasePositionX + this.calcedParams.stringSpacing / 4,\n          fingerBasePositionY + this.calcedParams.fretSpacing / 4\n        ).stroke({\n          width: this.calcedParams.fretSpacing / 2,\n          color: this.params.fingersColor || this.params.defaultColor,\n          linecap: 'round'\n        }),\n        label: null,\n      };\n\n      const fingerLayerName = \"finger\" + i;\n      this.elements.layers[fingerLayerName] = this.elements.layers.fingers\n        .group()\n        .attr({ id: fingerLayerName })\n        .opacity(0);\n      this.elements.fingers[i] = {\n        node: this.drawCircle(\n          this.elements.layers[fingerLayerName],\n          this.calcedParams.fretSpacing / 2,\n          fingerBasePositionX,\n          fingerBasePositionY\n        ).fill(this.params.fingersColor || this.params.defaultColor),\n        label: this.drawText(\n          this.elements.layers[fingerLayerName],\n          fingerBasePositionX + this.calcedParams.fretSpacing / 3.9,\n          this.calcedParams.origin.y +\n            this.calcedParams.fretSpacing * (i - 1) +\n            this.calcedParams.fretSpacing / 3.2,\n          i.toString(),\n          this.params.fingersLabelColor,\n          {\n            size: this.calcedParams.fretSpacing / 3.4,\n            opacity: this.params.showFingerLabels ? 1 : 0,\n          }\n        ),\n      };\n    }\n\n    // string markings with labels\n    this.elements.openStringMarkins = [];\n    this.elements.mutedStringMarkings = [];\n    for (let i = 1; i <= this.params.numOfStrings; i += 1) {\n      const openStringMarkingLayerName = \"openStringMarking\" + i;\n      this.elements.layers[openStringMarkingLayerName] =\n        this.elements.layers.stringMarkings\n          .group()\n          .attr({ id: openStringMarkingLayerName })\n          .opacity(0);\n      this.elements.openStringMarkins[i] = {\n        node: this.drawCircle(\n          this.elements.layers[openStringMarkingLayerName],\n          this.calcedParams.fretSpacing / 3,\n          this.calcedParams.origin.x +\n            this.calcedParams.stringSpacing * (i - 1) -\n            this.calcedParams.fretSpacing / 6,\n          this.getOpenStringMarkingBaseYPosition()\n        )\n          .stroke(this.params.defaultColor)\n          .fill(this.params.backgroundColor),\n        label: this.drawText(\n          this.elements.layers[openStringMarkingLayerName],\n          this.calcedParams.origin.x +\n            this.calcedParams.stringSpacing * (i - 1),\n          this.calcedParams.origin.y -\n            this.calcedParams.bridgeStrokeWidth -\n            this.calcedParams.fretSpacing * 0.95,\n          this.params.tuning[i - 1],\n          this.params.defaultColor,\n          {\n            size: this.calcedParams.fretSpacing / 5,\n            opacity: this.params.showOpenStringsLabels ? 1 : 0,\n          }\n        ),\n      };\n      const mutedStringMarkingLayerName = \"mutedStringMarking\" + i;\n      this.elements.layers[mutedStringMarkingLayerName] =\n      this.elements.layers.stringMarkings\n          .group()\n          .attr({ id: mutedStringMarkingLayerName })\n          .opacity(0);\n      this.elements.mutedStringMarkings[i] = {\n        node: null,\n        label: this.drawText(\n          this.elements.layers[mutedStringMarkingLayerName],\n          this.calcedParams.origin.x +\n            this.calcedParams.stringSpacing * (i - 1),\n          this.getMutedStringMarkingBaseYPosition(),\n          \"X\",\n          this.params.defaultColor,\n          {\n            size: this.calcedParams.fretSpacing / 3,\n          }\n        ),\n      };\n    }\n\n    //string markings cover\n    this.elements.stringMarkingCover = {\n      node: this.elements.layers.stringMarkings\n        .rect(this.params.width, this.calcedParams.origin.y - this.calcedParams.stringSpacing * 0.75)\n        .stroke({ width: 0 })\n        .fill(this.params.backgroundColor)\n    };\n\n    this.moveDiagramToFret(0);\n\n    this.params.debugMode && this.printParams();\n  }\n\n  getOpenStringMarkingBaseYPosition() {\n    return (\n      this.calcedParams.origin.y -\n      this.calcedParams.bridgeStrokeWidth -\n      this.calcedParams.fretSpacing\n    );\n  }\n\n  getMutedStringMarkingBaseYPosition() {\n    return (\n      this.calcedParams.origin.y -\n      this.calcedParams.bridgeStrokeWidth -\n      this.calcedParams.fretSpacing * 1.05\n    );\n  }\n\n  getFingerBasePosition(fingerIndex: number) {\n    const x =\n      this.calcedParams.origin.x +\n      this.calcedParams.stringSpacing * (this.params.numOfStrings - 0.5);\n    const y =\n      this.calcedParams.origin.y +\n      this.calcedParams.fretSpacing * (fingerIndex - 1) +\n      this.calcedParams.fretSpacing / 4;\n    return [x, y];\n  }\n\n  getFingerChordPosition(chordPosition: number, finger: Finger) {\n    const { string, fret } = finger;\n    \n    const actualString = Array.isArray(string) ? string[0] : string;\n    const fretsToAdd = chordPosition <= 1 ? 0 : 1;\n    const isForcePositionExists = this.params.forcePosition !== undefined && !isNaN(this.params.forcePosition);\n    const forcePositionAdd = isForcePositionExists ? fretsToAdd - this.params.forcePosition! : 0;\n    const finalAdd = fretsToAdd + forcePositionAdd;\n    const moveToX =\n      this.calcedParams.origin.x +\n      (this.params.numOfStrings - actualString - 0.25) *\n        this.calcedParams.stringSpacing;\n    const moveToY =\n      this.calcedParams.origin.y +\n      (fret - chordPosition + finalAdd - 0.75) *\n        this.calcedParams.fretSpacing;\n    let barreLength;\n    if (Array.isArray(string) && string[1]) {\n      barreLength = this.calcedParams.stringSpacing * (string[0] - string[1]) + this.calcedParams.stringSpacing / 4\n    }\n    return [moveToX, moveToY, barreLength];\n  }\n\n  moveDiagramToFret(fretNumber: number, animate?: boolean) {\n    const maxStartFret = 25 - this.params.numOfFrets;\n    const topFretLine = fretNumber <= 1 ? 0 : fretNumber;\n    if (topFretLine > maxStartFret) {\n      console.error(`Max fret allowed as start position is ${maxStartFret}`);\n      return;\n    }\n\n    const bridgeTopY =\n      this.calcedParams.origin.y - this.calcedParams.bridgeStrokeWidth;\n    const labelsTopY =\n      this.calcedParams.origin.y - this.calcedParams.fontSize * 0.9;\n    if (animate) {\n      this.elements.layers.bridge\n        .animate(this.calcedParams.animationDuration)\n        .y(bridgeTopY - this.calcedParams.fretSpacing * topFretLine);\n      this.elements.layers.frets\n        .animate(this.calcedParams.animationDuration)\n        .y(\n          this.calcedParams.origin.y -\n            this.calcedParams.fretSpacing * topFretLine\n        );\n      this.elements.layers.fretLabels\n        .animate(this.calcedParams.animationDuration)\n        .y(labelsTopY - this.calcedParams.fretSpacing * topFretLine);\n    } else {\n      this.elements.layers.bridge.y(\n        bridgeTopY - this.calcedParams.fretSpacing * topFretLine\n      );\n      this.elements.layers.frets.y(\n        this.calcedParams.origin.y - this.calcedParams.fretSpacing * topFretLine\n      );\n      this.elements.layers.fretLabels.y(\n        labelsTopY - this.calcedParams.fretSpacing * topFretLine\n      );\n    }\n  }\n\n  drawChord(chord: Chord, title: string, animate?: boolean) {\n    console.log(chord);\n    if (this.params.forcePosition === undefined || isNaN(this.params.forcePosition)) {\n      this.moveDiagramToFret(chord.position, animate);\n    };\n\n    for (let i = 1; i < 5; i++) {\n      const finger = chord.fingers.find((finger: Finger) => finger.index === i);\n      if (finger) {\n        const [x,y, barreLength] = this.getFingerChordPosition(chord.position, finger)\n        if (animate) {\n          this.elements.layers[\"finger\" + i]\n            .animate(this.calcedParams.animationDuration)\n            .move(x,y)\n            .opacity(1);\n            if (barreLength) {\n              this.elements.layers[\"barre\" + i]\n              .animate(this.calcedParams.animationDuration)\n              .move(x + this.calcedParams.stringSpacing / 4, y + this.calcedParams.fretSpacing / 4)\n              .opacity(1);\n              this.elements.barres[i].node\n              .animate(this.calcedParams.animationDuration)\n              .attr({x1: x + barreLength})\n            } else {\n              this.elements.layers[\"barre\" + i]\n              .animate(this.calcedParams.animationDuration)\n              .move(x, y + this.calcedParams.fretSpacing / 4)\n              .opacity(1);\n              this.elements.barres[i].node\n              .animate(this.calcedParams.animationDuration)\n              .attr({x1: x + this.calcedParams.fretSpacing / 4, x2: x + this.calcedParams.fretSpacing / 4})\n            }\n        } else {\n          this.elements.layers[\"finger\" + i]\n            .move(x,y)\n            .opacity(1);\n          if (barreLength) {\n            this.elements.layers[\"barre\" + i]\n            .move(x + this.calcedParams.stringSpacing / 4, y + this.calcedParams.fretSpacing / 4)\n            .opacity(1);\n            this.elements.barres[i].node.attr({x1: x + barreLength})\n          }\n        }\n      } else {\n        const [x, y] = this.getFingerBasePosition(i)\n        if (animate) {\n          this.elements.layers[\"finger\" + i]\n            .animate(this.calcedParams.animationDuration)\n            .move(x,y)\n            .opacity(0);\n            this.elements.layers[\"barre\" + i]\n              .animate(this.calcedParams.animationDuration)\n              .move(x + this.calcedParams.stringSpacing /4 ,y + this.calcedParams.fretSpacing /4 )\n              .opacity(0);\n        } else {\n          this.elements.layers[\"finger\" + i]\n            .move(x,y)\n            .opacity(0);\n            this.elements.layers[\"barre\" + i]\n            .move(x + this.calcedParams.stringSpacing /4 ,y + this.calcedParams.fretSpacing /4 )\n              .opacity(0);\n        }\n      }\n    }\n\n    for (let i = 1; i <= this.params.numOfStrings; i++) {\n      if (chord.mutedStrings.includes(this.params.numOfStrings - i + 1)) {\n        if (animate) {\n          this.elements.layers[\"mutedStringMarking\" + i]\n            .animate(this.calcedParams.animationDuration)\n            .y(\n              this.calcedParams.origin.y -\n                this.calcedParams.bridgeStrokeWidth -\n                this.calcedParams.fretSpacing * 0.53\n            )\n            .opacity(1);\n        } else {\n          this.elements.layers[\"mutedStringMarking\" + i]\n            .y(\n              this.calcedParams.origin.y -\n                this.calcedParams.bridgeStrokeWidth -\n                this.calcedParams.fretSpacing * 0.53\n            )\n            .opacity(1);\n        }\n      } else {\n        if (animate) {\n          this.elements.layers[\"mutedStringMarking\" + i]\n            .animate(this.calcedParams.animationDuration)\n            .y(this.getMutedStringMarkingBaseYPosition())\n            .opacity(0);\n        } else {\n          this.elements.layers[\"mutedStringMarking\" + i]\n            .y(this.getMutedStringMarkingBaseYPosition())\n            .opacity(0);\n        }\n      }\n\n      if (chord.openStrings.includes(this.params.numOfStrings - i + 1)) {\n        if (animate) {\n          this.elements.layers[\"openStringMarking\" + i]\n            .animate(this.calcedParams.animationDuration)\n            .y(\n              this.calcedParams.origin.y -\n                this.calcedParams.bridgeStrokeWidth -\n                this.calcedParams.fretSpacing * 0.5\n            )\n            .opacity(1);\n        } else {\n          this.elements.layers[\"openStringMarking\" + i]\n            .y(\n              this.calcedParams.origin.y -\n                this.calcedParams.bridgeStrokeWidth -\n                this.calcedParams.fretSpacing * 0.5\n            )\n            .opacity(1);\n        }\n      } else {\n        if (animate) {\n          this.elements.layers[\"openStringMarking\" + i]\n            .animate(this.calcedParams.animationDuration)\n            .y(this.getOpenStringMarkingBaseYPosition())\n            .opacity(0);\n        } else {\n          this.elements.layers[\"openStringMarking\" + i]\n            .y(this.getOpenStringMarkingBaseYPosition())\n            .opacity(0);\n        }\n      }\n    }\n\n\n      this.moveOldTitle(this.currentTitle);\n      this.currentTitle = this.currentTitle % 2 + 1;\n      this.drawChordTitle(title, this.currentTitle, animate);\n  }\n\n  moveOldTitle(chordTitleNumber: number, animate?: boolean) {\n    this.elements.layers[\"chordTitle\" + chordTitleNumber].animate(this.calcedParams.animationDuration / 2).x(-this.calcedParams.width / 4).opacity(0);\n    setTimeout(() => {\n      this.elements.layers[\"chordTitle\" + chordTitleNumber].opacity(1).x(0).clear();\n    }, this.calcedParams.animationDuration / 2)\n  }\n\n  drawChordTitle(title: string, chordTitleNumber: number, animate?: boolean) {\n    this.elements.layers[\"chordTitle\" + chordTitleNumber].opacity(1);\n    if (animate) {\n        this.elements[\"chordTitle\" + chordTitleNumber] = this.drawText(\n          this.elements.layers[\"chordTitle\" + chordTitleNumber],\n          this.params.width,\n          this.calcedParams.origin.y / 5,\n          title,\n          this.params.defaultColor,\n          {\n            size: this.calcedParams.fontSize * 3,\n          }\n        )\n          .attr({ opacity: 0 })\n\n        this.elements[\"chordTitle\" + chordTitleNumber]   \n          .animate(this.calcedParams.animationDuration / 2)\n          .x(this.params.width / 2 - this.elements[\"chordTitle\" + chordTitleNumber].length() / 2)\n          .attr({ opacity: 1 });\n      \n    } else {\n      this.elements[\"chordTitle\" + chordTitleNumber] = this.drawText(\n        this.elements.layers[\"chordTitle\" + chordTitleNumber],\n        this.params.width / 2,\n        this.calcedParams.origin.y / 5,\n        title,\n        this.params.defaultColor,\n        {\n          size: this.calcedParams.fontSize * 3,\n        }\n      );\n    }\n  }\n}\n","//@ts-ignore;\nimport { findGuitarChord } from \"chord-fingering\";\nimport { Finger, Chord } from \"../utils/Chords2\";\n\ntype Position = {\n  fret: number;\n  note: string;\n  stringIndex: number;\n  stringNote: string;\n};\n\ntype Barre = {\n    fret: number,\n    stringIndices: [number, number]\n}\n\ntype Fingering = {\n  positions: Position[],\n  barre: Barre\n}\n\nconst sortFingers = (fingerA: Finger, fingerB: Finger): number => {\n  const fingerAString = Array.isArray(fingerA.string) ? fingerA.string[0] : fingerA.string;\n  const fingerBString = Array.isArray(fingerB.string) ? fingerB.string[0] : fingerB.string;\n  return fingerA.fret === fingerB.fret ? fingerBString - fingerAString : fingerA.fret - fingerB.fret;\n};\n\nexport function stringToChord(chord: string): Chord | null {\n  const chordFingerings = findGuitarChord(chord);\n  if (!chordFingerings) return null;\n\n  const { positions, barre }: Fingering = chordFingerings.fingerings[0];\n  const openStrings: number[] = [];\n  const mutedStrings: number[] = [1, 2, 3, 4, 5, 6];\n  const fingers: Finger[] = [];\n  let currentBarre: [number, number] | null = null\n  let currentBarreFret: number | null = null;\n\n  positions.reverse().forEach((position: Position) => {\n    const { fret, stringIndex } = position;\n    \n    let string: Finger[\"string\"] = 6 - stringIndex;\n    if (barre && barre.fret === fret && !currentBarre) {\n      currentBarreFret = barre.fret;\n      currentBarre = [6 - barre.stringIndices[0], 6 - barre.stringIndices[barre.stringIndices.length - 1]];\n      string = currentBarre;\n    }\n\n    if (fret === 0) {\n      openStrings.push(6 - stringIndex);\n    } else {\n      fingers.push({\n        index: 0,\n        string: string,\n        fret,\n      });\n    }\n\n    if (mutedStrings.includes(6 - stringIndex)) {\n      mutedStrings.splice(mutedStrings.indexOf(6 - stringIndex), 1);\n    }\n  });\n\n  const filteredFingers: Finger[] = fingers.filter(finger => {\n    return !currentBarre || currentBarreFret !== finger.fret || \n    (Array.isArray(finger.string) && currentBarreFret === finger.fret && currentBarre[0] === finger.string[0]);\n  })\n  .sort(sortFingers)\n  .map((finger, index) => ({...finger, index: index + 1}))\n\n  const position = Math.min(...fingers.map((finger) => finger.fret));\n\n  const chordObject: Chord = {\n    fingers: filteredFingers,\n    position: position === 1 ? 0 : position,\n    mutedStrings,\n    openStrings,\n  };\n\n  return chordObject;\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport styled from \"@emotion/styled\";\nimport { ChordDiagram, ChordDiagramParams, stringToChord } from \"../ChordDiagram\";\nimport Button from \"@mui/material/Button\";\n\nconst MainChordWrapper = styled.div`\n  height: 100%;\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  position: absolute;\n  bottom: 0;\n  padding: 20px;\n`;\n\nconst ChordDiagramWrapper = styled.div<{ debugMode: boolean | undefined }>`\n  ${({ debugMode }) => (debugMode ? \"border: 1px solid red;\" : null)}\n`;\n\ntype MainChordProps = {\n  diagramConfiguration: ChordDiagramParams;\n  chords: string[];\n};\n\nfunction MainChord(props: MainChordProps) {\n  const diagramWrapper = useRef<HTMLDivElement>(null);\n  const chordDiagram = useRef<ChordDiagram | null>(null);\n  const [currentChord, setCurrentChord] = useState<number>(0);\n\n  const chord = props.chords[currentChord];\n\n  useEffect(() => {\n    if (diagramWrapper.current) {\n      diagramWrapper.current.innerHTML = \"\";\n      chordDiagram.current = new ChordDiagram(\n        \"#main-chord-diagram-wrapper\",\n        props.diagramConfiguration\n      );\n    }\n\n    if (chordDiagram.current) {\n      chordDiagram.current.drawBaseDiagram();\n    }\n  }, [props.diagramConfiguration]);\n\n  useEffect(() => {\n    if (chordDiagram.current !== null) {\n      const chordModel = stringToChord(chord);\n      if (chordModel) {\n        chordDiagram.current.drawChord(chordModel, chord, true);\n      } else {\n        // TODO - Show the user that the chord is invalid\n      }\n    }\n\n  }, [chord]);\n\n  const handleMoveChord = (direction: number) => {\n    if (currentChord + direction < 0) {\n      setCurrentChord(props.chords.length - 1);\n    } else if (currentChord + direction === props.chords.length) {\n      setCurrentChord(0);\n    } else {\n      setCurrentChord(currentChord + direction);\n    }\n  };\n\n  return (\n    <MainChordWrapper>\n      <ChordDiagramWrapper\n        id={\"main-chord-diagram-wrapper\"}\n        ref={diagramWrapper}\n        debugMode={props.diagramConfiguration.debugMode}\n      />\n      <ButtonContainer>\n        <Button onClick={() => handleMoveChord(-1)}>\n          &lt;-- Previous Chord\n        </Button>\n        <Button onClick={() => handleMoveChord(1)}>Next Chord --&gt;</Button>\n      </ButtonContainer>\n    </MainChordWrapper>\n  );\n}\n\nexport default MainChord;\n","import {tokenizer} from './tokenizer';\nimport {parser} from './parser';\n\n// const chordsfreeText = `\n// Let it be\n// 4X4\n// Opening\n// ||: C G | 2(Am) Fmaj7 F6  |\n// |  C  G | 2(F) Em Dm 4(C) ||\n\n// Verse\n// ||: C G  | Am Fmaj7 | C G | F . Em Dm C . . . :||\n\n// Chorus\n// ||: Am G | F    C   | C G | F . Em Dm C . . . :||\n// `;\n\n// const chords = `|: C G | Am Am Fmaj7 F6  |  C  G | F F Em Dm C C C C :|`;\n\n\nexport const parseChords = (input: string) => {\n    const tokens = tokenizer(input);\n    const ast = parser(tokens);\n    \n    // currently only supports bars\n    console.log(ast);\n    // @ts-ignore\n    return ast.body.filter(node => node.type === 'bar').flatMap(node => node.chords.map(chord => chord.value));\n}\n","// @ts-nocheck\nexport function tokenizer(input) {\n    let current = 0;\n    let tokens = [];\n  \n    // We start by creating a `while` loop where we are setting up our `current`\n    // variable to be incremented as much as we want `inside` the loop.\n    //\n    // We do this because we may want to increment `current` many times within a\n    // single loop because our tokens can be any length.\n    while (current < input.length) {\n      // We're also going to store the `current` character in the `input`.\n      let char = input[current];\n  \n      if (char === \"|\") {\n        if (input[current + 1] === \"|\") {\n          tokens.push({\n            type: \"double barline\",\n            value: \"||\",\n          });\n          current++;\n        } else {\n          tokens.push({\n            type: \"barline\",\n            value: \"|\",\n          });\n        }\n  \n        current++;\n        continue;\n      }\n  \n      // we're now going to check for whitespace. This is interesting\n      // because we care that whitespace exists to separate characters, but it\n      // isn't actually important for us to store as a token. We would only throw\n      // it out later.\n      //\n      // So here we're just going to test for existence and if it does exist we're\n      // going to just `continue` on.\n      let WHITESPACE = /\\s/;\n      if (WHITESPACE.test(char)) {\n        current++;\n        continue;\n      }\n  \n      if (char === \":\") {\n        // TODO - take care of this later\n        current++;\n        continue;\n      }\n  \n      if (char === \".\") {\n        // Consider putting here the chord itself\n        tokens.push({\n          type: \"dot\",\n          value: \".\",\n        });\n      }\n  \n      let CHORD = /[a-zA-Z0-9#-+()]/i;\n      if (CHORD.test(char)) {\n        let value = \"\";\n  \n        // Again we're just going to loop through all the letters pushing them to\n        // a value.\n        while (CHORD.test(char)) {\n          value += char;\n          char = input[++current];\n        }\n  \n        tokens.push({ type: \"chord\", value });\n  \n        continue;\n      }\n  \n      // Finally if we have not matched a character by now, we're going to throw\n      // an error and completely exit.\n      throw new TypeError(\"I dont know what this character is: \" + char);\n    }\n  \n    // Then at the end of our `tokenizer` we simply return the tokens array.\n    return tokens;\n  }\n  ","// @ts-nocheck\nexport function parser(tokens: any) {\n    let current = 0;\n  \n    function walk() {\n      let token = tokens[current];\n  \n      if (token.type === \"chord\") {\n        current++;\n  \n        return {\n          type: \"chord\",\n          value: token.value,\n        };\n      }\n  \n      if (token.type === \"double barline\") {\n        let node = {\n          type: \"Section\",\n          content: [],\n        };\n  \n        token = tokens[++current];\n  \n        while (token.type !== \"double barline\") {\n          node.content.push(walk());\n          token = tokens[current];\n        }\n  \n        // Finally we will increment `current` one last time to skip the closing barline\n        current++;\n  \n        // And return the node.\n        return node;\n      }\n  \n      if (token.type === \"barline\") {\n        token = tokens[++current];\n  \n        let node = {\n          type: \"bar\",\n          chords: [],\n        };\n  \n        while (token.type !== \"barline\") {\n          node.chords.push(walk());\n          token = tokens[current];\n        }\n  \n        // In case we're in the end, pass on the last barline\n        if (!tokens[current + 1]) {\n          ++current;\n        }\n  \n        return node;\n      }\n  \n      throw new TypeError(`Couldn'd recognize token type \"${token.type}\"\"`);\n    }\n  \n    // Now, we're going to create our AST which will have a root which is a\n    // `Chart` node.\n    let ast = {\n      type: \"Chart\",\n      body: [],\n    };\n  \n    while (current < tokens.length) {\n      ast.body.push(walk());\n    }\n  \n    // At the end of our parser we'll return the AST.\n    return ast;\n  }\n  ","import React, { useState } from \"react\";\nimport styled from \"@emotion/styled\";\nimport ConfigurationPanel from \"./components/ConfigurationPanel\";\nimport MainChord from \"./components/MainChord\";\nimport { defaultParams, ChordDiagramParams } from \"./ChordDiagram\";\nimport { parseChords } from \"./parser/parseChords\";\nimport camelCase from \"camelcase\";\n\nconst Main = styled.div`\n  display: flex;\n  height: 100vh;\n  width: 100vw;\n  overflow: hidden;\n`;\n\nfunction App() {\n  const [chords, setChords] = useState<string[]>([\"C\", \"Cmaj7\", \"C7\", \"F\", \"F/E\", \"D\", \"G\", \"Amin\", \"A-maj7\", \"Am7\", \"A-6\", \"F\", \"Eb\", \"G\", \"C\"]);\n\n  try {\n    // TODO - use this\n    const chordsFromText = parseChords(\"|\" + chords.join(\" \") + \"|\");\n    chordsFromText.map((c: string) => camelCase(c, { pascalCase: true }));\n  } catch (error: any) {\n    console.error(`can't parse chords`);\n  }\n  const [diagramConfiguration, setDiagramConfiguration] =\n    useState<ChordDiagramParams>({ ...defaultParams, debugMode: false });\n\n  return (\n    <Main>\n      <ConfigurationPanel\n        chords={chords}\n        setChords={setChords}\n        diagramConfiguration={diagramConfiguration}\n        setDiagramConfiguration={setDiagramConfiguration}\n      />\n      <MainChord\n        diagramConfiguration={diagramConfiguration}\n        chords={chords}\n      />\n    </Main>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"@fontsource/roboto/300.css\";\nimport \"@fontsource/roboto/400.css\";\nimport \"@fontsource/roboto/500.css\";\nimport \"@fontsource/roboto/700.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}