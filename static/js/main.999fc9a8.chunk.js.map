{"version":3,"sources":["components/DiagramConfiguration.tsx","ChordDiagram/ChordDiagram.ts","ChordDiagram/StringToChord.ts","components/ChordConfigurationPanel.tsx","components/ChordsSequence.tsx","components/layout/BasicTabs.tsx","components/ConfigurationPanel.tsx","components/MainChord.tsx","parser/parseChords.ts","parser/tokenizer.ts","parser/parser.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Wraper","styled","div","Row","DiagramConfiguration","diagramConfiguration","setDiagramConfiguration","handleNumberChange","value","param","handleBooleanChange","handleStringChange","TextField","label","variant","defaultValue","width","onBlur","e","parseInt","target","height","numOfStrings","numOfFrets","stringWidth","fretsWidth","forcePosition","animationDuration","FormControlLabel","control","Switch","checked","showFretsLabels","onChange","showBridgeLabel","showFingerLabels","showOpenStringsLabels","showTuning","tuning","split","defaultColor","bridgeColor","stringColor","fretColor","textColor","labelColor","backgroundColor","fontFamily","fontSize","fontStyle","fontWeight","defaultParams","fingersLabelColor","ChordDiagram","selector","params","draw","elements","calcedParams","currentTitle","this","SVG","addTo","size","stringSpacing","fretSpacing","origin","x","y","bridgeStrokeWidth","Math","ceil","maxFontSize","max","layer","msg","color","attrs","textAttrs","family","style","weight","opacity","text","stroke","fill","font","move","length","fromX","fromY","toX","toY","line","circle","console","log","table","strings","frets","layers","points","forEach","point","index","drawPointAt","baseDiagram","group","attr","id","background","fretsCover","bridge","bridgeCover","fretLabels","fretLabelsCover","stringsLabels","barres","fingers","stringMarkings","chordTitle1","chordTitle2","coverTopGradient","gradient","add","stop","rotate","coverBottomGradient","diagramWidth","topDiagramCoverXPosition","labelCoverWidth","topLabelCoverHeight","node","rect","bridgeFromX","bridgeFromY","bridgeHeight","fretLabelXPosition","drawText","bridgeCoverHeight","i","drawLine","toString","fretsCoverTopHeight","fretsCoverTop","fretsCoverBottomHeight","fretsCoverBottomYPosition","fretsCoverBottom","fretsLabelCoverTop","fretsLabelCoverBottom","fretsLabelCoverSide","getFingerBasePosition","fingerBasePositionX","fingerBasePositionY","barreLayerName","fingersColor","linecap","fingerLayerName","drawCircle","openStringMarkins","mutedStringMarkings","openStringMarkingLayerName","getOpenStringMarkingBaseYPosition","mutedStringMarkingLayerName","getMutedStringMarkingBaseYPosition","stringMarkingCover","moveDiagramToFret","debugMode","printParams","fingerIndex","chordPosition","finger","string","fret","actualString","Array","isArray","isForcePositionExists","undefined","isNaN","chordPositionAdd","forcePositionAdd","finalAdd","barreLength","moveToX","moveToY","fretNumber","animate","maxStartFret","topFretLine","error","bridgeTopY","labelsTopY","chord","startFret","find","getFingerChordPosition","x1","x2","mutedStrings","includes","openStrings","moveOldTitle","drawChordTitle","title","chordTitleNumber","setTimeout","clear","sortFingers","fingerA","fingerB","fingerAString","fingerBString","getEmptyChordConfiguration","availablePositions","selectedPosition","chords","stringToConfigurableChord","chordTitle","chordFingerings","findGuitarChord","fingerings","map","fingering","getEmptyChordObject","positions","barre","currentBarre","currentBarreFret","reverse","position","stringIndex","stringIndices","push","splice","indexOf","filter","sort","getChordFromFingering","_","arrayToConfigurableChords","ChordConfigurationWrapper","ChordLabel","StyledTextField","StyledAutoComplete","Autocomplete","ChordConfigurationPanel","props","useState","chordConfiguration","config","setConfig","helperText","options","renderInput","StyledButton","button","ButtonWrapper","InputWrapper","ChordsSequence","handleChange","newChords","chordsConfigurations","setChordsConfigurations","removeChord","join","chordArray","replace","multiline","onClick","StyledPanel","hidden","StylePanelContentWrapper","Box","TabPanel","children","role","StyleTabsWrapper","BasicTabs","tabs","React","setValue","sx","borderBottom","borderColor","Tabs","event","newValue","tab","Tab","content","Wrapper","ConfigurationPanel","setChords","MainChordWrapper","ButtonContainer","ChordDiagramWrapper","MainChord","diagramWrapper","useRef","chordDiagram","currentChord","setCurrentChord","useEffect","current","innerHTML","drawBaseDiagram","drawChord","handleMoveChord","direction","ref","Button","parseChords","input","tokens","char","test","type","CHORD","TypeError","tokenizer","ast","walk","token","body","parser","flatMap","Main","App","c","camelCase","pascalCase","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.999fc9a8.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Switch from \"@mui/material/Switch\";\nimport TextField from \"@mui/material/TextField\";\nimport React from \"react\";\nimport { ChordDiagramParams } from \"../ChordDiagram\";\n\nconst Wraper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n  padding: 30px;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  gap: 15px;\n`;\n\ntype ConfigurationPanelProps = {\n  diagramConfiguration: ChordDiagramParams;\n  setDiagramConfiguration: (configuration: ChordDiagramParams) => void;\n};\n\nfunction DiagramConfiguration({\n  diagramConfiguration,\n  setDiagramConfiguration,\n}: ConfigurationPanelProps) {\n  const handleNumberChange = (\n    value: number,\n    param: keyof ChordDiagramParams\n  ) => {\n    setDiagramConfiguration({\n      ...diagramConfiguration,\n      [param]: value,\n    });\n  };\n\n  const handleBooleanChange = (\n    value: boolean,\n    param: keyof ChordDiagramParams\n  ) => {\n    setDiagramConfiguration({\n      ...diagramConfiguration,\n      [param]: value,\n    });\n  };\n\n  const handleArrayChange = (\n    value: string,\n    param: keyof ChordDiagramParams\n  ) => {\n    setDiagramConfiguration({\n      ...diagramConfiguration,\n      [param]: value.split(\",\"),\n    });\n  };\n\n  const handleStringChange = (\n    value: string,\n    param: keyof ChordDiagramParams\n  ) => {\n    setDiagramConfiguration({\n      ...diagramConfiguration,\n      [param]: value,\n    });\n  };\n\n  return (\n    <Wraper>\n      <Row>\n        <TextField\n          label=\"Width\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.width}\n          onBlur={(e) => handleNumberChange(parseInt(e.target.value), \"width\")}\n        />\n        <TextField\n          label=\"Height\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.height}\n          onBlur={(e) => handleNumberChange(parseInt(e.target.value), \"height\")}\n        />\n        <TextField\n          label=\"# of Strings\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.numOfStrings}\n          onBlur={(e) =>\n            handleNumberChange(parseInt(e.target.value), \"numOfStrings\")\n          }\n        />\n        <TextField\n          label=\"# of Frets\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.numOfFrets}\n          onBlur={(e) =>\n            handleNumberChange(parseInt(e.target.value), \"numOfFrets\")\n          }\n        />\n      </Row>\n      <Row>\n        <TextField\n          label=\"String Width\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.stringWidth}\n          onBlur={(e) =>\n            handleNumberChange(parseInt(e.target.value), \"stringWidth\")\n          }\n        />\n        <TextField\n          label=\"Frets Width\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.fretsWidth}\n          onBlur={(e) =>\n            handleNumberChange(parseInt(e.target.value), \"fretsWidth\")\n          }\n        />\n        <TextField\n          label=\"Start Position\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.forcePosition}\n          onBlur={(e) =>\n            handleNumberChange(parseInt(e.target.value), \"forcePosition\")\n          }\n        />\n        <TextField\n          label=\"Anim. Duration\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.animationDuration}\n          onBlur={(e) =>\n            handleNumberChange(parseInt(e.target.value), \"animationDuration\")\n          }\n        />\n      </Row>\n      <Row>\n        <FormControlLabel\n          control={\n            <Switch\n              checked={diagramConfiguration.showFretsLabels}\n              onChange={(e) =>\n                handleBooleanChange(e.target.checked, \"showFretsLabels\")\n              }\n            />\n          }\n          label=\"Show Fret Labels\"\n        />\n        <FormControlLabel\n          control={\n            <Switch\n              checked={diagramConfiguration.showBridgeLabel}\n              onChange={(e) =>\n                handleBooleanChange(e.target.checked, \"showBridgeLabel\")\n              }\n            />\n          }\n          label=\"Show Bridge Labels\"\n        />\n      </Row>\n      <Row>\n        <FormControlLabel\n          control={\n            <Switch\n              checked={diagramConfiguration.showFingerLabels}\n              onChange={(e) =>\n                handleBooleanChange(e.target.checked, \"showFingerLabels\")\n              }\n            />\n          }\n          label=\"Show Finger Label\"\n        />\n        <FormControlLabel\n          control={\n            <Switch\n              checked={diagramConfiguration.showOpenStringsLabels}\n              onChange={(e) =>\n                handleBooleanChange(e.target.checked, \"showOpenStringsLabels\")\n              }\n            />\n          }\n          label=\"Show Open Strings Labels\"\n        />\n      </Row>\n      <Row>\n        <FormControlLabel\n          control={\n            <Switch\n              checked={diagramConfiguration.showTuning}\n              onChange={(e) =>\n                handleBooleanChange(e.target.checked, \"showTuning\")\n              }\n            />\n          }\n          label=\"Show Tuning\"\n        />\n        <TextField\n          label=\"Tuning\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.tuning}\n          onBlur={(e) => handleArrayChange(e.target.value, \"tuning\")}\n        />\n      </Row>\n      <Row>\n        <TextField\n          label=\"Default Color\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.defaultColor}\n          onBlur={(e) => handleStringChange(e.target.value, \"defaultColor\")}\n        />\n        <TextField\n          label=\"Bridge Color\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.bridgeColor}\n          onBlur={(e) => handleStringChange(e.target.value, \"bridgeColor\")}\n        />\n      </Row>\n      <Row>\n        <TextField\n          label=\"String Color\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.stringColor}\n          onBlur={(e) => handleStringChange(e.target.value, \"stringColor\")}\n        />\n        <TextField\n          label=\"Fret Color\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.fretColor}\n          onBlur={(e) => handleStringChange(e.target.value, \"fretColor\")}\n        />\n      </Row>\n      <Row>\n        <TextField\n          label=\"Text Color\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.textColor}\n          onBlur={(e) => handleStringChange(e.target.value, \"textColor\")}\n        />\n        <TextField\n          label=\"Label Color\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.labelColor}\n          onBlur={(e) => handleStringChange(e.target.value, \"labelColor\")}\n        />\n      </Row>\n      <Row>\n        <TextField\n          label=\"Background Color\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.backgroundColor}\n          onBlur={(e) => handleStringChange(e.target.value, \"backgroundColor\")}\n        />\n      </Row>\n      <Row>\n        <TextField\n          label=\"Font Family\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.fontFamily}\n          onBlur={(e) => handleStringChange(e.target.value, \"fontFamily\")}\n        />\n        <TextField\n          label=\"Font Size\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.fontSize}\n          onBlur={(e) =>\n            handleNumberChange(parseInt(e.target.value), \"fontSize\")\n          }\n        />\n      </Row>\n      <Row>\n        <TextField\n          label=\"Font Style\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.fontStyle}\n          onBlur={(e) => handleStringChange(e.target.value, \"fontStyle\")}\n        />\n        <TextField\n          label=\"Font Weight\"\n          variant=\"standard\"\n          defaultValue={diagramConfiguration.fontWeight}\n          onBlur={(e) =>\n            handleNumberChange(parseInt(e.target.value), \"fontWeight\")\n          }\n        />\n      </Row>\n    </Wraper>\n  );\n}\n\nexport default DiagramConfiguration;\n","import { SVG, Svg, G, Gradient } from \"@svgdotjs/svg.js\";\nimport { Chord, Finger } from \"./types\";\n\nexport type ChordDiagramParams = {\n  width: number;\n  height: number;\n  numOfStrings: number;\n  numOfFrets: number;\n  stringWidth: number;\n  fretsWidth: number;\n  showFretsLabels: boolean;\n  showBridgeLabel: boolean;\n  showFingerLabels: boolean;\n  showOpenStringsLabels: boolean;\n  showTuning: boolean;\n  tuning: string[];\n  defaultColor: string;\n  bridgeColor?: string;\n  stringColor?: string;\n  fretColor?: string;\n  textColor?: string;\n  labelColor?: string;\n  fingersColor?: string;\n  fingersLabelColor?: string;\n  backgroundColor: string;\n  fontFamily?: string;\n  fontSize?: number;\n  fontStyle?: string;\n  fontWeight?: string;\n  debugMode?: boolean;\n  animationDuration?: number;\n  forcePosition?: number\n};\n\nexport const defaultParams: ChordDiagramParams = {\n  width: 500,\n  height: 600,\n  numOfStrings: 6,\n  numOfFrets: 5,\n  stringWidth: 1,\n  fretsWidth: 1,\n  showTuning: true,\n  showFretsLabels: false,\n  showBridgeLabel: false,\n  showFingerLabels: true,\n  showOpenStringsLabels: false,\n  tuning: [\"E\", \"A\", \"D\", \"G\", \"B\", \"E\"],\n  defaultColor: \"#666666\",\n  fingersLabelColor: \"#ffffff\",\n  backgroundColor: \"#ffffff\",\n  animationDuration: 500,\n  forcePosition: 0\n};\n\ntype TextAttributes = {\n  family: ChordDiagramParams[\"fontFamily\"];\n  size: ChordDiagramParams[\"fontSize\"];\n  style: ChordDiagramParams[\"fontStyle\"];\n  weight: ChordDiagramParams[\"fontWeight\"];\n  \"text-anchor\": string;\n  opacity: number;\n};\n\nexport class ChordDiagram {\n  private draw: Svg;\n  private params: ChordDiagramParams = defaultParams;\n  private elements: any = {};\n  private calcedParams: any = {};\n  private currentTitle: number = 1;\n\n  constructor(selector: string, params: Partial<ChordDiagramParams> = {}) {\n    this.params = {\n      ...this.params,\n      ...params,\n    };\n    this.draw = SVG()\n      .addTo(selector)\n      .size(this.params.width, this.params.height);\n\n    this.calcedParams.width = this.params.width * 0.75;\n    this.calcedParams.height = this.params.height * 0.75;\n    this.calcedParams.stringSpacing =\n      this.calcedParams.width / this.params.numOfStrings;\n    this.calcedParams.fretSpacing =\n      this.calcedParams.height / (this.params.numOfFrets + 2);\n    this.calcedParams.origin = {\n      x: this.params.width * 0.15 + this.calcedParams.stringSpacing / 2,\n      y: this.params.height * 0.15 + this.calcedParams.fretSpacing,\n    };\n    this.calcedParams.bridgeStrokeWidth = Math.ceil(\n      this.calcedParams.height / 36\n    );\n    this.calcedParams.animationDuration = this.params.animationDuration || 500;\n\n    const fontSize =\n      this.params.fontSize || Math.ceil(this.calcedParams.width / 20);\n    const maxFontSize = Math.max(\n      this.calcedParams.stringSpacing / 2,\n      this.calcedParams.fretSpacing / 2\n    );\n    this.calcedParams.fontSize =\n      fontSize > maxFontSize ? maxFontSize : fontSize;\n  }\n\n  drawText(\n    layer: Svg | G,\n    x: number,\n    y: number,\n    msg: string,\n    color: string | undefined,\n    attrs: Partial<TextAttributes> = {}\n  ) {\n    const textAttrs: any = {\n      family:\n        this.params.fontFamily ||\n        '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n      size: this.calcedParams.fontSize,\n      style: this.params.fontStyle,\n      weight: this.params.fontWeight || \"100\",\n      opacity: 1,\n      ...attrs,\n    };\n\n    const text = layer\n      .text(msg)\n      .stroke(color || this.params.defaultColor)\n      .fill(color || this.params.defaultColor)\n      .font(textAttrs);\n\n    return text.move(x - text.length() / 2, y);\n  }\n\n  drawLine(\n    layer: Svg | G,\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number\n  ) {\n    return layer.line(0, 0, toX - fromX, toY - fromY).move(fromX, fromY);\n  }\n\n  drawCircle(layer: Svg | G, size: number, x: number, y: number) {\n    return layer.circle(size).move(x, y);\n  }\n\n  drawPointAt(x: number, y: number) {\n    this.draw\n      .circle(4, 4)\n      .fill(\"red\")\n      .move(x - 2, y - 2);\n  }\n\n  private printParams() {\n    console.log(\"Calced Params:\");\n    console.table(this.calcedParams);\n    const { strings, frets, layers, ...elements } = this.elements;\n    console.log(\"Strings:\");\n    console.table(strings);\n    console.log(\"Frets:\");\n    console.table(frets);\n    console.log(\"Layers:\");\n    console.table(layers);\n    console.log(\"Other Elements:\");\n    console.table(elements);\n  }\n\n  private debug(points: number[][]) {\n    points.forEach((point, index) => {\n      console.log(`debug point ${index + 1}: ${point[0]}, ${point[1]}`);\n      this.drawPointAt(point[0], point[1]);\n    });\n  }\n\n  drawBaseDiagram() {\n    const baseDiagram = this.draw.group().attr({ id: \"baseDiagram\" });\n\n    //order is important!!\n    this.elements.layers = {\n      baseDiagram: baseDiagram,\n      background: baseDiagram.group().attr({ id: \"background\" }),\n      strings: baseDiagram.group().attr({ id: \"strings\" }),\n      frets: baseDiagram.group().attr({ id: \"frets\" }),\n      fretsCover: baseDiagram.group().attr({ id: \"fretsCover\" }),\n      bridge: baseDiagram.group().attr({ id: \"bridge\" }),\n      bridgeCover: baseDiagram.group().attr({ id: \"bridgeCover\" }),\n      fretLabels: baseDiagram.group().attr({ id: \"fretLabels\" }),\n      fretLabelsCover: baseDiagram.group().attr({ id: \"fretLabelsCover\" }),\n      stringsLabels: baseDiagram.group().attr({ id: \"stringsLabels\" }),\n      barres: baseDiagram.group().attr({ id: \"barres\" }),\n      fingers: baseDiagram.group().attr({ id: \"fingers\" }),\n      stringMarkings: baseDiagram.group().attr({ id: \"stringMarkings\" }),\n      chordTitle1: baseDiagram.group().attr({ id: \"chordTitle1\" }),\n      chordTitle2: baseDiagram.group().attr({ id: \"chordTitle2\" }),\n    };\n\n    const coverTopGradient = this.draw\n      .gradient(\"linear\", (add: Gradient) => {\n        add.stop(0, this.params.backgroundColor);\n        add.stop(0.9, this.params.backgroundColor);\n        add.stop(1, this.params.backgroundColor, 0);\n      })\n      .rotate(90);\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const coverTopGradientDebug = this.draw\n      .gradient(\"linear\", (add: Gradient) => {\n        add.stop(0, \"rgba(255,0,0)\", 0.5);\n        add.stop(0.9, \"rgba(255,0,0)\", 0.5);\n        add.stop(1, \"rgba(0,255,0)\", 0.5);\n      })\n      .rotate(90);\n\n    const coverBottomGradient = this.draw\n      .gradient(\"linear\", (add: Gradient) => {\n        add.stop(0, this.params.backgroundColor, 0);\n        add.stop(0.1, this.params.backgroundColor);\n        add.stop(1, this.params.backgroundColor);\n      })\n      .rotate(90);\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const coverBottomGradientDebug = this.draw\n      .gradient(\"linear\", (add: Gradient) => {\n        add.stop(0, \"rgba(0,255,0)\", 0.5);\n        add.stop(0.1, \"rgba(255,0,0)\", 0.5);\n        add.stop(1, \"rgba(255,0,0)\", 0.5);\n      })\n      .rotate(90);\n\n    const diagramWidth =\n      this.calcedParams.stringSpacing * (this.params.numOfStrings - 1) +\n      this.params.stringWidth;\n    const topDiagramCoverXPosition =\n      this.calcedParams.origin.x - this.params.fretsWidth / 2;\n    const labelCoverWidth =\n      this.calcedParams.origin.x - this.params.fretsWidth / 2;\n    const topLabelCoverHeight =\n      this.calcedParams.origin.y -\n      this.calcedParams.bridgeStrokeWidth / 2 -\n      this.calcedParams.fontSize / 2;\n\n    /****** BACKGROUND ******/\n    this.elements.background = {\n      node: this.elements.layers.background\n        .rect(this.params.width, this.params.height)\n        .stroke({ width: 0 })\n        .fill(this.params.backgroundColor),\n    };\n\n    /****** BRIDGE *****/\n\n    // bridge\n    const bridgeFromX =\n      this.calcedParams.origin.x - this.params.stringWidth / 2;\n    const bridgeFromY =\n      this.calcedParams.origin.y - this.calcedParams.bridgeStrokeWidth;\n    const bridgeHeight = this.calcedParams.origin.y - bridgeFromY;\n    const fretLabelXPosition =\n      this.calcedParams.origin.x -\n      this.calcedParams.fontSize / 1.7 -\n      this.calcedParams.stringSpacing / 4;\n\n    this.elements.bridge = {\n      node: this.elements.layers.bridge\n        .rect(diagramWidth, bridgeHeight)\n        .move(bridgeFromX, bridgeFromY)\n        .stroke({ width: 0 })\n        .fill(this.params.bridgeColor || this.params.defaultColor),\n      label: this.drawText(\n        this.elements.layers.fretLabels,\n        fretLabelXPosition,\n        this.calcedParams.origin.y -\n          this.calcedParams.bridgeStrokeWidth / 2 -\n          this.calcedParams.fontSize * 0.7,\n        \"B\",\n        this.params.textColor,\n        {\n          opacity: this.params.showBridgeLabel ? 1 : 0,\n        }\n      ),\n    };\n\n    // bridge cover\n    const bridgeCoverHeight =\n      this.calcedParams.origin.y - this.calcedParams.bridgeStrokeWidth;\n    this.elements.bridgeCover = {\n      node: this.elements.layers.bridgeCover\n        .rect(diagramWidth, bridgeCoverHeight)\n        .move(topDiagramCoverXPosition, 0)\n        .stroke({ width: 0 })\n        .fill(this.params.backgroundColor),\n    };\n\n    /****** FRETS *****/\n\n    // frets with labels\n    this.elements.frets = [];\n    for (let i = 0; i < 25; i += 1) {\n      const fromY =\n        this.calcedParams.origin.y + this.calcedParams.fretSpacing * i;\n\n      this.elements.frets[i] = {\n        node: this.drawLine(\n          this.elements.layers.frets,\n          this.calcedParams.origin.x,\n          fromY,\n          this.calcedParams.origin.x +\n            this.calcedParams.stringSpacing * (this.params.numOfStrings - 1),\n          fromY\n        ).stroke({\n          width: this.params.fretsWidth,\n          color: this.params.fretColor || this.params.defaultColor,\n        }),\n        label:\n          i === 0\n            ? null\n            : this.drawText(\n                this.elements.layers.fretLabels,\n                fretLabelXPosition,\n                fromY - this.calcedParams.fretSpacing / 2 - this.calcedParams.fontSize * 0.75,\n                i.toString(),\n                this.params.textColor,\n                {\n                  opacity: i === 1 && !this.params.showFretsLabels ? 0 : 1\n                }\n              ),\n      };\n    }\n\n    // frets top cover\n    const fretsCoverTopHeight =\n      this.calcedParams.origin.y - this.params.fretsWidth / 2;\n    this.elements.fretsCoverTop = {\n      node: this.elements.layers.fretsCover\n        .rect(diagramWidth, fretsCoverTopHeight)\n        .move(topDiagramCoverXPosition, 0)\n        .stroke({ width: 0 })\n        .fill(this.params.backgroundColor),\n    };\n\n    // frets bottom cover\n    const fretsCoverBottomHeight =\n      this.params.height - this.calcedParams.height + this.params.fretsWidth;\n    const fretsCoverBottomYPosition =\n      this.calcedParams.origin.y +\n      this.calcedParams.fretSpacing * this.params.numOfFrets +\n      this.params.fretsWidth / 2;\n    this.elements.fretsCoverBottom = {\n      node: this.elements.layers.fretsCover\n        .rect(this.params.width, fretsCoverBottomHeight)\n        .move(0, fretsCoverBottomYPosition)\n        .stroke({ width: 0 })\n        .fill(this.params.backgroundColor),\n    };\n\n    // frets top label cover\n    this.elements.fretsLabelCoverTop = {\n      node: this.elements.layers.fretLabelsCover\n        .rect(labelCoverWidth, topLabelCoverHeight + this.calcedParams.fontSize / 2.5)\n        .stroke({ width: 0 })\n        .fill(coverTopGradient),\n    };\n\n    // frets bottom label cover\n    this.elements.fretsLabelCoverBottom = {\n      node: this.elements.layers.fretLabelsCover\n        .rect(labelCoverWidth, topLabelCoverHeight + this.calcedParams.fontSize)\n        .move(0, fretsCoverBottomYPosition - this.calcedParams.fontSize * 1.3)\n        .stroke({ width: 0 })\n        .fill(coverBottomGradient),\n    };\n\n    // frets side label cover\n    if (!this.params.showFretsLabels) {\n      this.elements.fretsLabelCoverSide = {\n        node: this.elements.layers.fretLabelsCover\n          .rect(labelCoverWidth, topLabelCoverHeight)\n          .move(0, this.calcedParams.origin.y + this.calcedParams.fontSize * 2)\n          .stroke({ width: 0 })\n          .fill(coverBottomGradient),\n      };\n      this.elements.fretsLabelCoverSide = {\n        node: this.elements.layers.fretLabelsCover\n          .rect(labelCoverWidth, this.calcedParams.height)\n          .move(0, this.calcedParams.origin.y + topLabelCoverHeight)\n          .stroke({ width: 0 })\n          .fill(this.params.backgroundColor),\n      };\n    }\n\n    /****** STRINGS *****/\n\n    // strings with labels\n    this.elements.strings = [];\n    for (let i = 0; i < this.params.numOfStrings; i += 1) {\n      this.elements.strings[i] = {\n        node: this.drawLine(\n          this.elements.layers.strings,\n          this.calcedParams.origin.x + this.calcedParams.stringSpacing * i,\n          this.calcedParams.origin.y,\n          this.calcedParams.origin.x + this.calcedParams.stringSpacing * i,\n          this.calcedParams.origin.y +\n            this.calcedParams.fretSpacing * this.params.numOfFrets\n        ).stroke({\n          width: this.params.stringWidth,\n          color: this.params.stringColor || this.params.defaultColor,\n        }),\n        label: this.drawText(\n          this.elements.layers.stringsLabels,\n          this.calcedParams.origin.x + this.calcedParams.stringSpacing * i,\n          this.calcedParams.origin.y +\n            this.calcedParams.fretSpacing * this.params.numOfFrets +\n            10,\n          this.params.tuning[i],\n          this.params.textColor,\n          {\n            opacity: this.params.showTuning ? 1 : 0,\n          }\n        ),\n      };\n    }\n\n    /****** FINGERS *****/\n\n    // fingers with labels\n    this.elements.fingers = [];\n    this.elements.barres = []\n    for (let i = 1; i < 5; i += 1) {\n      const [fingerBasePositionX, fingerBasePositionY] =\n      this.getFingerBasePosition(i);\n\n      const barreLayerName = \"barre\" + i;\n        this.elements.layers[barreLayerName] = this.elements.layers.barres\n        .group()\n        .attr({ id: barreLayerName })\n        .opacity(0);\n      this.elements.barres[i] = {\n        node: this.drawLine(\n          this.elements.layers[barreLayerName],\n          fingerBasePositionX + this.calcedParams.stringSpacing / 4,\n          fingerBasePositionY + this.calcedParams.fretSpacing / 4,\n          fingerBasePositionX + this.calcedParams.stringSpacing / 4,\n          fingerBasePositionY + this.calcedParams.fretSpacing / 4\n        ).stroke({\n          width: this.calcedParams.fretSpacing / 2,\n          color: this.params.fingersColor || this.params.defaultColor,\n          linecap: 'round'\n        }),\n        label: null,\n      };\n\n      const fingerLayerName = \"finger\" + i;\n      this.elements.layers[fingerLayerName] = this.elements.layers.fingers\n        .group()\n        .attr({ id: fingerLayerName })\n        .opacity(0);\n      this.elements.fingers[i] = {\n        node: this.drawCircle(\n          this.elements.layers[fingerLayerName],\n          this.calcedParams.fretSpacing / 2,\n          fingerBasePositionX,\n          fingerBasePositionY\n        ).fill(this.params.fingersColor || this.params.defaultColor),\n        label: this.drawText(\n          this.elements.layers[fingerLayerName],\n          fingerBasePositionX + this.calcedParams.fretSpacing / 3.9,\n          this.calcedParams.origin.y +\n            this.calcedParams.fretSpacing * (i - 1) +\n            this.calcedParams.fretSpacing / 3.2,\n          i.toString(),\n          this.params.fingersLabelColor,\n          {\n            size: this.calcedParams.fretSpacing / 3.4,\n            opacity: this.params.showFingerLabels ? 1 : 0,\n          }\n        ),\n      };\n    }\n\n    // string markings with labels\n    this.elements.openStringMarkins = [];\n    this.elements.mutedStringMarkings = [];\n    for (let i = 1; i <= this.params.numOfStrings; i += 1) {\n      const openStringMarkingLayerName = \"openStringMarking\" + i;\n      this.elements.layers[openStringMarkingLayerName] =\n        this.elements.layers.stringMarkings\n          .group()\n          .attr({ id: openStringMarkingLayerName })\n          .opacity(0);\n      this.elements.openStringMarkins[i] = {\n        node: this.drawCircle(\n          this.elements.layers[openStringMarkingLayerName],\n          this.calcedParams.fretSpacing / 3,\n          this.calcedParams.origin.x +\n            this.calcedParams.stringSpacing * (i - 1) -\n            this.calcedParams.fretSpacing / 6,\n          this.getOpenStringMarkingBaseYPosition()\n        )\n          .stroke(this.params.defaultColor)\n          .fill(this.params.backgroundColor),\n        label: this.drawText(\n          this.elements.layers[openStringMarkingLayerName],\n          this.calcedParams.origin.x +\n            this.calcedParams.stringSpacing * (i - 1),\n          this.calcedParams.origin.y -\n            this.calcedParams.bridgeStrokeWidth -\n            this.calcedParams.fretSpacing * 0.95,\n          this.params.tuning[i - 1],\n          this.params.defaultColor,\n          {\n            size: this.calcedParams.fretSpacing / 5,\n            opacity: this.params.showOpenStringsLabels ? 1 : 0,\n          }\n        ),\n      };\n      const mutedStringMarkingLayerName = \"mutedStringMarking\" + i;\n      this.elements.layers[mutedStringMarkingLayerName] =\n      this.elements.layers.stringMarkings\n          .group()\n          .attr({ id: mutedStringMarkingLayerName })\n          .opacity(0);\n      this.elements.mutedStringMarkings[i] = {\n        node: null,\n        label: this.drawText(\n          this.elements.layers[mutedStringMarkingLayerName],\n          this.calcedParams.origin.x +\n            this.calcedParams.stringSpacing * (i - 1),\n          this.getMutedStringMarkingBaseYPosition(),\n          \"X\",\n          this.params.defaultColor,\n          {\n            size: this.calcedParams.fretSpacing / 3,\n          }\n        ),\n      };\n    }\n\n    //string markings cover\n    this.elements.stringMarkingCover = {\n      node: this.elements.layers.stringMarkings\n        .rect(this.params.width, this.calcedParams.origin.y - this.calcedParams.stringSpacing * 0.75)\n        .stroke({ width: 0 })\n        .fill(this.params.backgroundColor)\n    };\n\n    this.moveDiagramToFret(this.params.forcePosition || 0);\n\n    this.params.debugMode && this.printParams();\n  }\n\n  getOpenStringMarkingBaseYPosition() {\n    return (\n      this.calcedParams.origin.y -\n      this.calcedParams.bridgeStrokeWidth -\n      this.calcedParams.fretSpacing\n    );\n  }\n\n  getMutedStringMarkingBaseYPosition() {\n    return (\n      this.calcedParams.origin.y -\n      this.calcedParams.bridgeStrokeWidth -\n      this.calcedParams.fretSpacing * 1.05\n    );\n  }\n\n  getFingerBasePosition(fingerIndex: number) {\n    const x =\n      this.calcedParams.origin.x +\n      this.calcedParams.stringSpacing * (this.params.numOfStrings - 0.5);\n    const y =\n      this.calcedParams.origin.y +\n      this.calcedParams.fretSpacing * (fingerIndex - 1) +\n      this.calcedParams.fretSpacing / 4;\n    return [x, y];\n  }\n\n  getFingerChordPosition(chordPosition: number, finger: Finger) {\n    const { string, fret } = finger;\n    const actualString = Array.isArray(string) ? string[0] : string;\n    const isForcePositionExists = this.params.forcePosition !== undefined && !isNaN(this.params.forcePosition);\n    const chordPositionAdd = chordPosition <= 1 ? 0 : -chordPosition + 1;\n    const forcePositionAdd = this.params.forcePosition! <= 1 ? 0 :  -this.params.forcePosition! + 1;\n    const finalAdd = isForcePositionExists ? forcePositionAdd : chordPositionAdd;\n    console.log(finalAdd);\n    const moveToX =\n      this.calcedParams.origin.x +\n        ((this.params.numOfStrings - actualString - (1.25 / this.params.numOfFrets)) *\n        this.calcedParams.stringSpacing);\n    const moveToY =\n      this.calcedParams.origin.y +\n        ((fret + finalAdd - 0.75) *\n        this.calcedParams.fretSpacing);\n    let barreLength;\n    if (Array.isArray(string) && string[1]) {\n      barreLength = this.calcedParams.stringSpacing * (string[0] - string[1]) + this.calcedParams.stringSpacing / 4\n    }\n    // console.log(\"CP:\"+chordPosition)\n    // console.log(\"STR:\"+string)\n    // console.log(\"FP:\"+fretPosition)\n    // console.log(\"IFP:\"+isForcePositionExists)\n    // console.log(\"FPA:\"+forcePositionAdd)\n    // console.log(\"FA:\"+finalAdd)\n    return [moveToX, moveToY, barreLength];\n  }\n\n  moveDiagramToFret(fretNumber: number, animate?: boolean) {\n    const maxStartFret = 25 - this.params.numOfFrets;\n    const topFretLine = fretNumber - 1;\n    if (topFretLine > maxStartFret || topFretLine < 0) {\n      console.error(`Fret number should be between 1 to ${maxStartFret}`);\n      return;\n    }\n\n    const bridgeTopY =\n      this.calcedParams.origin.y - this.calcedParams.bridgeStrokeWidth;\n    const labelsTopY =\n      this.calcedParams.origin.y - this.calcedParams.fontSize * 0.9;\n    if (animate) {\n      this.elements.layers.bridge\n        .animate(this.calcedParams.animationDuration)\n        .y(bridgeTopY - this.calcedParams.fretSpacing * topFretLine);\n      this.elements.layers.frets\n        .animate(this.calcedParams.animationDuration)\n        .y(\n          this.calcedParams.origin.y -\n            this.calcedParams.fretSpacing * topFretLine\n        );\n      this.elements.layers.fretLabels\n        .animate(this.calcedParams.animationDuration)\n        .y(labelsTopY - this.calcedParams.fretSpacing * topFretLine);\n    } else {\n      this.elements.layers.bridge.y(\n        bridgeTopY - this.calcedParams.fretSpacing * topFretLine\n      );\n      this.elements.layers.frets.y(\n        this.calcedParams.origin.y - this.calcedParams.fretSpacing * topFretLine\n      );\n      this.elements.layers.fretLabels.y(\n        labelsTopY - this.calcedParams.fretSpacing * topFretLine\n      );\n    }\n  }\n\n  drawChord(chord: Chord, animate?: boolean) {\n    console.log(chord);\n    if (this.params.forcePosition === undefined || isNaN(this.params.forcePosition)) {\n      this.moveDiagramToFret(chord.startFret, animate);\n    }\n\n    for (let i = 1; i < 5; i++) {\n      const finger = chord.fingers.find((finger: Finger) => finger.index === i);\n      if (finger) {\n        const [x,y, barreLength] = this.getFingerChordPosition(chord.startFret, finger)\n        if (animate) {\n          this.elements.layers[\"finger\" + i]\n            .animate(this.calcedParams.animationDuration)\n            .move(x,y)\n            .opacity(1);\n            if (barreLength) {\n              this.elements.layers[\"barre\" + i]\n              .animate(this.calcedParams.animationDuration)\n              .move(x + this.calcedParams.stringSpacing / 4, y + this.calcedParams.fretSpacing / 4)\n              .opacity(1);\n              this.elements.barres[i].node\n              .animate(this.calcedParams.animationDuration)\n              .attr({x1: x + barreLength})\n            } else {\n              this.elements.layers[\"barre\" + i]\n              .animate(this.calcedParams.animationDuration)\n              .move(x, y + this.calcedParams.fretSpacing / 4)\n              .opacity(1);\n              this.elements.barres[i].node\n              .animate(this.calcedParams.animationDuration)\n              .attr({x1: x + this.calcedParams.fretSpacing / 4, x2: x + this.calcedParams.fretSpacing / 4})\n            }\n        } else {\n          this.elements.layers[\"finger\" + i]\n            .move(x,y)\n            .opacity(1);\n          if (barreLength) {\n            this.elements.layers[\"barre\" + i]\n            .move(x + this.calcedParams.stringSpacing / 4, y + this.calcedParams.fretSpacing / 4)\n            .opacity(1);\n            this.elements.barres[i].node.attr({x1: x + barreLength})\n          }\n        }\n      } else {\n        const [x, y] = this.getFingerBasePosition(i)\n        if (animate) {\n          this.elements.layers[\"finger\" + i]\n            .animate(this.calcedParams.animationDuration)\n            .move(x,y)\n            .opacity(0);\n            this.elements.layers[\"barre\" + i]\n              .animate(this.calcedParams.animationDuration)\n              .move(x + this.calcedParams.stringSpacing /4 ,y + this.calcedParams.fretSpacing /4 )\n              .opacity(0);\n        } else {\n          this.elements.layers[\"finger\" + i]\n            .move(x,y)\n            .opacity(0);\n            this.elements.layers[\"barre\" + i]\n            .move(x + this.calcedParams.stringSpacing /4 ,y + this.calcedParams.fretSpacing /4 )\n              .opacity(0);\n        }\n      }\n    }\n\n    for (let i = 1; i <= this.params.numOfStrings; i++) {\n      if (chord.mutedStrings.includes(this.params.numOfStrings - i + 1)) {\n        if (animate) {\n          this.elements.layers[\"mutedStringMarking\" + i]\n            .animate(this.calcedParams.animationDuration)\n            .y(\n              this.calcedParams.origin.y -\n                this.calcedParams.bridgeStrokeWidth -\n                this.calcedParams.fretSpacing * 0.53\n            )\n            .opacity(1);\n        } else {\n          this.elements.layers[\"mutedStringMarking\" + i]\n            .y(\n              this.calcedParams.origin.y -\n                this.calcedParams.bridgeStrokeWidth -\n                this.calcedParams.fretSpacing * 0.53\n            )\n            .opacity(1);\n        }\n      } else {\n        if (animate) {\n          this.elements.layers[\"mutedStringMarking\" + i]\n            .animate(this.calcedParams.animationDuration)\n            .y(this.getMutedStringMarkingBaseYPosition())\n            .opacity(0);\n        } else {\n          this.elements.layers[\"mutedStringMarking\" + i]\n            .y(this.getMutedStringMarkingBaseYPosition())\n            .opacity(0);\n        }\n      }\n\n      if (chord.openStrings.includes(this.params.numOfStrings - i + 1)) {\n        if (animate) {\n          this.elements.layers[\"openStringMarking\" + i]\n            .animate(this.calcedParams.animationDuration)\n            .y(\n              this.calcedParams.origin.y -\n                this.calcedParams.bridgeStrokeWidth -\n                this.calcedParams.fretSpacing * 0.5\n            )\n            .opacity(1);\n        } else {\n          this.elements.layers[\"openStringMarking\" + i]\n            .y(\n              this.calcedParams.origin.y -\n                this.calcedParams.bridgeStrokeWidth -\n                this.calcedParams.fretSpacing * 0.5\n            )\n            .opacity(1);\n        }\n      } else {\n        if (animate) {\n          this.elements.layers[\"openStringMarking\" + i]\n            .animate(this.calcedParams.animationDuration)\n            .y(this.getOpenStringMarkingBaseYPosition())\n            .opacity(0);\n        } else {\n          this.elements.layers[\"openStringMarking\" + i]\n            .y(this.getOpenStringMarkingBaseYPosition())\n            .opacity(0);\n        }\n      }\n    }\n\n\n      this.moveOldTitle(this.currentTitle);\n      this.currentTitle = this.currentTitle % 2 + 1;\n      this.drawChordTitle(chord.title, this.currentTitle, animate);\n  }\n\n  moveOldTitle(chordTitleNumber: number, animate?: boolean) {\n    if (animate) {\n      this.elements.layers[\"chordTitle\" + chordTitleNumber].animate(this.calcedParams.animationDuration / 2).x(-this.calcedParams.width / 4).opacity(0);\n    }\n    else {\n      this.elements.layers[\"chordTitle\" + chordTitleNumber].x(-this.calcedParams.width / 4).opacity(0);\n    }\n    setTimeout(() => {\n      this.elements.layers[\"chordTitle\" + chordTitleNumber].opacity(1).x(0).clear();\n    }, this.calcedParams.animationDuration / 2)\n  }\n\n  drawChordTitle(title: string, chordTitleNumber: number, animate?: boolean) {\n    this.elements.layers[\"chordTitle\" + chordTitleNumber].opacity(1);\n    if (animate) {\n        this.elements[\"chordTitle\" + chordTitleNumber] = this.drawText(\n          this.elements.layers[\"chordTitle\" + chordTitleNumber],\n          this.params.width,\n          this.calcedParams.origin.y / 5,\n          title,\n          this.params.defaultColor,\n          {\n            size: this.calcedParams.fontSize * 3,\n          }\n        )\n          .attr({ opacity: 0 })\n\n        this.elements[\"chordTitle\" + chordTitleNumber]   \n          .animate(this.calcedParams.animationDuration / 2)\n          .x(this.params.width / 2 - this.elements[\"chordTitle\" + chordTitleNumber].length() / 2)\n          .attr({ opacity: 1 });\n      \n    } else {\n      this.elements[\"chordTitle\" + chordTitleNumber] = this.drawText(\n        this.elements.layers[\"chordTitle\" + chordTitleNumber],\n        this.params.width / 2,\n        this.calcedParams.origin.y / 5,\n        title,\n        this.params.defaultColor,\n        {\n          size: this.calcedParams.fontSize * 3,\n        }\n      );\n    }\n  }\n}\n","//@ts-ignore;\nimport { findGuitarChord } from \"chord-fingering\";\nimport { Finger, Chord } from \"./types\";\n\ntype Position = {\n  fret: number;\n  note: string;\n  stringIndex: number;\n  stringNote: string;\n};\n\ntype Barre = {\n    fret: number,\n    stringIndices: [number, number]\n}\n\ntype Fingering = {\n  positions: Position[],\n  barre: Barre\n}\n\nconst sortFingers = (fingerA: Finger, fingerB: Finger): number => {\n  const fingerAString = Array.isArray(fingerA.string) ? fingerA.string[0] : fingerA.string;\n  const fingerBString = Array.isArray(fingerB.string) ? fingerB.string[0] : fingerB.string;\n  return fingerA.fret === fingerB.fret ? fingerBString - fingerAString : fingerA.fret - fingerB.fret;\n};\n\nexport const getEmptyChordObject = (title: string = \"\"): Chord => ({\n  title,\n  fingers: [],\n  startFret: 0,\n  mutedStrings: [],\n  openStrings: [],\n});\nexport function chordToString(chord: Chord): string {\n  let string = \"\";\n\n  string += chord.title;\n\n  return string;\n}\n\n\nfunction getChordFromFingering(chordTitle: string, fingering: Fingering): Chord {\n  if (!fingering) return getEmptyChordObject(chordTitle);\n  // console.log(fingering);\n  const { positions, barre }: Fingering = fingering;\n  const openStrings: number[] = [];\n  const mutedStrings: number[] = [1, 2, 3, 4, 5, 6];\n  const fingers: Finger[] = [];\n  let currentBarre: [number, number] | null = null\n  let currentBarreFret: number | null = null;\n  let startFret: number = 0;\n\n  positions.reverse().forEach((position: Position) => {\n    const { fret, stringIndex } = position;\n    if (startFret === 0 || (fret !== 0 && startFret > fret)) {\n      startFret = fret;\n    }\n\n    let string: Finger[\"string\"] = 6 - stringIndex;\n    if (barre && barre.fret === fret && !currentBarre) {\n      currentBarreFret = barre.fret;\n      currentBarre = [6 - barre.stringIndices[0], 6 - barre.stringIndices[barre.stringIndices.length - 1]];\n      string = currentBarre;\n    }\n\n    if (fret === 0) {\n      openStrings.push(6 - stringIndex);\n    } else {\n      fingers.push({\n        index: 0,\n        string: string,\n        fret,\n      });\n    }\n\n    if (mutedStrings.includes(6 - stringIndex)) {\n      mutedStrings.splice(mutedStrings.indexOf(6 - stringIndex), 1);\n    }\n  });\n\n  const filteredFingers: Finger[] = fingers.filter(finger => {\n    return !currentBarre || currentBarreFret !== finger.fret ||\n        (Array.isArray(finger.string) && currentBarreFret === finger.fret && currentBarre[0] === finger.string[0]);\n  })\n      .sort(sortFingers)\n      .map((finger, index) => ({...finger, index: index + 1}))\n\n  return {\n    title: chordTitle,\n    fingers: filteredFingers,\n    startFret: startFret === 1000 ? 1 : startFret,\n    mutedStrings,\n    openStrings,\n  };\n}\n\nexport const getEmptyChordConfiguration = (title: string = \"\"): ConfigurableChord => ({\n  string: title,\n  title: title,\n  availablePositions: [],\n  selectedPosition: 1,\n  chords: []\n});\n\nexport type ConfigurableChord = {\n  string: string,\n  title: string,\n  availablePositions: number[],\n  selectedPosition: number,\n  chords: Chord[]\n}\n\nexport function stringToConfigurableChord(chordTitle: string): ConfigurableChord {\n  const chordFingerings = findGuitarChord(chordTitle);\n  if (!chordFingerings) return getEmptyChordConfiguration(chordTitle);\n\n  const chords = chordFingerings.fingerings.map((fingering: Fingering) => getChordFromFingering(chordTitle, fingering));\n\n  return {\n    string: chordTitle,\n    title: chordTitle,\n    availablePositions: chordFingerings.fingerings.map((_: any, index: number) => index + 1),\n    selectedPosition: 1,\n    chords: chords\n  }\n}\n\nexport function arrayToConfigurableChords(chords: string[]): ConfigurableChord[] {\n  return chords.map(chord => {\n      return stringToConfigurableChord(chord);\n  })\n}\n","import React, { ChangeEvent, useState } from \"react\";\nimport styled from \"@emotion/styled\";\nimport TextField from \"@mui/material/TextField\";\nimport { ConfigurableChord, stringToConfigurableChord } from \"../ChordDiagram\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\n\nconst ChordConfigurationWrapper = styled.div`\n  padding: 20px;\n  display: flex;\n  gap: 20px;\n  border-radius: 20px;\n  border: 1px solid gray;\n  margin: 20px;\n  position: relative;\n`;\n\nconst ChordLabel = styled.div`\n  position: absolute;\n  top: -10px;\n  background-color: gray;\n  border-radius: 50%;\n  width: 20px;\n  height: 20px;\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 0.6em;\n`;\n\nconst StyledTextField = styled(TextField)`\n  flex-grow: 1;\n`;\n\nconst StyledAutoComplete = styled(Autocomplete)<{width: string}>`\n  width: ${({width}) => width};\n`;\n\ntype ChordConfigurationProps = {\n  index: number;\n  chordConfiguration: ConfigurableChord;\n  onChange: (chord: ConfigurableChord, index: number) => void;\n  removeChord: (index: number) => void;\n};\n\nfunction ChordConfigurationPanel(props: ChordConfigurationProps) {\n  const [config, setConfig] = useState<ConfigurableChord>(props.chordConfiguration);\n\n  const handleChordTitleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setConfig(stringToConfigurableChord(e.target.value));\n  }\n\n  return (\n    <ChordConfigurationWrapper>\n      <ChordLabel>{props.index + 1}</ChordLabel>\n      <StyledTextField\n        label=\"Chord\"\n        variant=\"standard\"\n        value={config.title}\n        onChange={handleChordTitleChange}\n        onBlur={() => props.onChange(config, props.index)}\n        helperText=\"Changing this value will reset the other fields\"\n      />\n      <StyledAutoComplete\n        width=\"50px\"\n        options={config.availablePositions}\n        value={config.selectedPosition}\n        renderInput={(params) => (\n          <TextField {...params} label=\"Position\" variant=\"standard\" />\n        )}\n      />\n    </ChordConfigurationWrapper>\n  );\n}\n\nexport default ChordConfigurationPanel;","import React, { ChangeEvent } from \"react\";\nimport styled from \"@emotion/styled\";\nimport ChordConfigurationPanel from \"./ChordConfigurationPanel\";\nimport TextField from \"@mui/material/TextField\";\nimport { arrayToConfigurableChords, ConfigurableChord, getEmptyChordConfiguration } from \"../ChordDiagram\";\n\nconst StyledButton = styled.button`\n  padding: 5px;\n  align-self: flex-end;\n  background-color: #ffffff;\n`;\n\nconst ButtonWrapper = styled.div`\n  position: sticky;\n  bottom: 0;\n  background: linear-gradient(to bottom, transparent, #eeeeee 30%);\n  padding: 30px 20px 20px;\n  display: flex;\n  justify-content: flex-end;\n`;\n\nconst InputWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 20px;\n`;\n\nconst StyledTextField = styled(TextField)`\n  background-color: rgba(25, 118, 210, 0.1);\n`;\n\ntype ConfigurationPanelProps = {\n  chordsConfigurations: ConfigurableChord[];\n  setChordsConfigurations: (chords: ConfigurableChord[]) => void;\n};\n\nfunction ChordsSequence(props: ConfigurationPanelProps) {\n  const handleChange = (chord: ConfigurableChord, index: number) => {\n    const newChords = [...props.chordsConfigurations];\n    newChords[index] = chord;\n    props.setChordsConfigurations(newChords);\n  };\n\n  const addChord = () => {\n    props.setChordsConfigurations([...props.chordsConfigurations, getEmptyChordConfiguration()]);\n  };\n\n  const removeChord = (index: number) => {\n    const newChords = [...props.chordsConfigurations];\n    newChords.splice(index, 1);\n    props.setChordsConfigurations(newChords);\n  };\n\n  const handleTextChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const chordArray = e.target.value === \"\" ? [\"\"] : e.target.value.replace(\"\\n\", \" \").split(\" \");\n    props.setChordsConfigurations(arrayToConfigurableChords(chordArray));\n}\n\n  return (\n    <>\n      <InputWrapper>\n        <StyledTextField\n          label={\"Chord Sequence Text Input\"}\n          value={props.chordsConfigurations.map(config => config.title).join(\" \")}\n          onChange={handleTextChange}\n          multiline\n        />\n      </InputWrapper>\n      {props.chordsConfigurations.map((config, index) => (\n        <ChordConfigurationPanel\n          key={index}\n          index={index}\n          chordConfiguration={config}\n          onChange={handleChange}\n          removeChord={removeChord}\n        />\n      ))}\n      <ButtonWrapper>\n        <StyledButton onClick={addChord}>+Add Chord</StyledButton>\n      </ButtonWrapper>\n    </>\n  );\n}\n\nexport default ChordsSequence;\n","import React from \"react\";\nimport Tabs from \"@mui/material/Tabs\";\nimport Tab from \"@mui/material/Tab\";\nimport Box from \"@mui/material/Box\";\nimport styled from \"@emotion/styled\";\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nconst StyledPanel = styled.div`\n  background-color: #eeeeee;\n  flex-grow: ${({ hidden }) => (hidden ? 0 : 1)};\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  overflow-y: auto;\n`;\n\nconst StylePanelContentWrapper = styled(Box)`\n  padding: 0;\n  width: 100%;\n`;\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index } = props;\n\n  return (\n    <StyledPanel role=\"tabpanel\" hidden={value !== index}>\n      {value === index && (\n        <StylePanelContentWrapper>{children}</StylePanelContentWrapper>\n      )}\n    </StyledPanel>\n  );\n}\n\nconst StyleTabsWrapper = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\ntype BasicTabsProps = {\n  tabs: {\n    title: string;\n    content: any;\n  }[];\n};\n\nfunction BasicTabs({ tabs }: BasicTabsProps) {\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\n    setValue(newValue);\n  };\n\n  return (\n    <StyleTabsWrapper>\n      <Box sx={{ borderBottom: 1, borderColor: \"divider\" }}>\n        <Tabs variant=\"fullWidth\" value={value} onChange={handleChange}>\n          {tabs.map((tab, index) => (\n            <Tab label={tab.title} key={index} />\n          ))}\n        </Tabs>\n      </Box>\n      {tabs.map((tab, index) => (\n        <TabPanel value={value} index={index} key={index}>\n          {tab.content}\n        </TabPanel>\n      ))}\n    </StyleTabsWrapper>\n  );\n}\n\nexport default BasicTabs;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport DiagramConfiguration from \"./DiagramConfiguration\";\nimport ChordsSequence from \"./ChordsSequence\";\nimport BasicTabs from \"./layout/BasicTabs\";\nimport { ChordDiagramParams, ConfigurableChord } from \"../ChordDiagram\";\n\nconst Wrapper = styled.div`\n  height: 100%;\n  width: 30vw;\n`;\n\ntype ConfigurationPanelProps = {\n  chords: ConfigurableChord[];\n  setChords: (chords: ConfigurableChord[]) => void;\n  diagramConfiguration: ChordDiagramParams;\n  setDiagramConfiguration: (configuration: ChordDiagramParams) => void;\n};\n\nfunction ConfigurationPanel(props: ConfigurationPanelProps) {\n  return (\n    <Wrapper>\n      <BasicTabs\n        tabs={[\n          {\n            title: \"Chords Sequencer\",\n            content: (\n              <ChordsSequence\n                chordsConfigurations={props.chords}\n                setChordsConfigurations={props.setChords}\n              />\n            ),\n          },\n          {\n            title: \"Diagram Configuration\",\n            content: (\n              <DiagramConfiguration\n                diagramConfiguration={props.diagramConfiguration}\n                setDiagramConfiguration={props.setDiagramConfiguration}\n              />\n            ),\n          }\n        ]}\n      />\n    </Wrapper>\n  );\n}\n\nexport default ConfigurationPanel;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport styled from \"@emotion/styled\";\nimport { Chord, ChordDiagram, ChordDiagramParams } from \"../ChordDiagram\";\nimport Button from \"@mui/material/Button\";\n\nconst MainChordWrapper = styled.div`\n  height: 100%;\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  position: absolute;\n  bottom: 0;\n  padding: 20px;\n`;\n\nconst ChordDiagramWrapper = styled.div<{ debugMode: boolean | undefined }>`\n  ${({ debugMode }) => (debugMode ? \"border: 1px solid red;\" : null)}\n`;\n\ntype MainChordProps = {\n  diagramConfiguration: ChordDiagramParams;\n  chords: Chord[];\n};\n\nfunction MainChord(props: MainChordProps) {\n  const diagramWrapper = useRef<HTMLDivElement>(null);\n  const chordDiagram = useRef<ChordDiagram | null>(null);\n  const [currentChord, setCurrentChord] = useState<number>(0);\n\n  const chord = props.chords[currentChord];\n\n  useEffect(() => {\n    if (diagramWrapper.current) {\n      diagramWrapper.current.innerHTML = \"\";\n      chordDiagram.current = new ChordDiagram(\n        \"#main-chord-diagram-wrapper\",\n        props.diagramConfiguration\n      );\n    }\n\n    if (chordDiagram.current) {\n      chordDiagram.current.drawBaseDiagram();\n    }\n  }, [props.diagramConfiguration]);\n\n  useEffect(() => {\n    if (chordDiagram.current !== null) {\n      if (chord) {\n        chordDiagram.current.drawChord(chord, true);\n      } else {\n        // TODO - Show the user that the chord is invalid\n      }\n    }\n\n  }, [chord]);\n\n  const handleMoveChord = (direction: number) => {\n    if (currentChord + direction < 0) {\n      setCurrentChord(props.chords.length - 1);\n    } else if (currentChord + direction === props.chords.length) {\n      setCurrentChord(0);\n    } else {\n      setCurrentChord(currentChord + direction);\n    }\n  };\n\n  return (\n    <MainChordWrapper>\n      <ChordDiagramWrapper\n        id={\"main-chord-diagram-wrapper\"}\n        ref={diagramWrapper}\n        debugMode={props.diagramConfiguration.debugMode}\n      />\n      <ButtonContainer>\n        <Button onClick={() => handleMoveChord(-1)}>\n          &lt;-- Previous Chord\n        </Button>\n        <Button onClick={() => handleMoveChord(1)}>Next Chord --&gt;</Button>\n      </ButtonContainer>\n    </MainChordWrapper>\n  );\n}\n\nexport default MainChord;\n","import {tokenizer} from './tokenizer';\nimport {parser} from './parser';\n\n// const chordsfreeText = `\n// Let it be\n// 4X4\n// Opening\n// ||: C G | 2(Am) Fmaj7 F6  |\n// |  C  G | 2(F) Em Dm 4(C) ||\n\n// Verse\n// ||: C G  | Am Fmaj7 | C G | F . Em Dm C . . . :||\n\n// Chorus\n// ||: Am G | F    C   | C G | F . Em Dm C . . . :||\n// `;\n\n// const chords = `|: C G | Am Am Fmaj7 F6  |  C  G | F F Em Dm C C C C :|`;\n\n\nexport const parseChords = (input: string) => {\n    const tokens = tokenizer(input);\n    const ast = parser(tokens);\n    \n    // currently only supports bars\n    console.log(ast);\n    // @ts-ignore\n    return ast.body.filter(node => node.type === 'bar').flatMap(node => node.chords.map(chord => chord.value));\n}\n","// @ts-nocheck\nexport function tokenizer(input) {\n    let current = 0;\n    let tokens = [];\n  \n    // We start by creating a `while` loop where we are setting up our `current`\n    // variable to be incremented as much as we want `inside` the loop.\n    //\n    // We do this because we may want to increment `current` many times within a\n    // single loop because our tokens can be any length.\n    while (current < input.length) {\n      // We're also going to store the `current` character in the `input`.\n      let char = input[current];\n  \n      if (char === \"|\") {\n        if (input[current + 1] === \"|\") {\n          tokens.push({\n            type: \"double barline\",\n            value: \"||\",\n          });\n          current++;\n        } else {\n          tokens.push({\n            type: \"barline\",\n            value: \"|\",\n          });\n        }\n  \n        current++;\n        continue;\n      }\n  \n      // we're now going to check for whitespace. This is interesting\n      // because we care that whitespace exists to separate characters, but it\n      // isn't actually important for us to store as a token. We would only throw\n      // it out later.\n      //\n      // So here we're just going to test for existence and if it does exist we're\n      // going to just `continue` on.\n      let WHITESPACE = /\\s/;\n      if (WHITESPACE.test(char)) {\n        current++;\n        continue;\n      }\n  \n      if (char === \":\") {\n        // TODO - take care of this later\n        current++;\n        continue;\n      }\n  \n      if (char === \".\") {\n        // Consider putting here the chord itself\n        tokens.push({\n          type: \"dot\",\n          value: \".\",\n        });\n      }\n  \n      let CHORD = /[a-zA-Z0-9#-+()]/i;\n      if (CHORD.test(char)) {\n        let value = \"\";\n  \n        // Again we're just going to loop through all the letters pushing them to\n        // a value.\n        while (CHORD.test(char)) {\n          value += char;\n          char = input[++current];\n        }\n  \n        tokens.push({ type: \"chord\", value });\n  \n        continue;\n      }\n  \n      // Finally if we have not matched a character by now, we're going to throw\n      // an error and completely exit.\n      throw new TypeError(\"I dont know what this character is: \" + char);\n    }\n  \n    // Then at the end of our `tokenizer` we simply return the tokens array.\n    return tokens;\n  }\n  ","// @ts-nocheck\nexport function parser(tokens: any) {\n    let current = 0;\n  \n    function walk() {\n      let token = tokens[current];\n  \n      if (token.type === \"chord\") {\n        current++;\n  \n        return {\n          type: \"chord\",\n          value: token.value,\n        };\n      }\n  \n      if (token.type === \"double barline\") {\n        let node = {\n          type: \"Section\",\n          content: [],\n        };\n  \n        token = tokens[++current];\n  \n        while (token.type !== \"double barline\") {\n          node.content.push(walk());\n          token = tokens[current];\n        }\n  \n        // Finally we will increment `current` one last time to skip the closing barline\n        current++;\n  \n        // And return the node.\n        return node;\n      }\n  \n      if (token.type === \"barline\") {\n        token = tokens[++current];\n  \n        let node = {\n          type: \"bar\",\n          chords: [],\n        };\n  \n        while (token.type !== \"barline\") {\n          node.chords.push(walk());\n          token = tokens[current];\n        }\n  \n        // In case we're in the end, pass on the last barline\n        if (!tokens[current + 1]) {\n          ++current;\n        }\n  \n        return node;\n      }\n  \n      throw new TypeError(`Couldn'd recognize token type \"${token.type}\"\"`);\n    }\n  \n    // Now, we're going to create our AST which will have a root which is a\n    // `Chart` node.\n    let ast = {\n      type: \"Chart\",\n      body: [],\n    };\n  \n    while (current < tokens.length) {\n      ast.body.push(walk());\n    }\n  \n    // At the end of our parser we'll return the AST.\n    return ast;\n  }\n  ","import React, { useState } from \"react\";\nimport styled from \"@emotion/styled\";\nimport ConfigurationPanel from \"./components/ConfigurationPanel\";\nimport MainChord from \"./components/MainChord\";\nimport { defaultParams, ChordDiagramParams, arrayToConfigurableChords, ConfigurableChord } from \"./ChordDiagram\";\nimport { parseChords } from \"./parser/parseChords\";\nimport camelCase from \"camelcase\";\n\n\nconst Main = styled.div`\n  display: flex;\n  height: 100vh;\n  width: 100vw;\n  overflow: hidden;\n`;\n\nfunction App() {\n  const [chords, setChords] = useState<ConfigurableChord[]>(arrayToConfigurableChords([\"C\", \"Cmaj7\", \"C7\", \"F\", \"F/E\", \"D\", \"G\", \"Amin\", \"A-maj7\", \"Am7\", \"A-6\", \"F\", \"Eb\", \"G\", \"C\"]));\n\n  try {\n    // TODO - use this\n    const chordsFromText = parseChords(\"|\" + chords.join(\" \") + \"|\");\n    chordsFromText.map((c: string) => camelCase(c, { pascalCase: true }));\n  } catch (error: any) {\n    console.error(`can't parse chords`);\n  }\n  const [diagramConfiguration, setDiagramConfiguration] =\n    useState<ChordDiagramParams>({ ...defaultParams, debugMode: false });\n\n  return (\n    <Main>\n      <ConfigurationPanel\n        chords={chords}\n        setChords={setChords}\n        diagramConfiguration={diagramConfiguration}\n        setDiagramConfiguration={setDiagramConfiguration}\n      />\n      <MainChord\n        diagramConfiguration={diagramConfiguration}\n        chords={chords.map(chord => chord.chords[chord.selectedPosition - 1])}\n      />\n    </Main>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"@fontsource/roboto/300.css\";\nimport \"@fontsource/roboto/400.css\";\nimport \"@fontsource/roboto/500.css\";\nimport \"@fontsource/roboto/700.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}